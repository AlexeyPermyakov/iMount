////////////////////////////////////////////////////////////////////////////////
// Серверный модуль для работы с картой.
// Основное назначение:
//  - формирование json, который передается в качестве параметра в js.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Сохраняет экстент карты для пользователя.
//
// Параметры:
//  Экстент	 - Строка - экстент, который нужно устанавливать при открытии для пользователя.
//
Процедура КартаЭкстентСохранить(Экстент) Экспорт
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ИдентификаторПользователяИБ");
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	ИмяПользователяИБ = Неопределено;
	Если ПользовательИБ <> Неопределено Тогда
		ИмяПользователяИБ = ПользовательИБ.Имя;
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить("гисКарта", "Экстент", Экстент, , ИмяПользователяИБ);
КонецПроцедуры

// Получает сохраненный экстент карты для пользователя.
// 
// Возвращаемое значение:
//  Строка - экстент, который нужно устанавливать при открытии для пользователя.
//
Функция КартаЭкстентПолучить() Экспорт
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ИдентификаторПользователяИБ");
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	ИмяПользователяИБ = Неопределено;
	Если ПользовательИБ <> Неопределено Тогда
		ИмяПользователяИБ = ПользовательИБ.Имя;
	КонецЕсли;
	Возврат ХранилищеОбщихНастроек.Загрузить("гисКарта", "Экстент", , ИмяПользователяИБ);
КонецФункции


#Область ТочечныеОбъекты

// Формирует json для функции добавления точечных объектов на карту.
// Если попадаются объекты с типом геометрии не "Точка" - игнорируем.
// Если ОбъектКарты - СправочникСсылка.гисОбъектыКарты и не заполнены координаты - выдаем ошибку.
//
// Параметры:
//  ОбъектКарты 					- СправочникСсылка.гисОбъектыКарты - добавляется на карту один этот объект;
//									- Массив/СписокЗначений, элементами являются СправочникСсылка.гисОбъектыКарты - добавляются на карту все переданные объекты;
//	Слой							- СправочникСсылка.гисСлоиКарты - слой, все объекты которого нужно добавить на карту;
//  ДеревоСлоевВнутр				- Строка - внутреннее представление дерева слоев;
//	МассивСлоевДляJs				- Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой		- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		Ид			- Строка - идентификатор слоя на карте;
//		Показатель	- СправочникСсылка.гисПоказатели - показатель объекта слоя.
//  МассивИзображенийДляПубликации 	- Массив - элементы типа Структура, каждый элемент содержит поля:
//		ПутьКФайлу	- Строка - путь к файлу;
//		Ссылка		- СправочникСсылка.гисКартинкиТочечныхОбъектов - элемент картинки слоя.
//
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция ТочечныеОбъектыДобавитьНаКартуСформироватьJson(Знач ОбъектКарты = Неопределено, Знач Слой = Неопределено, ДеревоСлоевВнутр = Неопределено, МассивСлоевДляJs = Неопределено, МассивИзображенийДляПубликации = Неопределено) Экспорт
	МассивИзображенийДляПубликации = ?(ЗначениеЗаполнено(МассивИзображенийДляПубликации), МассивИзображенийДляПубликации, Новый Массив);
	МассивСлоевДляJs = Новый Массив;
	МассивОбъектов = Новый Массив;
	ДеревоСлоев = ЗначениеИзСтрокиВнутр(ДеревоСлоевВнутр);
	
	ВыводитьСообщениеОбОшибке = Ложь;
	Если ТипЗнч(ОбъектКарты) = Тип("СправочникСсылка.гисОбъектыКарты") Тогда
		МассивОбъектов.Добавить(ОбъектКарты);
		ВыводитьСообщениеОбОшибке = Истина;
	ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("СписокЗначений") Тогда
		МассивОбъектов = ОбъектКарты.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("Массив") Тогда
		МассивОбъектов = ОбъектКарты;
	ИначеЕсли ОбъектКарты = Неопределено И ЗначениеЗаполнено(Слой) Тогда
		МассивОбъектов = ПолучитьМассивОбъектовСлоя(Слой);
	КонецЕсли;
	
	Json = Новый Массив;
	СоответствиеСлояИПоказателя = Новый ТаблицаЗначений;
	СоответствиеСлояИПоказателя.Колонки.Добавить("Слой");
	СоответствиеСлояИПоказателя.Колонки.Добавить("Показатель");
	СоответствиеСлояИПоказателя.Колонки.Добавить("Дата");
	СоответствиеСлояИПоказателя.Колонки.Добавить("popup");
	Для Каждого Объект Из МассивОбъектов Цикл
		СлойОбъекта = Объект.Слой;
		Если Не ЗначениеЗаполнено(СлойОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СлойОбъекта.ТипГеометрии <> Перечисления.гисТипыГеометрии.Точка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Широта) И Не ЗначениеЗаполнено(Объект.Долгота) Тогда
			Если ВыводитьСообщениеОбОшибке Тогда
				ТекстСообщения = "Для объекта %1 не указаны координаты!";
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Ссылка));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ТекущиеОбъекты = Неопределено;
		Для Каждого ТекущийСлой Из Json Цикл
			Если ТекущийСлой.layer = СлойОбъекта.Код Тогда
				ТекущиеОбъекты = ТекущийСлой.objects;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТекущиеОбъекты = Неопределено Тогда
			ТекущиеОбъекты = Новый Массив;
			
			Показатель = Неопределено;
			ЕстьТематика = Ложь;
			
			СтрокиДерева = ДеревоСлоев.Строки.НайтиСтроки(Новый Структура("Ссылка", СлойОбъекта), Истина);
			Если СтрокиДерева.Количество() > 0 Тогда
				СтрокаСоответствия = СоответствиеСлояИПоказателя.Добавить();
				СтрокаСоответствия.Слой = СлойОбъекта;
				СтрокаСоответствия.Показатель = СтрокиДерева[0].Показатель;
				СтрокаСоответствия.Дата = СтрокиДерева[0].Дата;
				СтрокаСоответствия.popup = Справочники.гисПоказатели.ПолучитьВсплывающееСообщение(СтрокаСоответствия.Показатель, СлойОбъекта);
				ЕстьТематика = ЗначениеЗаполнено(СтрокаСоответствия.Показатель) И ЗначениеЗаполнено(СтрокаСоответствия.Дата);
				
				Показатель = СтрокаСоответствия.Показатель;
			КонецЕсли;
			
			Стиль = СлойКартыПолучитьСтиль(СлойОбъекта, ЕстьТематика);
			Json.Добавить(Новый Структура("layer,title,zIndex,style,objects", СлойОбъекта.Код, СлойОбъекта.Наименование, СлойОбъекта.ПорядокОтображения, Стиль, ТекущиеОбъекты));
			
			МассивСлоевДляJs.Добавить(Новый Структура("Слой,Ид,Показатель", СлойОбъекта, СлойОбъекта.Код, Показатель));
			
			УжеЕстьКартинка = Ложь;
			Для Каждого КартинкаПубликации Из МассивИзображенийДляПубликации Цикл
				Если КартинкаПубликации.ПутьКФайлу = Стиль.pic Тогда
					УжеЕстьКартинка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не УжеЕстьКартинка Тогда
				МассивИзображенийДляПубликации.Добавить(Новый Структура("ПутьКФайлу,Ссылка", Стиль.pic, СлойОбъекта.Картинка));
			КонецЕсли;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("id", Объект.Код);
		Структура.Вставить("y", Объект.Широта);
		Структура.Вставить("x", Объект.Долгота);
		
		СтрокаСоответствия = СоответствиеСлояИПоказателя.Найти(СлойОбъекта, "Слой");
		Если СтрокаСоответствия <> Неопределено И ЗначениеЗаполнено(СтрокаСоответствия.Показатель) И ЗначениеЗаполнено(СтрокаСоответствия.Дата) Тогда
			Значение = РегистрыСведений.гисЗначенияПоказателейОбъектов.ПолучитьЗначениеОбъектаПоПоказателю(Объект, СтрокаСоответствия.Показатель, СтрокаСоответствия.Дата);
			
			Если СтрокаСоответствия.Показатель.ТипЗначения = Перечисления.гисПоказателиТипы.Число И
				ЗначениеЗаполнено(СтрокаСоответствия.Показатель.КоличествоЗнаков) Тогда
				
				Значение = Окр(Значение, СтрокаСоответствия.Показатель.КоличествоЗнаков);
			КонецЕсли;
			
			Цвет = Справочники.гисПоказатели.ПолучитьЦвет(СтрокаСоответствия.Показатель, СлойОбъекта, Значение);
			Если Цвет = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Структура.Вставить("name", Объект.Наименование);
			Структура.Вставить("popup", СобратьВсплывающееСообщениеТематика(СтрокаСоответствия.popup, Объект, СтрокаСоответствия.Показатель, Значение, СтрокаСоответствия.Дата));
			Структура.Вставить("value", Строка(Значение));
			Структура.Вставить("tC", гисОбщегоНазначенияКлиентСервер.ПеревестиЦветВHEX(Цвет));
			
			ПараметрыТематики = Новый Структура("identifier,date,value", СтрокаСоответствия.Показатель.Код, СтрокаСоответствия.Дата, ЗначениеВСтрокуВнутр(Значение));
			Структура.Вставить("thematics", гисРаботаСJson.ЗаписатьНативно(ПараметрыТематики));
		Иначе
			Структура.Вставить("name", Объект.Наименование);
			Структура.Вставить("popup", СобратьВсплывающееСообщение(Объект));
		КонецЕсли;
		
		ТекущиеОбъекты.Добавить(Структура);
	КонецЦикла;
	
	Для Каждого СтруктураСлоя Из МассивСлоевДляJs Цикл
		СтруктураСлоя.Вставить("КоличествоВсего", ПолучитьКоличествоОбъектовСлоя(СтруктураСлоя.Слой));
	КонецЦикла;
	
	Возврат гисРаботаСJson.ЗаписатьНативно(Json);
КонецФункции

// Формирует json для функции удаления точечных объектов с карты.
// Если попадаются объекты с типом геометрии не "Точка" - игнорируем.
//
// Параметры:
//  ОбъектКарты			- Неопределено - тогда удаляются ВСЕ точечные объекты с карты;
//						- СправочникСсылка.гисОбъектыКарты - удаляется с карты один этот объект;
//						- Массив/СписокЗначений, элементами являются СправочникСсылка.гисОбъектыКарты - удаляются с карты все переданные объекты;
//	Слой				- СправочникСсылка.гисСлоиКарты - слой, все объекты которого нужно удалить с карты.
//	МассивСлоевДляJs	- Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой	- СправочникСсылка.гисСлоиКарты - слой, который был выключен;
//		СлойИд	- Строка - идентификатор слоя на карте.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция ТочечныеОбъектыУдалитьСКартыСформироватьJson(Знач ОбъектКарты = Неопределено, Знач Слой = Неопределено, МассивСлоевДляJs = Неопределено) Экспорт
	МассивСлоевДляJs = Новый Массив;
	МассивОбъектов = Новый Массив;
	МассивСлоев = Новый Массив;
	
	Если ТипЗнч(ОбъектКарты) = Тип("СправочникСсылка.гисОбъектыКарты") Тогда
		МассивОбъектов.Добавить(ОбъектКарты);
	ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("СписокЗначений") Тогда
		МассивОбъектов = ОбъектКарты.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("Массив") Тогда
		МассивОбъектов = ОбъектКарты;
	ИначеЕсли ОбъектКарты = Неопределено И ЗначениеЗаполнено(Слой) Тогда
		МассивСлоев.Добавить(Слой);
	ИначеЕсли ОбъектКарты = Неопределено Тогда
		МассивСлоев = ТочечныеПолучитьСлои();
	КонецЕсли;
	
	Json = Новый Массив;
	Для Каждого ТекущийСлой Из МассивСлоев Цикл
		Json.Добавить(Новый Структура("layer,objects", ТекущийСлой.Код, Новый Массив));
		МассивСлоевДляJs.Добавить(Новый Структура("Слой,Ид", ТекущийСлой, ТекущийСлой.Код));
	КонецЦикла;
	
	Для Каждого Объект Из МассивОбъектов Цикл
		СлойОбъекта = Объект.Слой;
		Если Не ЗначениеЗаполнено(СлойОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СлойОбъекта.ТипГеометрии <> Перечисления.гисТипыГеометрии.Точка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеОбъекты = Неопределено;
		Для Каждого ТекущийСлой Из Json Цикл
			Если ТекущийСлой.layer = СлойОбъекта.Код Тогда
				ТекущиеОбъекты = ТекущийСлой.objects;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТекущиеОбъекты = Неопределено Тогда
			ТекущиеОбъекты = Новый Массив;
			Json.Добавить(Новый Структура("layer,objects", СлойОбъекта.Код, ТекущиеОбъекты));
			МассивСлоевДляJs.Добавить(Новый Структура("Слой,Ид", СлойОбъекта, СлойОбъекта.Код));
		КонецЕсли;
		
		ТекущиеОбъекты.Добавить(Объект.Код);
	КонецЦикла;
	
	Для Каждого СтруктураСлоя Из МассивСлоевДляJs Цикл
		СтруктураСлоя.Вставить("КоличествоВсего", ПолучитьКоличествоОбъектовСлоя(СтруктураСлоя.Слой));
	КонецЦикла;
	
	Возврат гисРаботаСJson.ЗаписатьНативно(Json);
КонецФункции

// Дополняет массив картинок двоичными данными.
//
// Параметры:
//  МассивНеОпубликованныхКартинок	- Массив - элементы типа Структура:
//		Ссылка		- СправочникСсылка.гисКартинкиТочечныхОбъектов - картинка;
//		ПутьКФайлу	- Строка - относительный путь к файлу картинки (для публикации).
//
Процедура ТочечныеОбъектыКартинкиДополнитьСодержимое(МассивНеОпубликованныхКартинок) Экспорт
	Для Каждого Картинка Из МассивНеОпубликованныхКартинок Цикл
		Картинка.Вставить("Содержимое", Картинка.Ссылка.Содержимое);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область КонтурныеОбъекты

// Формирует json для функции добавления контурных объектов на карту.
// Если попадаются объекты с типом геометрии не "Линия" и не "Полигон" - игнорируем.
// Если ОбъектКарты - СправочникСсылка.гисОбъектыКарты и не заполнена геометрия - выдаем ошибку.
// Если ОбъектКарты = Неопределено, но заполнен слой - добавляем все объекты слоя.
// Слой может быть задан ссылкой, а может строкой, возможные значения строки:
//		гисОбъектыКарты
//		гисКадастровыеЗемельныеУчастки
//
// Параметры:
//  ОбъектКарты 		- СправочникСсылка.гисОбъектыКарты - добавляется на карту один этот объект;
//						- СправочникСсылка.гисКадастровыеЗемельныеУчастки - добавляется на карту один этот объект;
//						- Массив/СписокЗначений, элементами являются предыдущие типы - добавляются на карту все переданные объекты;
//	Слой				- СправочникСсылка.гисСлоиКарты - слой, все объекты которого нужно добавить на карту;
//						- Строка - один из кадастровых слоев;
//  ДеревоСлоевВнутр	- Строка - внутреннее представление дерева слоев;
//	МассивСлоевДляJs	- Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой		- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		Ид			- Строка - идентификатор слоя на карте;
//		Показатель	- СправочникСсылка.гисПоказатели - показатель объекта слоя.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция КонтурныеДобавитьНаКартуСформироватьJson(Знач ОбъектКарты, Знач Слой = Неопределено, ДеревоСлоевВнутр = Неопределено, МассивСлоевДляJs = Неопределено) Экспорт
	МассивСлоевДляJs = Новый Массив;
	МассивОбъектов = Новый Массив;
	ДеревоСлоев = ЗначениеИзСтрокиВнутр(ДеревоСлоевВнутр);
	
	ВыводитьСообщениеОбОшибке = Ложь;
	Если ТипЗнч(ОбъектКарты) = Тип("СправочникСсылка.гисОбъектыКарты") Или ТипЗнч(ОбъектКарты) = Тип("СправочникСсылка.гисКадастровыеЗемельныеУчастки") Тогда
		МассивОбъектов.Добавить(ОбъектКарты);
		ВыводитьСообщениеОбОшибке = Истина;
	ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("СписокЗначений") Тогда
		МассивОбъектов = ОбъектКарты.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("Массив") Тогда
		МассивОбъектов = ОбъектКарты;
	ИначеЕсли ОбъектКарты = Неопределено И ЗначениеЗаполнено(Слой) Тогда
		МассивОбъектов = ПолучитьМассивОбъектовСлоя(Слой);
	КонецЕсли;
	
	Json = Новый Массив;
	СоответствиеСлояИПоказателя = Новый ТаблицаЗначений;
	СоответствиеСлояИПоказателя.Колонки.Добавить("Слой");
	СоответствиеСлояИПоказателя.Колонки.Добавить("Показатель");
	СоответствиеСлояИПоказателя.Колонки.Добавить("Дата");
	СоответствиеСлояИПоказателя.Колонки.Добавить("popup");
	Для Каждого Объект Из МассивОбъектов Цикл
		СлойОбъекта = Объект.Слой;
		Если Не ЗначениеЗаполнено(СлойОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СлойОбъекта.ТипГеометрии <> Перечисления.гисТипыГеометрии.Линия 
			И СлойОбъекта.ТипГеометрии <> Перечисления.гисТипыГеометрии.Полигон Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ГеометрияWgs) Тогда
			Если ВыводитьСообщениеОбОшибке Тогда
				ТекстСообщения = "Для объекта %1 не заполнена геометрия в системе координат WGS-84!";
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Ссылка));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		
		ТекущиеОбъекты = Неопределено;
		Для Каждого ТекущийСлой Из Json Цикл
			Если ТекущийСлой.layer = СлойОбъекта.Код Тогда
				ТекущиеОбъекты = ТекущийСлой.features;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТекущиеОбъекты = Неопределено Тогда
			ТекущиеОбъекты = Новый Массив;
			
			Показатель = Новый Массив;
			
			СтрокиДерева = ДеревоСлоев.Строки.НайтиСтроки(Новый Структура("Ссылка", СлойОбъекта), Истина);
			Если СтрокиДерева.Количество() > 0 Тогда
				СтрокаСоответствия = СоответствиеСлояИПоказателя.Добавить();
				СтрокаСоответствия.Слой = СлойОбъекта;
				СтрокаСоответствия.Показатель = СтрокиДерева[0].Показатель;
				СтрокаСоответствия.Дата = СтрокиДерева[0].Дата;
				СтрокаСоответствия.popup = Справочники.гисПоказатели.ПолучитьВсплывающееСообщение(СтрокаСоответствия.Показатель, СлойОбъекта);
				
				Показатель = СтрокаСоответствия.Показатель;
			КонецЕсли;
			
			
			Json.Добавить(Новый Структура("layer,title,zIndex,style,type,features", СлойОбъекта.Код, СлойОбъекта.Наименование, СлойОбъекта.ПорядокОтображения, СлойКартыПолучитьСтиль(СлойОбъекта), "FeatureCollection", ТекущиеОбъекты));
			Попытка
				МассивСлоевДляJs.Добавить(Новый Структура("Слой,Ид,Показатель", СлойОбъекта, СлойОбъекта.Код, Показатель));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Геометрия = гисРаботаСJson.ПрочитатьНативно(Объект.ГеометрияWgs);
		Попытка
			Свойства = Геометрия.properties;
		Исключение
			Свойства = Новый Структура;
		КонецПопытки;
		Свойства.Вставить("code", Объект.Код);
		
		СтрокаСоответствия = СоответствиеСлояИПоказателя.Найти(СлойОбъекта, "Слой");
		Если СтрокаСоответствия <> Неопределено И ЗначениеЗаполнено(СтрокаСоответствия.Показатель) И ЗначениеЗаполнено(СтрокаСоответствия.Дата) Тогда
			Значение = РегистрыСведений.гисЗначенияПоказателейОбъектов.ПолучитьЗначениеОбъектаПоПоказателю(Объект, СтрокаСоответствия.Показатель, СтрокаСоответствия.Дата);
			
			Если СтрокаСоответствия.Показатель.ТипЗначения = Перечисления.гисПоказателиТипы.Число И
				ЗначениеЗаполнено(СтрокаСоответствия.Показатель.КоличествоЗнаков) Тогда
				
				Значение = Окр(Значение, СтрокаСоответствия.Показатель.КоличествоЗнаков);
			КонецЕсли;
			
			Цвет = Справочники.гисПоказатели.ПолучитьЦвет(СтрокаСоответствия.Показатель, СлойОбъекта, Значение);
			Если Цвет = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			
			Свойства.Вставить("name", Объект.Наименование);
			Свойства.Вставить("popup", СобратьВсплывающееСообщениеТематика(СтрокаСоответствия.popup, Объект, СтрокаСоответствия.Показатель, Значение, СтрокаСоответствия.Дата));
			Свойства.Вставить("value", Строка(Значение));
			Если Объект.Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Линия Тогда
				Свойства.Вставить("bC", гисОбщегоНазначенияКлиентСервер.ПеревестиЦветВHEX(Цвет));
			Иначе
				Свойства.Вставить("fC", гисОбщегоНазначенияКлиентСервер.ПеревестиЦветВHEX(Цвет));
			КонецЕсли;
			
			ПараметрыТематики = Новый Структура("identifier,date,value", СтрокаСоответствия.Показатель.Код, СтрокаСоответствия.Дата, ЗначениеВСтрокуВнутр(Значение));
			Свойства.Вставить("thematics", гисРаботаСJson.ЗаписатьНативно(ПараметрыТематики));
		Иначе
			Свойства.Вставить("name", Объект.Наименование);
			Свойства.Вставить("popup", СобратьВсплывающееСообщение(Объект));
		КонецЕсли;
		
		
		Геометрия.Вставить("properties", Свойства);
		
		ТекущиеОбъекты.Добавить(Геометрия);
	КонецЦикла;
	
	Для Каждого СтруктураСлоя Из МассивСлоевДляJs Цикл
		СтруктураСлоя.Вставить("КоличествоВсего", ПолучитьКоличествоОбъектовСлоя(СтруктураСлоя.Слой));
	КонецЦикла;
	
	Возврат гисРаботаСJson.ЗаписатьНативно(Json);
КонецФункции

// Формирует json для функции удаления контурных объектов с карты.
// Если попадаются "объекты карты" с типом геометрии не "Линия" и не "Полигон" - игнорируем.
// Если ОбъектКарты = Неопределено, но заполнен слой - удаляем все объекты слоя.
// Слой может быть задан ссылкой, а может строкой, возможные значения строки:
//		гисОбъектыКарты
//		гисКадастровыеЗемельныеУчастки
//
// Параметры:
//  ОбъектКарты 		- Неопределено - тогда удаляются ВСЕ контурные объекты с карты;
//						- СправочникСсылка.гисОбъектыКарты - удаляется с карты один этот объект;
//						- СправочникСсылка.гисКадастровыеЗемельныеУчастки - удаляется с карты один этот объект;
//						- Массив/СписокЗначений, элементами являются предыдущие типы - удаляется с карты все переданные объекты;
//	Слой				- СправочникСсылка.гисСлоиКарты - слой, все объекты которого нужно удалить с карты.
//						- Строка - один из кадастровых слоев.
//	МассивСлоевДляJs	- Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой	- СправочникСсылка.гисСлоиКарты - слой, который был выключен;
//		Ид		- Строка - идентификатор слоя на карте.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция КонтурныеУдалитьСКартыСформироватьJson(Знач ОбъектКарты, Знач Слой = Неопределено, МассивСлоевДляJs = Неопределено) Экспорт
	МассивСлоевДляJs = Новый Массив;
	МассивОбъектов = Новый Массив;
	МассивСлоев = Новый Массив;
	
	Если ТипЗнч(ОбъектКарты) = Тип("СправочникСсылка.гисОбъектыКарты") Или ТипЗнч(ОбъектКарты) = Тип("СправочникСсылка.гисКадастровыеЗемельныеУчастки") Тогда
		МассивОбъектов.Добавить(ОбъектКарты);
	ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("СписокЗначений") Тогда
		МассивОбъектов = ОбъектКарты.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("Массив") Тогда
		МассивОбъектов = ОбъектКарты;
	ИначеЕсли ОбъектКарты = Неопределено И ЗначениеЗаполнено(Слой) И ТипЗнч(Слой) = Тип("СправочникСсылка.гисСлоиКарты") Тогда
		МассивСлоев.Добавить(Слой);
	ИначеЕсли ОбъектКарты = Неопределено Тогда
		МассивСлоев = КонтурныеПолучитьСлои(Слой);
	КонецЕсли;
	
	Json = Новый Массив;
	Для Каждого ТекущийСлой Из МассивСлоев Цикл
		Json.Добавить(Новый Структура("layer,objects", ТекущийСлой.Код, Новый Массив));
		МассивСлоевДляJs.Добавить(Новый Структура("Слой,Ид", ТекущийСлой, ТекущийСлой.Код));
	КонецЦикла;
	
	Для Каждого Объект Из МассивОбъектов Цикл
		СлойОбъекта = Объект.Слой;
		Если Не ЗначениеЗаполнено(СлойОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СлойОбъекта.ТипГеометрии <> Перечисления.гисТипыГеометрии.Линия 
			И СлойОбъекта.ТипГеометрии <> Перечисления.гисТипыГеометрии.Полигон Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеОбъекты = Неопределено;
		Для Каждого ТекущийСлой Из Json Цикл
			Если ТекущийСлой.layer = СлойОбъекта.Код Тогда
				ТекущиеОбъекты = ТекущийСлой.objects;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТекущиеОбъекты = Неопределено Тогда
			ТекущиеОбъекты = Новый Массив;
			Json.Добавить(Новый Структура("layer,objects", СлойОбъекта.Код, ТекущиеОбъекты));
			Попытка
				МассивСлоевДляJs.Добавить(Новый Структура("Слой,Ид", СлойОбъекта, СлойОбъекта.Код));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ТекущиеОбъекты.Добавить(Объект.Код);
	КонецЦикла;
	
	Для Каждого СтруктураСлоя Из МассивСлоевДляJs Цикл
		СтруктураСлоя.Вставить("КоличествоВсего", ПолучитьКоличествоОбъектовСлоя(СтруктураСлоя.Слой));
	КонецЦикла;
	
	Возврат гисРаботаСJson.ЗаписатьНативно(Json);
КонецФункции

// Возвращает геометрию объекта.
//
// Параметры:
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты 					- объект карты, геометрию котого нужно вернуть;
//					СправочникСсылка.гисКадастровыеЗемельныеУчастки
// 
// Возвращаемое значение:
//   - Строка - геометрия объекта.
//
Функция КонтурныеПолучитьГеометрию(ОбъектКарты) Экспорт
	Возврат ОбъектКарты.ГеометрияWgs;
КонецФункции

// Возвращает геометрию объекта.
//
// Параметры:
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты 					- объект карты, геометрию котого нужно вернуть;
//					СправочникСсылка.гисКадастровыеЗемельныеУчастки
// 
// Возвращаемое значение:
//   - Строка - геометрия объекта.
//
Функция КонтурныеПолучитьГеометриюДляРедактора(ОбъектКарты) Экспорт
	Координаты = Новый Массив;
	Координаты.Добавить(ОбъектКарты.Широта);
	Координаты.Добавить(ОбъектКарты.Долгота);
	Геометрия = Новый Структура("type,coordinates", "Point", Координаты);
	Атрибуты = Новый Структура("id,layer", ОбъектКарты.Код, ОбъектКарты.Слой.Код);
	Json = Новый Структура("type,properties,geometry", "Feature", Атрибуты, Геометрия);
	Возврат гисРаботаСJson.ЗаписатьНативно(Json);	
КонецФункции

#КонецОбласти

#Область Слои

// Формирует json для функции добавления слоя kml на карту.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, который нужо добавить на карту.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция СлоиKmlДобавитьНаКартуСформироватьJson(Знач Слой) Экспорт
	Структура = Новый Структура("layerName,layerTitle,zIndex,kml", Слой.Код, Слой.Наименование, Слой.ПорядокОтображения, Слой.ТекстФайла);
	Возврат гисРаботаСJson.ЗаписатьНативно(Структура);
КонецФункции

// Формирует json для функции удаления слоя kml с карты.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, который нужо удалить с карты.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция СлоиKmlУдалитьСКартыСформироватьJson(Знач Слой) Экспорт
	Возврат Слой.Код;
КонецФункции

// Формирует json для функции добавления слоя wms на карту.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, который нужо добавить на карту.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция СлоиWmsДобавитьНаКартуСформироватьJson(Знач Слой) Экспорт
	Структура = Новый Структура("layerName,layerTitle,zIndex,wmsUrl,wmsLayerName", Слой.Код, Слой.Наименование, Слой.ПорядокОтображения, Слой.ГисСерверАдрес, Слой.ГисСерверИмяСлоя);
	Возврат гисРаботаСJson.ЗаписатьНативно(Структура);
КонецФункции

// Формирует json для функции удаления слоя wms с карты.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, который нужо удалить с карты.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция СлоиWmsУдалитьСКартыСформироватьJson(Знач Слой) Экспорт
	Возврат Слой.Код;
КонецФункции

// Формирует json для функции изменения видимости слоя карты по наименованию.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, которому нужо изменить видимость на карте;
//  Видимость - Булево - статус видимости.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция СлоиПоНаименованиюВидимостьСформироватьJson(Знач Слой, Знач Видимость) Экспорт
	Структура = Новый Структура("layerName,visible,zIndex", СлоиПолучитьИмяСлояВJs(Слой), Видимость, Слой.ПорядокОтображения);
	Возврат гисРаботаСJson.ЗаписатьНативно(Структура);
КонецФункции

// Возвращает имя слоя, которое будет использовано в js.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, которому нужо изменить видимость на карте.
// 
// Возвращаемое значение:
//   - Строка - название слоя, которое будет испольовано в js.
//
Функция СлоиПолучитьИмяСлояВJs(Слой) Экспорт
	Возврат ?(Слой.ТипСлоя = Перечисления.гисТипыСлоев.Росреестр, "Росреестр (кадастровое деление)", Слой.Код);
КонецФункции

// Формирует json для функции изменения непрозрачности слоя карты.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, которому нужо изменить видимость на карте;
//  Непрозрачность	 - Число - значение непрозрачности слоя от 0 до 100.
// 
// Возвращаемое значение:
//  Строка - Json, подготовленный для отправки в js.
//
Функция СлоиНепрозрачностьСформироватьJson(Знач Слой, Знач Непрозрачность) Экспорт
	Структура = Новый Структура("layerName,opacity", СлоиПолучитьИмяСлояВJs(Слой), Непрозрачность);
	Возврат гисРаботаСJson.ЗаписатьНативно(Структура);
КонецФункции


// Формирует json для функции добавления слоя на карту.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, который нужо добавить на карту;
//  ДеревоСлоев - Строка - внутреннее представление дерева слоев.
// 
// Возвращаемое значение:
//  Структура - параметры для вызова функции js, состоит из:
//		ИмяМетода			-	Строка	-	название метода js, который нужно вызвать для добавления слоя;
//		Параметры			-	Строка	-	json для передачи в метод js;
//		Слои				-	Массив	-	массив слоев, количество объектов которых изменилось на карте;
//		КартинкиПараметры	-	Массив	-	массив картинок, которые должны быть опубликованы.
//
Функция СлоиДобавитьНаКартуПолучитьПараметры(Слой, ДеревоСлоев) Экспорт
	Параметры = Новый Структура("ИмяМетода,Параметры,Слои,Картинки", "", "", Новый Массив, Новый Массив);
	
	ТипСлоя = Слой.ТипСлоя;
	Если ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты Тогда
		ТипГеометрии = Слой.ТипГеометрии;
		Если ТипГеометрии = Перечисления.гисТипыГеометрии.Точка Тогда
			Параметры.ИмяМетода = "addPoints_1C";
			Параметры.Параметры = ТочечныеОбъектыДобавитьНаКартуСформироватьJson(, Слой, ДеревоСлоев, Параметры.Слои, Параметры.Картинки);
		ИначеЕсли ТипГеометрии = Перечисления.гисТипыГеометрии.Линия 
			Или ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон Тогда
			
			Параметры.ИмяМетода = "addFeaturesByJson_1C";
			Параметры.Параметры = КонтурныеДобавитьНаКартуСформироватьJson(, Слой, ДеревоСлоев, Параметры.Слои);
		КонецЕсли;
	ИначеЕсли ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки Тогда
		Параметры.ИмяМетода = "addFeaturesByJson_1C";
		Параметры.Параметры = КонтурныеДобавитьНаКартуСформироватьJson(, Слой, ДеревоСлоев, Параметры.Слои);
	ИначеЕсли ТипСлоя = Перечисления.гисТипыСлоев.ИзФайла Тогда
		ФорматСлоя = Слой.ФорматГеоданных;
		Если ФорматСлоя = Перечисления.гисФорматыГеоданных.KML Тогда
			Параметры.ИмяМетода = "addKmlLayer_1C";
			Параметры.Параметры = гисРаботаСКартойСервер.СлоиKmlДобавитьНаКартуСформироватьJson(Слой);
		КонецЕсли;
	ИначеЕсли ТипСлоя = Перечисления.гисТипыСлоев.Росреестр Тогда
		Параметры.ИмяМетода = "setLayerVisible_1C";
		Параметры.Параметры = гисРаботаСКартойСервер.СлоиПоНаименованиюВидимостьСформироватьJson(Слой, Истина);
	ИначеЕсли ТипСлоя = Перечисления.гисТипыСлоев.WMS Тогда
		Параметры.ИмяМетода = "addWmsLayer_1C";
		Параметры.Параметры = гисРаботаСКартойСервер.СлоиWmsДобавитьНаКартуСформироватьJson(Слой);
	КонецЕсли;
	
	Возврат Параметры;
КонецФункции

// Формирует json для функции удаления слоя с карты.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты - слой, который нужо удалить с карты.
// 
// Возвращаемое значение:
//  Структура - параметры для вызова функции js, состоит из:
//		ИмяМетода	-	Строка	-	название метода js, который нужно вызвать для удаления слоя;
//		Параметры	-	Строка	-	json для передачи в метод js.
//
Функция СлоиУдалитьСКартыПолучитьПараметры(Слой) Экспорт
	Параметры = Новый Структура("ИмяМетода,Параметры,Слои", "", "", Новый Массив);
	
	ТипСлоя = Слой.ТипСлоя;
	Если ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты Тогда
		ТипГеометрии = Слой.ТипГеометрии;
		Если ТипГеометрии = Перечисления.гисТипыГеометрии.Точка Тогда
			Параметры.ИмяМетода = "removePoints_1C";
			Параметры.Параметры = ТочечныеОбъектыУдалитьСКартыСформироватьJson(, Слой, Параметры.Слои);
		ИначеЕсли ТипГеометрии = Перечисления.гисТипыГеометрии.Линия 
			Или ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон Тогда
			
			Параметры.ИмяМетода = "removeFeatures_1C";
			Параметры.Параметры = КонтурныеУдалитьСКартыСформироватьJson(, Слой, Параметры.Слои);
		КонецЕсли;
	ИначеЕсли ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки Тогда
		Параметры.ИмяМетода = "removeFeatures_1C";
		Параметры.Параметры = КонтурныеУдалитьСКартыСформироватьJson(, Слой, Параметры.Слои);
	ИначеЕсли ТипСлоя = Перечисления.гисТипыСлоев.ИзФайла Тогда
		ФорматСлоя = Слой.ФорматГеоданных;
		Если ФорматСлоя = Перечисления.гисФорматыГеоданных.KML Тогда
			Параметры.ИмяМетода = "removeKmlLayer_1C";
			Параметры.Параметры = гисРаботаСКартойСервер.СлоиKmlУдалитьСКартыСформироватьJson(Слой);
		КонецЕсли;
	ИначеЕсли ТипСлоя = Перечисления.гисТипыСлоев.Росреестр Тогда
		Параметры.ИмяМетода = "setLayerVisible_1C";
		Параметры.Параметры = гисРаботаСКартойСервер.СлоиПоНаименованиюВидимостьСформироватьJson(Слой, Ложь);
	ИначеЕсли ТипСлоя = Перечисления.гисТипыСлоев.WMS Тогда
		Параметры.ИмяМетода = "removeWmsLayer_1C";
		Параметры.Параметры = гисРаботаСКартойСервер.СлоиWmsУдалитьСКартыСформироватьJson(Слой);
	КонецЕсли;
	
	Возврат Параметры;
КонецФункции

#КонецОбласти

#Область Тематика

// Формирует json для построения тематики на карте.
//
// Параметры:
//  Слой		 - СправочникСсылка.гисСлоиКарты - слой, по которому строится тематика;
//  Показатель	 - СправочникСсылка.гисПоказатели - показатель, по которому строится тематика.
// 
// Возвращаемое значение:
//   - Строка - json, подготовленный для отправки в js.
//
Функция ТематикаЛегендаДобавитьСформироватьJson(Слой, Показатель) Экспорт
	Json = Новый Массив;
	
	ТаблицаЦветов = Справочники.гисПоказатели.ПолучитьРаскраску(Показатель, Слой);
	
	Цвета = Новый Массив;
	Для Каждого Строка Из ТаблицаЦветов Цикл
		Цвета.Добавить(Новый Структура("color,title", гисОбщегоНазначенияКлиентСервер.ПеревестиЦветВHEX(Строка.Цвет), Строка.Подпись));
	КонецЦикла;
	
	ЛегендаПоСлою = Новый Структура("id,title,colors", Слой.Код, Слой.Наименование, Цвета);
	
	Json.Добавить(ЛегендаПоСлою);
	
	Возврат гисРаботаСJson.ЗаписатьНативно(Json);
КонецФункции

// Формирует json для удаления тематики с карты.
//
// Параметры:
//  Слой	- СправочникСсылка.гисСлоиКарты - слой, по которому строится тематика.
// 
// Возвращаемое значение:
//   - Строка - json, подготовленный для отправки в js.
//
Функция ТематикаЛегендаУдалитьСформироватьJson(Слой) Экспорт
	Json = Новый Массив;
	Json.Добавить(Слой.Код);
	
	Возврат гисРаботаСJson.ЗаписатьНативно(Json);
КонецФункции

#КонецОбласти

#Область Публикация

// Возвращает макет ресурсов карты.
//
// Возвращаемое значение:
//  Двоичные данные - zip-файл ресурсов карты.
//
Функция ПубликацияПолучитьМакетКарты() Экспорт
    Возврат ПолучитьОбщийМакет("гисРесурсыКарты"); 
КонецФункции

#КонецОбласти

#Область Редактор

// Формирует json для включения редактора на карте.
//
// Параметры:
//  ОбъектКарты 	- СправочникСсылка.гисСлоиКарты - отправляются в редактор все объекты слоя подерживаемых типов;
//					- СправочникСсылка.гисОбъектыКарты - отправляется в редактор один этот объект;
//					- Массив/СписокЗначений, элементами являются предыдущие типы - добавляются на карту все переданные объекты.
// 
// Возвращаемое значение:
//  Структура - параметры для вызова редактора геометрии js, состоит из:
//		type		-	Строка	-	тип редактируемой геометрии, если вся геометрия одного типа, иначе параметр отсутствует;
//		features	-	Массив	-	объектное представление GeoJSON редактируемых объектов.
//
Функция РедакторСформироватьJsonДляРедактированияОбъектов(ОбъектКарты) Экспорт
	МассивОбъектов = Новый Массив;
	МассивОбъектовДляОтображения = Новый Массив;
	ТипГеометрииОбъектов = Неопределено;
	РедактируемыйСлой = Неопределено;
	РадактируемыйФайл = Неопределено;
	ФорматФайла = Неопределено;
	РежимРедактора = "new";
	
	Если ЗначениеЗаполнено(ОбъектКарты) Тогда
		Если ТипЗнч(ОбъектКарты) = Тип("СправочникСсылка.гисОбъектыКарты") Тогда
			МассивОбъектов.Добавить(ОбъектКарты);
			РежимРедактора = "feature";
			РедактируемыйСлой = ОбъектКарты.Слой.Код;
		ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("Массив") Тогда
			МассивОбъектов = ОбъектКарты;
			РежимРедактора = "features";
		ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("СписокЗначений") Тогда
			МассивОбъектов = ОбъектКарты.ВыгрузитьЗначения();
			РежимРедактора = "features";
		ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("СправочникСсылка.гисСлоиКарты") Тогда
			Если ОбъектКарты.ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты Тогда
				МассивОбъектов = ПолучитьМассивОбъектовСлоя(ОбъектКарты);
				РежимРедактора = "layer";
				РедактируемыйСлой = ОбъектКарты.Код;
				Если ЗначениеЗаполнено(ОбъектКарты.ТипГеометрии) Тогда
					Если ОбъектКарты.ТипГеометрии = Перечисления.гисТипыГеометрии.Точка Тогда
						ТипГеометрииОбъектов = "Point";
					ИначеЕсли ОбъектКарты.ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон Тогда
						ТипГеометрииОбъектов = "Polygon";
					ИначеЕсли ОбъектКарты.ТипГеометрии = Перечисления.гисТипыГеометрии.Линия Тогда
						ТипГеометрииОбъектов = "LineString";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ОбъектКарты.ТипСлоя = Перечисления.гисТипыСлоев.ИзФайла Тогда
				Если ОбъектКарты.ФорматГеоданных = Перечисления.гисФорматыГеоданных.KML Тогда
					РадактируемыйФайл = ОбъектКарты.ТекстФайла;
					РедактируемыйСлой = ОбъектКарты.Код;
					РежимРедактора = "layer";
					ФорматФайла = "KML";
				КонецЕсли;
			Иначе
				РежимРедактора = Неопределено;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектКарты) = Тип("Строка") Тогда
			
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.гисОбъектыКарты") Тогда
			Геометрия = Неопределено;
			
			Если Объект.Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Точка Тогда
				Если ЗначениеЗаполнено(Объект.Долгота) И ЗначениеЗаполнено(Объект.Широта) Тогда
					Атрибуты = Новый Структура;
					Координаты = Новый Массив;
					Координаты.Добавить(Объект.Долгота);
					Координаты.Добавить(Объект.Широта);
					Геометрия = Новый Структура("type,coordinates", "Point", Координаты);
					СтильСлоя = СлойКартыПолучитьСтиль( Объект.Слой );
				Иначе
					ТипГеометрииОбъектов = "Point";
				КонецЕсли;
			ИначеЕсли Объект.Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Линия 
					ИЛИ Объект.Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон Тогда
				Если ЗначениеЗаполнено(Объект.ГеометрияWgs) Тогда
					ГеометрияКонтурная = гисРаботаСJson.ПрочитатьНативно(Объект.ГеометрияWgs);
					Попытка
						Атрибуты = ГеометрияКонтурная.properties;
					Исключение
						Атрибуты = Новый Структура;
					КонецПопытки;
					Геометрия = ГеометрияКонтурная.geometry;
				ИначеЕсли Объект.Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Линия Тогда
					ТипГеометрииОбъектов = "LineString";
				ИначеЕсли Объект.Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон Тогда
					ТипГеометрииОбъектов = "Polygon";
				КонецЕсли;
			КонецЕсли;
			
			Если Геометрия <> Неопределено Тогда
				Атрибуты.Вставить("_id_", Объект.Код);
				Атрибуты.Вставить("_layer_", Объект.Слой.Код);
				GeoJsonОбъекта = Новый Структура("type,properties,geometry", "Feature", Атрибуты, Геометрия);
				МассивОбъектовДляОтображения.Добавить(GeoJsonОбъекта);
			КонецЕсли;
			
			Если ТипГеометрииОбъектов <> "" И ЗначениеЗаполнено(Геометрия) Тогда
				Если ТипГеометрииОбъектов = Неопределено Тогда
					ТипГеометрииОбъектов = Геометрия.type;
				ИначеЕсли ТипГеометрииОбъектов <> Геометрия.type Тогда
					ТипГеометрииОбъектов = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.гисСлоиКарты") Тогда
			
			Если ОбъектКарты.ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты Тогда
				МассивОбъектовСлоя = ПолучитьМассивОбъектовСлоя(Объект);
				Для Каждого ОбъектСлоя Из МассивОбъектовСлоя Цикл
					МассивОбъектов.Добавить(ОбъектСлоя);
				КонецЦикла;
				РежимРедактора = "layer";
			Иначе
				РежимРедактора = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РежимРедактора <> Неопределено Тогда
		Json = Новый Структура("mode", РежимРедактора);
		Если ЗначениеЗаполнено(РедактируемыйСлой) Тогда
			Json.Вставить("layer", РедактируемыйСлой);
			Если ЗначениеЗаполнено(ФорматФайла) Тогда
				Если ФорматФайла = "KML" Тогда
					Json.Вставить("kml", РадактируемыйФайл);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТипГеометрииОбъектов <> Неопределено И ТипГеометрииОбъектов <> "" Тогда
			Json.Вставить("type", ТипГеометрииОбъектов);
		КонецЕсли;
		Если РежимРедактора = "feature" Тогда
			Json.Вставить("id", ОбъектКарты.Код);
		КонецЕсли;
		Если 0 < МассивОбъектовДляОтображения.Количество() Тогда
			Json.Вставить("features", МассивОбъектовДляОтображения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтильСлоя) Тогда
			Json.Вставить("style", СтильСлоя);
		КонецЕсли;
		Возврат гисРаботаСJson.ЗаписатьНативно(Json);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Назначает новую геометрию существующему объекту слоя.
//
// Параметры:
//  КодОбъекта		 -	Число 	- 	код объекта;
//  ГеометрияОбъекта - 	GeoJSON	-   геометрия объекта в GeoJSON (не обязательный).
//
// Возвращаемое значение:
//	- Булево - результат назначения геометрии.
//
Функция РедакторНазначитьГеометриюОбъектуКарты(КодОбъекта, ГеометрияОбъекта = Неопределено) Экспорт
	Попытка
		ОбъектКартыСсылка = Справочники.гисОбъектыКарты.НайтиПоКоду(КодОбъекта);
		Если ЗначениеЗаполнено(ОбъектКартыСсылка) Тогда
			ОбъектКарты = ОбъектКартыСсылка.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ГеометрияОбъекта) Тогда 
				Если ОбъектКарты.Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Точка И ГеометрияОбъекта.geometry.type = "Point" Тогда
					ОбъектКарты.Долгота = ГеометрияОбъекта.geometry.coordinates[0];
					ОбъектКарты.Широта = ГеометрияОбъекта.geometry.coordinates[1];
				ИначеЕсли ОбъектКарты.Слой.ТипГеометрии <> Перечисления.гисТипыГеометрии.Точка И ГеометрияОбъекта.geometry.type <> "Point" Тогда
					ГеометрияОбъекта.properties.Удалить("_id_");
					ГеометрияОбъекта.properties.Удалить("_layer_");
					ОбъектКарты.ГеометрияWgs = гисРаботаСJson.ЗаписатьНативно(ГеометрияОбъекта);
				КонецЕсли;
			Иначе
				ОбъектКарты.ГеометрияWgs = "";
				ОбъектКарты.Долгота = 0;
				ОбъектКарты.Широта = 0;
			КонецЕсли;
			ОбъектКарты.Записать();
		КонецЕсли;
		Возврат Истина;
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбъектКарты.Наименование + ": " + КраткоеПредставлениеОшибки( ИнформацияОбОшибке() );
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Возвращает ссылки на объекты слоя.
//
// Параметры:
//  КодСлоя			-   Число	- код слоя;
//  КодыИзмененных	-	Массив	- идентификаторы объектов, геометрия которых изменилась;
//  КодыУдаленных	-	Массив	- идентификаторы объектов, геометрия которых удалилась.
//
// Возвращаемое значение:
//	Структура - содержит поля:
//		Слой - СправочникСсылка.гисСлоиКарты - искомый слой;
//		ОбъектыИзмененные - Массив - элементы типа СправочникСсылка.гисОбъектыКарты - 
//			начальный массив измененных объектов, в котором индексы заменены на ссылки.
//		ОбъектыУдаленные - Массив - элементы типа СправочникСсылка.гисОбъектыКарты - 
//			начальный массив удаленных объектов, в котором индексы заменены на ссылки.
//
Функция РедакторПолучитьСсылкиНаОбъектыСлояКарты(КодСлоя, Знач КодыИзмененных, Знач КодыУдаленных) Экспорт
	СлойКартыСсылка = Справочники.гисСлоиКарты.НайтиПоКоду(КодСлоя).Ссылка;
	
	Для индекс = 0 По КодыИзмененных.ВГраница() Цикл
		КодыИзмененных[индекс] = Справочники.гисОбъектыКарты.НайтиПоКоду(КодыИзмененных[индекс]).Ссылка;
	КонецЦикла;
	
	Для индекс = 0 По КодыУдаленных.ВГраница() Цикл
		КодыУдаленных[индекс] = Справочники.гисОбъектыКарты.НайтиПоКоду(КодыУдаленных[индекс]).Ссылка;
	КонецЦикла;
	
	Возврат Новый Структура("Слой,ОбъектыИзмененные,ОбъектыУдаленные", СлойКартыСсылка, КодыИзмененных, КодыУдаленных);
КонецФункции


// Записывает измененные данные KML в слой карты.
//
// Параметры:
//  КодСлоя		 - 	Строка - Идентификатор слоя;
//  ДанныеKML	 - 	Строка - Данные в формате KML.
//
Процедура РедакторНазначитьKmlКарты(КодСлоя, ДанныеKML) Экспорт
	Если ЗначениеЗаполнено(КодСлоя) Тогда
		СлойКартыСсылка = Справочники.гисСлоиКарты.НайтиПоКоду(КодСлоя);
		
		Если СлойКартыСсылка.ТипСлоя = Перечисления.гисТипыСлоев.ИзФайла И СлойКартыСсылка.ФорматГеоданных = Перечисления.гисФорматыГеоданных.KML Тогда
			
			СлойКарты = СлойКартыСсылка.ПолучитьОбъект();
			СлойКарты.ТекстФайла = ДанныеKML;
			СлойКарты.Записать();
			
		Иначе
			// TODO: ругнуться
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Назначает новую геометрию существующим объектам слоя.
//
// Параметры:
//  КодСлоя				- Число - код слоя;
//  ГеометрияИзмененная	- Массив - идентификаторы объектов, геометрия которых изменена;
//  ГеометрияУдаленная	- Массив - идентификаторы объектов, геометрия которых удалена.
//
// Возвращаемое значение:
//	- Неопределено - если ошибка;
//	- Структура - содержит поля:
//		Измененная	- Массив - элементы типа Число - индекс в переданном массиве;
//		Удаленная	- Массив - Элементы типа Число - индекс в переданном массиве.
//
Функция РедакторНазначитьГеометриюОбъектамСлояКарты(Знач КодСлоя, Знач ГеометрияИзмененная = Неопределено, Знач ГеометрияУдаленная = Неопределено) Экспорт
	СлойКартыСсылка = Справочники.гисСлоиКарты.НайтиПоКоду(КодСлоя);
	Если НЕ ЗначениеЗаполнено(СлойКартыСсылка) Тогда
		// TODO: ругнуться, что нет слоя
		Возврат Неопределено;
	КонецЕсли;
	
	НесохраненныеДанные = Новый Структура("Измененная,Удаленная", Новый Массив, Новый Массив);

	Если ЗначениеЗаполнено(ГеометрияИзмененная) Тогда
		ИндексГеометрии = 0;
		Пока ИндексГеометрии < ГеометрияИзмененная.Количество() Цикл
			Геометрия = ГеометрияИзмененная[ИндексГеометрии];
			Если РедакторНазначитьГеометриюОбъектуКарты( Геометрия.properties._id_, Геометрия) Тогда
				ИндексГеометрии = ИндексГеометрии + 1;
			Иначе
				НесохраненныеДанные.Измененная.Добавить(ИндексГеометрии);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(ГеометрияУдаленная) Тогда
		ИндексКодаОбъекта = 0;
		Пока ИндексКодаОбъекта < ГеометрияУдаленная.Количество() Цикл
			Если РедакторНазначитьГеометриюОбъектуКарты(ГеометрияУдаленная[ИндексКодаОбъекта]) Тогда
				ИндексКодаОбъекта = ИндексКодаОбъекта + 1;
			Иначе
				НесохраненныеДанные.Удаленная.Добавить(ИндексКодаОбъекта);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НесохраненныеДанные;
КонецФункции

// Помечает объект карты на удаление.
//
// Параметры:
//  КодОбъектаКарты	- Строка - код элемента из справочника СправочникСсылка.гисОбъектыКарты.
//
Процедура РедакторПометитьОбъектКартыНаУдаление(КодОбъектаКарты) Экспорт
	Если НЕ ЗначениеЗаполнено(КодОбъектаКарты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КодОбъектаКарты) = Тип("Строка") Тогда
		ОбъектКарты = Справочники.гисОбъектыКарты.НайтиПоКоду(КодОбъектаКарты);
	КонецЕсли;
	
	ТекущийОбъектКарты = ОбъектКарты.ПолучитьОбъект();
	ТекущийОбъектКарты.ПометкаУдаления = Истина;
	ТекущийОбъектКарты.Записать();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив объектов переданного слоя, не помеченных на удаление.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты	 - слой с типом "ПоСправочникуОбъектыКарты" 
//												или "ПоСправочникуКадастровыеЗемельныеУчастки".
// 
// Возвращаемое значение:
//   - Массив - элементы типа СправочникСсылка.гисОбъектыКарты или СправочникСсылка.гисКадастровыеЗемельныеУчастки.
//
Функция ПолучитьМассивОбъектовСлоя(Слой)
	Если Слой.ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты Тогда
		НазваниеТаблицы = "гисОбъектыКарты";
	ИначеЕсли Слой.ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки Тогда
		НазваниеТаблицы = "гисКадастровыеЗемельныеУчастки";
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыКарты.Ссылка
	|ИЗ
	|	Справочник." + НазваниеТаблицы + " КАК ОбъектыКарты
	|ГДЕ
	|	ОбъектыКарты.Слой = &Слой
	|	И НЕ ОбъектыКарты.ПометкаУдаления");
	Запрос.УстановитьПараметр("Слой", Слой);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Возвращает количество объектов переданного слоя, не помеченных на удаление.
//
// Параметры:
//  Слой - СправочникСсылка.гисСлоиКарты	 - слой с типом "ПоСправочникуОбъектыКарты".
// 
// Возвращаемое значение:
//   - Число - количество объектов в слое.
//
Функция ПолучитьКоличествоОбъектовСлоя(Слой)
	Если Слой.ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты Тогда
		НазваниеТаблицы = "гисОбъектыКарты";
	ИначеЕсли Слой.ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки Тогда
		НазваниеТаблицы = "гисКадастровыеЗемельныеУчастки";
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ОбъектыКарты.Ссылка) КАК Количество
	|ИЗ
	|	Справочник." + НазваниеТаблицы + " КАК ОбъектыКарты
	|ГДЕ
	|	ОбъектыКарты.Слой = &Слой
	|	И НЕ ОбъектыКарты.ПометкаУдаления");
	Запрос.УстановитьПараметр("Слой", Слой);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЧислоОбъектов = 0;
	Если Выборка.Следующий() Тогда
		ЧислоОбъектов = Выборка.Количество;
	КонецЕсли;
	
	Возврат ЧислоОбъектов;
КонецФункции

// Возвращает массив слоев типа "ПоСправочникуОбъектыКарты" с типом гемеотрии "Точка".
// 
// Возвращаемое значение:
//   - Массив - элементы типа СправочникСсылка.гисСлоиКарты.
//
Функция ТочечныеПолучитьСлои()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	гисСлоиКарты.Ссылка
	|ИЗ
	|	Справочник.гисСлоиКарты КАК гисСлоиКарты
	|ГДЕ
	|	гисСлоиКарты.ТипСлоя = ЗНАЧЕНИЕ(Перечисление.гисТипыСлоев.ПоСправочникуОбъектыКарты)
	|	И гисСлоиКарты.ТипГеометрии = ЗНАЧЕНИЕ(Перечисление.гисТипыГеометрии.Точка)");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Возвращает массив слоев типа "ПоСправочникуОбъектыКарты" с типом гемеотрии "Линия" или "Полигон".
// Если значение параметра = ложь, то среди элементов возвращаются также строки, обозначающие кадастровые слои.
//
// Параметры:
//	ТолькоПоСправочнику - Булево - 	Истина, если возвращать только элементы типа СправочникСсылка.гисСлоиКарты;
//									Ложь, если возвращать вместе с кадастром.
//
// Возвращаемое значение:
//   - Массив - элементы типа СправочникСсылка.гисСлоиКарты,
//				элементы типа Строка.
//
Функция КонтурныеПолучитьСлои(ИмяСправочника = Неопределено)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	гисСлоиКарты.Ссылка
	|ИЗ
	|	Справочник.гисСлоиКарты КАК гисСлоиКарты
	|ГДЕ
	|	(гисСлоиКарты.ТипГеометрии = ЗНАЧЕНИЕ(Перечисление.гисТипыГеометрии.Линия)
	|	ИЛИ гисСлоиКарты.ТипГеометрии = ЗНАЧЕНИЕ(Перечисление.гисТипыГеометрии.Полигон))");
	
	Если ИмяСправочника = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И (гисСлоиКарты.ТипСлоя = ЗНАЧЕНИЕ(Перечисление.гисТипыСлоев.ПоСправочникуОбъектыКарты) ИЛИ гисСлоиКарты.ТипСлоя = ЗНАЧЕНИЕ(Перечисление.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки))";
	ИначеЕсли ИмяСправочника = "гисОбъектыКарты" Тогда
		Запрос.Текст = Запрос.Текст + " И гисСлоиКарты.ТипСлоя = ЗНАЧЕНИЕ(Перечисление.гисТипыСлоев.ПоСправочникуОбъектыКарты)";
	ИначеЕсли ИмяСправочника = "гисКадастровыеЗемельныеУчастки" Тогда
		Запрос.Текст = Запрос.Текст + "И гисСлоиКарты.ТипСлоя = ЗНАЧЕНИЕ(Перечисление.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки)";
	КонецЕсли;
	
	МассивСлоев = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСлоев;
КонецФункции

// Возвращает стиль слоя для формирования json для передачи в js.
//
// Параметры:
//  Слой	- СправочникСсылка.гисСлоиКарты - Слой, по которому получается стиль слоя;
//	ВсегдаОтображатьПодписи - Булево - всегда отображаются подписи для точек.
// 
// Возвращаемое значение:
//   - Структура - стиль слоя, состоит из:
//			pic	- Строка	- относительный путь к файлу картинки;
//			fC	- Строка	- цвет заливки в формате hex;
//			fO	- Число		- непрозрачность заливки в %;
//			bC	- Строка	- цвет границ в формате hex;
//			bO	- Число		- непрозрачность границ в %;
//			bW	- Число		- толщина границ.
//			tV	- Число		- флаг отображения текстовых подписей;
//			tRf	- Число		- минимальное разрешение карты с которого отображается подпись;
//			tRt	- Число		- максимальное разрешение карты с которого отображается подпись.
//
Функция СлойКартыПолучитьСтиль(Слой, ВсегдаОтображатьПодписи = Ложь)
	Стиль = Новый Структура;
	
	Если Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон Тогда
		ЗаливкаЦвет = Слой.ЗаливкаЦвет.Получить();
		Если ЗаливкаЦвет = Неопределено Тогда
			ЗаливкаЦвет = Новый Цвет(0, 0, 0);
		КонецЕсли;
		Стиль.Вставить("fC", гисОбщегоНазначенияКлиентСервер.ПеревестиЦветВHEX(ЗаливкаЦвет));
		Стиль.Вставить("fO", Слой.ЗаливкаНепрозрачность);
	КонецЕсли;
	
	Если Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон 
		Или Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Линия Тогда
		
		ГраницыЦвет = Слой.ГраницыЦвет.Получить();
		Если ГраницыЦвет = Неопределено Тогда
			ГраницыЦвет = Новый Цвет(0, 0, 0);
		КонецЕсли;
		Стиль.Вставить("bC", гисОбщегоНазначенияКлиентСервер.ПеревестиЦветВHEX(ГраницыЦвет));
		Стиль.Вставить("bO", Слой.ГраницыНепрозрачность);
		Стиль.Вставить("bW", Слой.ГраницыТолщина);
	КонецЕсли;
	
	Если Слой.ТипГеометрии = Перечисления.гисТипыГеометрии.Точка Тогда
		Стиль.Вставить("pic", Слой.Картинка.ПутьКФайлу);
	КонецЕсли;

	Если ВсегдаОтображатьПодписи Тогда
		Стиль.Вставить("tV", Истина);
		Стиль.Вставить("tRf", 105);
		Стиль.Вставить("tRt", 55468034);
	ИначеЕсли Слой.ПодписьОтображать Тогда
		Стиль.Вставить("tV", Истина);
		Стиль.Вставить("tRf", Слой.ПодписьМасштабОт);
		Стиль.Вставить("tRt", Слой.ПодписьМасштабДо);
	КонецЕсли;
	
	Возврат Стиль;
КонецФункции

// Собирает всплывающее сообщение для объекта.
//
// Параметры:
//  Объект	 - СправочникСсылка.гисОбъектыКарты - объект, для которого генерируется сообщение.
// 
// Возвращаемое значение:
//   - Строка - вплывающее сообщение.
//
Функция СобратьВсплывающееСообщение(Объект)
	Шаблон = "";
	Попытка
		Шаблон = Объект.Слой.ВсплывающееСообщение;
	Исключение
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Шаблон = "[Объект.Наименование]";
	КонецЕсли;
	
	Результат = "";
	Попытка
		Шаблон = СтрЗаменить(Шаблон, "[", """ + ");
		Шаблон = СтрЗаменить(Шаблон, "]", " + """);
		Выполнить("Результат = """ + Шаблон + """");
	Исключение
		Результат = "Ошибка при получении всплывающего сообщения!" + "<br>" + ОписаниеОшибки();
	КонецПопытки;
	Результат = СтрЗаменить(Результат, "'", """");
	
	Возврат Результат;
КонецФункции

// Собирает всплывающее сообщение для тематики по объекту и показателю на дату.
//
// Параметры:
//  Шаблон	 	 - Строка - шаблон html - всплывающего сообщения;
//  Объект		 - СправочникСсылка.гисОбъектыКарты - объект, для которого генерируется сообщение;
//  Показатель	 - СправочникСсылка.гисПоказатели - показатель, по значению которого генерируется сообщение;
//  Значение	 - Число,Булево,СправочникСсылка - значение объекта по показателю;
//  Дата		 - Дата - дата, на которую генерируется сообщение.
// 
// Возвращаемое значение:
//   - Строка - вплывающее сообщение.
//
Функция СобратьВсплывающееСообщениеТематика(Шаблон, Объект, Показатель, Значение, Дата)
	Результат = "";
	Попытка
		Шаблон = СтрЗаменить(Шаблон, "[", """ + ");
		Шаблон = СтрЗаменить(Шаблон, "]", " + """);
		Выполнить("Результат = """ + Шаблон + """");
	Исключение
		Результат = "Ошибка при получении всплывающего сообщения!" + "<br>" + ОписаниеОшибки();
	КонецПопытки;
	Результат = СтрЗаменить(Результат, "'", """");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

