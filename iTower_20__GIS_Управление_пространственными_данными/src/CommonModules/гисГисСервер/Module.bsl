////////////////////////////////////////////////////////////////////////////////
// Серверный модуль для работы с геометриями объектов.
// Основное назначение:
//  - формирование GeoJson на основании координат объекта;
//  - перевод точки в другую систему координат.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует GeoJson по массиву координат и типу геометрии.
//
// Параметры:
//  Координаты	 - Массив - координаты объекта;
//  type		 - Строка - тип геометрии (Polygon, MultiPolygon, LineString, MultiLineString).
// 
// Возвращаемое значение:
//   - Строка - строка json.
//
Функция ПолучитьGeoJson(Координаты, type) Экспорт
	geometry = Новый Структура("type,coordinates", type, Координаты);
	Структура = Новый Структура("type,geometry,properties", "Feature", geometry, Новый Структура);
	Возврат гисРаботаСJson.ЗаписатьНативно(Структура);
КонецФункции

#Область ПереводыМеждуСистемамиКоординат

//////////////////////////////////////////////////////////////////////////////////
// Перевод из одних с/к в другие

// Используются:
//	Wgs84 - градусная, используется на карте!;
//	Меркатор - прямоугольная, поиск на карте, получение данных с сайта росреестра;
//	МСК - местная система координат, прямогульная, получается из кадастровых документов;
//	Sk42 - градусная, используется, как промежуточная между МСК и Wgs84.


// Переводит координаты (Долгота, Широта) из Меркатор в WGS-84.
//
// Параметры:
//  Долгота	 - Число - долгота в Меркатор;
//  Широта	 - Число - широта в Меркатор.
// 
// Возвращаемое значение:
//   - Структура, содержит
//			Долгота - Число - долгота в WGS-84;
//			Широта - Число - широта в WGS-84.
//
Функция ПеревестиМеркаторВWgs84(Знач Долгота, Знач Широта) Экспорт
	Pi = 3.1415926535897932; 
	Const = 20037508.34;
	ДолготаИтоговая = 180 * Долгота / Const;
	ШиротаИтоговая = 180 / Pi * (2 * ATan(Exp((Широта / Const) * Pi)) - Pi / 2);
	Возврат Новый Структура("Долгота,Широта", ДолготаИтоговая, ШиротаИтоговая);
КонецФункции

// Переводит координаты (Долгота, Широта) из WGS-84 в Меркатор.
//
// Параметры:
//  Долгота	 - Число - долгота в WGS-84;
//  Широта	 - Число - широта в WGS-84.
// 
// Возвращаемое значение:
//   - Структура, содержит
//			Долгота - Число - долгота в Меркатор;
//			Широта - Число - широта в Меркатор.
//
Функция ПеревестиWgs84ВМеркатор(Знач Долгота, Знач Широта) Экспорт
    Pi = 3.1415926535897932; 
    Const = 20037508.34;
    ДолготаИтоговая = Долгота * Const / 180;
    ШиротаИтоговая = Log(Tan((Широта / (180 / Pi) + Pi / 2) / 2)) / Pi * Const;
    Возврат Новый Структура("Долгота,Широта", ДолготаИтоговая, ШиротаИтоговая);    
КонецФункции


// Переводит координаты (Долгота, Широта) из системы координат Sk-42 в WGS-84.
// Больше нужна, как промежуточная между переводом из МСК в WGS-84.
//
// Параметры:
//  Долгота					 - Число - долгота в Sk-42;
//  Широта					 - Число - широта в Sk-42;
//  ПараметрыПереводаВWgs84	 - СправочникСсылка.гисПараметрыПереводаВWgs84 - параметры перевода.
// 
// Возвращаемое значение:
//   - Структура, содержит
//			Долгота - Число - долгота в WGS-84;
//			Широта - Число - широта в WGS-84.
//
Функция ПеревестиSk42ВWgs84(Знач Долгота, Знач Широта, ПараметрыПереводаВWgs84) Экспорт
    Приращения = ПолучитьПриращенияДляПереводаWgs84ВSk42(Долгота, Широта, ПараметрыПереводаВWgs84);
	
	ДолготаИтоговая = Долгота + Приращения.Долгота / 3600;
	ШиротаИтоговая = Широта + Приращения.Широта / 3600;

	Возврат Новый Структура("Долгота,Широта", ДолготаИтоговая, ШиротаИтоговая);
КонецФункции

// Переводит координаты (Долгота, Широта) из системы координат WGS-84 в Sk-42.
// Больше нужна, как промежуточная между переводом из WGS-84 в МСК.
//
// Параметры:
//  Долгота					 - Число - долгота в WGS-84;
//  Широта					 - Число - широта в WGS-84;
//  ПараметрыПереводаВWgs84	 - СправочникСсылка.гисПараметрыПереводаВWgs84 - параметры перевода.
// 
// Возвращаемое значение:
//   - Структура, содержит
//			Долгота - Число - долгота в Sk-42;
//			Широта - Число - широта в Sk-42.
//
Функция ПеревестиWgs84ВSk42(Знач Долгота, Знач Широта, ПараметрыПереводаВWgs84) Экспорт
    Приращения = ПолучитьПриращенияДляПереводаWgs84ВSk42(Долгота, Широта, ПараметрыПереводаВWgs84);
	
	ДолготаИтоговая = Долгота - Приращения.Долгота / 3600;
	ШиротаИтоговая = Широта - Приращения.Широта / 3600;
	
	Возврат Новый Структура("Долгота,Широта", ДолготаИтоговая, ШиротаИтоговая);
КонецФункции


// Переводит координаты (Долгота, Широта) из местной системы координат в Sk-42.
// Больше нужна, как промежуточная между переводом из МСК в WGS-84.
//
// Параметры:
//  Долгота					 - Число - долгота в МСК;
//  Широта					 - Число - широта в МСК;
//  ПараметрыПереводаВWgs84	 - СправочникСсылка.гисПараметрыПереводаВWgs84 - параметры перевода.
// 
// Возвращаемое значение:
//   - Структура, содержит
//			Долгота - Число - долгота в Sk-42;
//			Широта - Число - широта в Sk-42.
//
Функция ПеревестиМскВSk42(Знач Долгота, Знач Широта, ПараметрыПереводаВWgs84) Экспорт
	ДолготаИтоговая = Долгота - ПараметрыПереводаВWgs84.СмещениеНаСевер;
	ШиротаИтоговая = Широта - ПараметрыПереводаВWgs84.СмещениеНаВосток;
	
	Pi = 3.14159265358979;
	RAD_DEG = 180.0 / Pi;
	
	A_ = ДолготаИтоговая / 6367558.4968;
	sinA = Sin(A_);
	sinA2 = sinA * sinA;
	sinA4 = sinA2 * sinA2;
	
	B_ = A_ + sin(2 * A_) * (0.00252588685 - 0.00001491860 * sinA2 + 0.00000011904 * sinA4);
	sinB = sin(B_);
	sinB2 = sinB * sinB;
	sinB4 = sinB2 * sinB2;
	sinB6 = sinB4 * sinB2;
	
	Z_ = ШиротаИтоговая / (6378245 * Cos(B_));
	Z2 = Z_ * Z_;

	ДолготаИтоговая = Z_ * (1 - 0.0033467108 * sinB2 - 0.0000056002 * sinB4 - 0.0000000187 * sinB6
	   - Z2 * (0.16778975 + 0.16273586 * sinB2 - 0.00052490 * sinB4 - 0.00000846 * sinB6
	   - Z2 * (0.0420025 + 0.1487407 * sinB2 + 0.0059420 * sinB4 - 0.0000150 * sinB6
	   - Z2 * (0.01225 + 0.09477 * sinB2 + 0.03282 * sinB4 + 0.00034 * sinB6
	   - Z2 * (0.0038 + 0.0524 * sinB2 + 0.0482 * sinB4 + 0.0032 * sinB6)))));

	dB = - Z2 * sin(2 * B_) * (0.251684631 - 0.003369263 * sinB2 + 0.000011276 * sinB4
	   - Z2 * (0.10500614 - 0.04559916 * sinB2 + 0.00228901 * sinB4 - 0.00002987 * sinB6
	   - Z2 * (0.042858 - 0.025318 * sinB2 + 0.014346 * sinB4 - 0.001264 * sinB6
	   - Z2 * (0.01672 - 0.00630 * sinB2 +0.01188 * sinB4 - 0.00328 * sinB6))));
	ШиротаИтоговая = B_ + dB;

	ДолготаИтоговая = ДолготаИтоговая * RAD_DEG;
	ШиротаИтоговая = ШиротаИтоговая * RAD_DEG;
	
	ДолготаИтоговая = ДолготаИтоговая + ПараметрыПереводаВWgs84.ОсевойМеридиан;
	
	Возврат Новый Структура("Долгота,Широта", ДолготаИтоговая, ШиротаИтоговая);
КонецФункции

// Переводит координаты (Долгота, Широта) из Sk-42 в местную систему координат.
// Больше нужна, как промежуточная между переводом из WGS-84 в МСК.
//
// Параметры:
//  Долгота					 - Число - долгота в Sk-42;
//  Широта					 - Число - широта в Sk-42;
//  ПараметрыПереводаВWgs84	 - СправочникСсылка.гисПараметрыПереводаВWgs84 - параметры перевода.
// 
// Возвращаемое значение:
//   - Структура, содержит
//			Долгота - Число - долгота в МСК;
//			Широта - Число - широта в МСК.
//
Функция ПеревестиSk42ВМск(Знач Долгота, Знач Широта, ПараметрыПереводаВWgs84) Экспорт
	ДолготаИтоговая = Долгота;
	ШиротаИтоговая = Широта;
	
	Pi = 3.14159265358979;
	DEG_RAD = PI / 180.0;
	
	ДолготаИтоговая = ДолготаИтоговая - ПараметрыПереводаВWgs84.ОсевойМеридиан;
	
	l1 = ДолготаИтоговая * DEG_RAD;
	b1 = ШиротаИтоговая * DEG_RAD;

	sinB = sin(b1);
	sinB2 = sinB * sinB;
	sinB4 = sinB2 * sinB2;
	sinB6 = sinB4 * sinB2;
	
	l2 = l1 * l1;

	ДолготаИтоговая = 6367558.4698 * b1 - sin(2 * b1) * (16002.89 + 66.9607 * sinB2 + 0.3515 * sinB4
		- l2 * (1594561.25 + 5336.535 * sinB2 + 26.79 * sinB4 + 0.149 * sinB6
		+ l2 * (672483.4 - 811219.9 * sinB2 + 5420 * sinB4 - 10.6 * sinB6
		+ l2 * (278194 - 830174 * sinB2 + 572434 * sinB4 - 16010 * sinB6
		+ l2 * (109500 - 574700 * sinB2 + 863700 * sinB4 - 398600 * sinB6)))));

	ШиротаИтоговая = l1 * cos(b1) * (6378245 + 21346.1415 * sinB2 + 107.159 * sinB4 + 0.5977 * sinB6
		+ l2 * (1070204.16 - 2136826.66 * sinB2 + 17.98 * sinB4 - 11.99 * sinB6
		+ l2 * (270806 - 1523417 * sinB2 + 1327645 * sinB4 - 21701 * sinB6
		+ l2 * (79690 - 866190 * sinB2 + 1730360 * sinB4 - 945460 * sinB6))));

	ДолготаИтоговая = ДолготаИтоговая + ПараметрыПереводаВWgs84.СмещениеНаСевер;
	ШиротаИтоговая = ШиротаИтоговая + ПараметрыПереводаВWgs84.СмещениеНаВосток;
	
	Возврат Новый Структура("Долгота,Широта", ДолготаИтоговая, ШиротаИтоговая);
КонецФункции


// Переводит координаты (Долгота, Широта) из местной системы координат в WGS-84.
//
// Параметры:
//  Долгота					 - Число - долгота в МСК;
//  Широта					 - Число - широта в МСК;
//  ПараметрыПереводаВWgs84	 - СправочникСсылка.гисПараметрыПереводаВWgs84 - параметры перевода.
// 
// Возвращаемое значение:
//   - Структура, содержит
//			Долгота - Число - долгота в WGS-84;
//			Широта - Число - широта в WGS-84.
//
Функция ПеревестиМскВWgs84(Знач Долгота, Знач Широта, ПараметрыПереводаВWgs84) Экспорт
	Долгота = Долгота + ПараметрыПереводаВWgs84.ПоправкаКадастрДолгота;
	Широта = Широта + ПараметрыПереводаВWgs84.ПоправкаКадастрШирота;
	
	Координаты = ПеревестиМскВSk42(Долгота, Широта, ПараметрыПереводаВWgs84);
	Координаты = ПеревестиSk42ВWgs84(Координаты.Долгота, Координаты.Широта, ПараметрыПереводаВWgs84);
	
	ДолготаИтоговая = Координаты.Долгота + ПараметрыПереводаВWgs84.ПоправкаWgsДолгота;
	ШиротаИтоговая = Координаты.Широта + ПараметрыПереводаВWgs84.ПоправкаWgsШирота;
	
	// HACK Если прислали кривую геометрию
	Если ДолготаИтоговая < -180 Или ДолготаИтоговая > 180 Тогда
		ДолготаИтоговая = 0;
		ШиротаИтоговая = 0;
	КонецЕсли;
	Если ШиротаИтоговая < -90 Или ШиротаИтоговая > 90 Тогда
		ДолготаИтоговая = 0;
		ШиротаИтоговая = 0;
	КонецЕсли;
	
	Возврат Новый Структура("Долгота,Широта", Окр(ДолготаИтоговая, 8), Окр(ШиротаИтоговая, 8));
КонецФункции

// Переводит координаты (Долгота, Широта) из WGS-84 в местную систему координат.
//
// Параметры:
//  Долгота					 - Число - долгота в WGS-84;
//  Широта					 - Число - широта в WGS-84;
//  ПараметрыПереводаВWgs84	 - СправочникСсылка.гисПараметрыПереводаВWgs84 - параметры перевода.
// 
// Возвращаемое значение:
//   - Структура, содержит
//			Долгота - Число - долгота в МСК;
//			Широта - Число - широта в МСК.
//
Функция ПеревестиWgs84ВМск(Знач Долгота, Знач Широта, ПараметрыПереводаВWgs84) Экспорт
	ДолготаИтоговая = Долгота - ПараметрыПереводаВWgs84.ПоправкаWgsДолгота;
	ШиротаИтоговая = Широта - ПараметрыПереводаВWgs84.ПоправкаWgsШирота;
	
	Координаты = ПеревестиWgs84ВSk42(ДолготаИтоговая, ШиротаИтоговая, ПараметрыПереводаВWgs84);
	Координаты = ПеревестиSk42ВМск(Координаты.Долгота, Координаты.Широта, ПараметрыПереводаВWgs84);
	
	ДолготаИтоговая = Координаты.Долгота - ПараметрыПереводаВWgs84.ПоправкаКадастрДолгота;
	ШиротаИтоговая = Координаты.Широта - ПараметрыПереводаВWgs84.ПоправкаКадастрШирота;
	
	Возврат Новый Структура("Долгота,Широта", Окр(ДолготаИтоговая, 8), Окр(ШиротаИтоговая, 8));
КонецФункции

#КонецОбласти

#Область РаботаСWMS

// Для заданного адреса WMS получаем описание сервиса.
// Нас интересует только перечень имен слоев - их парсим и возвращаем.
//
// Параметры:
//  АдресГисСервера  - Строка - адрес ГИС-сервера.
//
// Возвращаемое значение:
//   Структура - описание сервиса WMS. Содержит поля:
//		Имя		- Строка - имя сервиса;
//		Описание- Строка - описание;
//		Проекция- Строка - имя проекции.
//
Функция WMSПолучитьОписание(Знач АдресГисСервера) Экспорт
	
	Ответ = Неопределено;
	ПараметрыГисСервера = РазобратьUrlНаПараметры(АдресГисСервера);
	
	Http = Новый HTTPСоединение(ПараметрыГисСервера.IP, ПараметрыГисСервера.Порт);
	Запрос = ПараметрыГисСервера.Адрес + "?request=GetCapabilities&service=WMS&version=1.0.0";
	
	ЗапросКСерверу = Новый HTTPЗапрос(Запрос);
	Ответ = Http.Получить(ЗапросКСерверу);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение "Сервер ответил ошибкой! Код ошибки " + Ответ.КодСостояния;
	Иначе
		Ответ = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат WMSРазобратьОписание(Ответ);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПриращенияДляПереводаWgs84ВSk42(Знач Долгота, Знач Широта, ПараметрыПереводаВWgs84)
	// Линейные и угловые элементы трансформирования
	
	Если ПараметрыПереводаВWgs84.АлгоритмПереводаГост2008 Тогда
		// ГОСТ 51794-2008
		dx = 23.57;
		dy = -140.95;
		dz = -79.8;
		wx = 0;
		wy = -0.35;
		wz = -0.79;
		ms = -0.00000022;
	Иначе
		// другой
		dx = ПараметрыПереводаВWgs84.Параметр_dx;
		dy = ПараметрыПереводаВWgs84.Параметр_dy;
		dz = ПараметрыПереводаВWgs84.Параметр_dz;
		wx = ПараметрыПереводаВWgs84.Параметр_wx;
		wy = ПараметрыПереводаВWgs84.Параметр_wy;
		wz = ПараметрыПереводаВWgs84.Параметр_wz;
		ms = ПараметрыПереводаВWgs84.Параметр_ms;
	КонецЕсли;
	
	///////////////////////////////////////////////
	
	Pi = 3.14159265358979;
	RAD_DEG = 180.0 / Pi;

	ro = RAD_DEG * 3600;
	
	aP = 6378245;
	a1P = 1 / 298.3;
	e2P = 2 * a1P - a1P * a1P;
	
	aW = 6378137;
	a1W = 1 / 298.257223563;
	e2W = 2 * a1W - a1W * a1W;
	
	a_ = (aP + aW) / 2;
	e2 = (e2P + e2W) / 2;
	da = aW - aP;
	de2 = e2W - e2P;

	
	B_ = Широта * Pi / 180;
	L_ = Долгота * Pi / 180;
	
	M_ = a_ * (1 - e2) / Pow((1 - e2 * sin(B_) * sin(B_)), 1.5);
	N_ = a_ * Pow((1 - e2 * sin(B_) * sin(B_)), -0.5);

	dB = ro / M_ * (N_ / a_ * e2 * sin(B_) * cos(B_) * da
		+ ((N_ * N_) / (a_ * a_) + 1) * N_ * sin(B_) * cos(B_) * de2 / 2
		- (dx * cos(L_) + dy * sin(L_)) * sin(B_) + dz * cos(B_))
		- wx * Sin(L_) * (1 + e2 * cos(2 * B_))
		+ wy * Cos(L_) * (1 + e2 * cos(2 * B_))
		- ro * ms * e2 * Sin(B_) * cos(B_);
	
	dL = ro / (N_ * cos(B_)) * (-dx * sin(L_) + dy * cos(L_))
		+ tan(B_) * (1 - e2) * (wx * Cos(L_) + wy * Sin(L_))
		- wz;
		
	Возврат Новый Структура("Долгота, Широта", dL, dB);
КонецФункции

// Разбиваем URL на IP, порт и оставшийся путь.
//
// Параметры:
//  Url  - Строка - Абсолютный URL-путь.
//
// Возвращаемое значение:
//   Структура   - Структура с полями IP, Порт,Адрес.
//
Функция РазобратьUrlНаПараметры(Знач Url)
	ПараметрыСервера = Новый Структура;
	БезHttp = СтрЗаменить(Url, "http://", "");
	БезHttp = СтрЗаменить(БезHttp, "https://", "");
	
	НачалоПорта = Найти(БезHttp, ":");
	НачалоАдреса = Найти(БезHttp, "/");
	Если НачалоПорта > 0 Тогда
		IP = Сред(БезHttp, 0, НачалоПорта - 1);
		Порт = Сред(БезHttp, НачалоПорта + 1, НачалоАдреса - НачалоПорта - 1);
		Порт = Число(Порт);
	Иначе
		IP = Сред(БезHttp, 0, НачалоАдреса - 1);
		Порт = 80;
	КонецЕсли;
	ПараметрыСервера.Вставить("Порт", Порт);
	ПараметрыСервера.Вставить("IP", IP);
	Адрес = Сред(БезHttp, НачалоАдреса, СтрДлина(БезHttp) - НачалоАдреса + 1);
	ПараметрыСервера.Вставить("Адрес", Адрес);
	Возврат ПараметрыСервера;
КонецФункции

// Парсит документ описания возможностей сервиса WMS.
//
// Параметры
//  ОписаниеWmsXML  - Строка - Содержимое документа возможностей WMS.
//
// Возвращаемое значение:
//   Структура - описание сервиса WMS. Содержит поля:
//		Имя		- Строка - имя сервиса;
//		Описание- Строка - описание;
//		Проекция- Строка - имя проекции.
//
Функция WMSРазобратьОписание(Знач ОписаниеWmsXML)
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ОписаниеWmsXML);
	
	ОписаниеWMS = Новый Структура;
	Слои = Новый Массив;
	
	ВСлое = Ложь;
	ВСпискеСлоев = Ложь;
	ТекущееИмяУзла = "";
	Уровень = 0;
	УровеньСпискаСлоев = -1;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Чтение.Имя = "Layer" Тогда
				Если Не ВСпискеСлоев Тогда
					ВСпискеСлоев = Истина;
					УровеньСпискаСлоев = Уровень + 1;
				Иначе
					ВСлое = Истина;
					СлойWMS = Новый Структура;
				КонецЕсли
			КонецЕсли;
			ТекущееИмяУзла = Чтение.Имя;
			Уровень = Уровень + 1;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если Чтение.Имя = "Layer" Тогда
				Если ВСлое Тогда
					ВСлое = Ложь;
					Слои.Добавить(СлойWMS);
				КонецЕсли;
			КонецЕсли;
			Уровень = Уровень - 1;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			Если (ВСлое) И (УровеньСпискаСлоев = Уровень - 2) Тогда
				Если ТекущееИмяУзла = "Name" Тогда
					СлойWMS.Вставить("Имя", Чтение.Значение);
				ИначеЕсли ТекущееИмяУзла = "Title" Тогда
					СлойWMS.Вставить("Описание", Чтение.Значение);
				ИначеЕсли ТекущееИмяУзла = "SRS" Тогда
					СлойWMS.Вставить("Проекция", Чтение.Значение);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	ОписаниеWMS.Вставить("Слои", Слои);
	Возврат ОписаниеWMS;
КонецФункции

#КонецОбласти
