
#Область ПрограммныйИнтерфейс

Процедура ПослеЗаписиЭлементаУниверсальнойСтруктуры_Ссылка(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторыСтруктуры = Новый Массив;
	Источник = Параметры.Ссылка;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.лм_ШаблоныБизнесПроцессов") Тогда
		ИдентификаторыСтруктуры.Добавить(Источник.УникальныйИдентификатор());	
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.ГруппыСправочниковНСИ") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	лм_ШаблоныБизнесПроцессовПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
		|ГДЕ
		|	лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета = &ТипПредмета";
		
		Запрос.УстановитьПараметр("ТипПредмета", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "СправочникНСИ"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыСтруктуры.Добавить(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Классификаторы")
		ИЛИ ТипЗнч(Источник) = Тип("СправочникСсылка.ЭлементыКлассификаторов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыКлассификаторов.ИдентификаторСправочника КАК ИдентификаторСправочника
		|ПОМЕСТИТЬ ВТ_Классификаторы
		|ИЗ
		|	РегистрСведений.ПараметрыКлассификаторов КАК ПараметрыКлассификаторов
		|ГДЕ
		|	ПараметрыКлассификаторов.Классификатор = &Классификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	лм_ШаблоныБизнесПроцессовПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_Классификаторы КАК ВТ_Классификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
		|		ПО ВТ_Классификаторы.ИдентификаторСправочника = лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета";
		
		Запрос.УстановитьПараметр("Классификатор", 
		?(ТипЗнч(Источник) = Тип("СправочникСсылка.Классификаторы"), Источник, 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Владелец")));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыСтруктуры.Добавить(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
			КонецЦикла;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Источник) = Тип("ПланВидовХарактеристикСсылка.Атрибуты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИспользованиеАтрибутов.Справочник КАК Справочник
		|ПОМЕСТИТЬ ВТ_Идентификаторы
		|ИЗ
		|	РегистрСведений.ИспользованиеАтрибутов КАК ИспользованиеАтрибутов
		|ГДЕ
		|	ИспользованиеАтрибутов.Атрибут = &Атрибут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	лм_ШаблоныБизнесПроцессовПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Идентификаторы КАК ВТ_Идентификаторы
		|		ПО лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета = ВТ_Идентификаторы.Справочник";
		
		Запрос.УстановитьПараметр("Атрибут", Источник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыСтруктуры.Добавить(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вариант синхронного обновления кэша.
	Для Каждого ИдентификаторСтруктуры Из ИдентификаторыСтруктуры Цикл		
		УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанных.МетаданныеУниверсальнойСтруктурыПоДаннымОбъекта(ИдентификаторСтруктуры, Неопределено);			
		лм_УниверсальныеСтруктурыДанныхПереопределяемый.ОбновитьДанныеКэшаУниверсальнойСтруктуры(УниверсальнаяСтруктура);			
	КонецЦикла;

КонецПроцедуры

Процедура ПослеЗаписиЭлементаУниверсальнойСтруктуры_Объект(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторыСтруктуры = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.лм_ШаблоныБизнесПроцессов") Тогда
		ИдентификаторыСтруктуры.Добавить(Источник.Ссылка.УникальныйИдентификатор());	
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыСправочниковНСИ") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	лм_ШаблоныБизнесПроцессовПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
		|ГДЕ
		|	лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета = &ТипПредмета";
		
		Запрос.УстановитьПараметр("ТипПредмета", Источник.СправочникНСИ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыСтруктуры.Добавить(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Классификаторы")
		ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.ЭлементыКлассификаторов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыКлассификаторов.ИдентификаторСправочника КАК ИдентификаторСправочника
		|ПОМЕСТИТЬ ВТ_Классификаторы
		|ИЗ
		|	РегистрСведений.ПараметрыКлассификаторов КАК ПараметрыКлассификаторов
		|ГДЕ
		|	ПараметрыКлассификаторов.Классификатор = &Классификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	лм_ШаблоныБизнесПроцессовПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_Классификаторы КАК ВТ_Классификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
		|		ПО ВТ_Классификаторы.ИдентификаторСправочника = лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета";
		
		Запрос.УстановитьПараметр("Классификатор", 
		?(ТипЗнч(Источник) = Тип("СправочникОбъект.Классификаторы"), Источник.Ссылка, Источник.Владелец));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыСтруктуры.Добавить(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
			КонецЦикла;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Источник) = Тип("ПланВидовХарактеристикОбъект.Атрибуты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИспользованиеАтрибутов.Справочник КАК Справочник
		|ПОМЕСТИТЬ ВТ_Идентификаторы
		|ИЗ
		|	РегистрСведений.ИспользованиеАтрибутов КАК ИспользованиеАтрибутов
		|ГДЕ
		|	ИспользованиеАтрибутов.Атрибут = &Атрибут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	лм_ШаблоныБизнесПроцессовПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Идентификаторы КАК ВТ_Идентификаторы
		|		ПО лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета = ВТ_Идентификаторы.Справочник";
		
		Запрос.УстановитьПараметр("Атрибут", Источник.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыСтруктуры.Добавить(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вариант синхронного обновления кэша.
	Для Каждого ИдентификаторСтруктуры Из ИдентификаторыСтруктуры Цикл		
		УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанных.МетаданныеУниверсальнойСтруктурыПоДаннымОбъекта(ИдентификаторСтруктуры, Неопределено);			
		лм_УниверсальныеСтруктурыДанныхПереопределяемый.ОбновитьДанныеКэшаУниверсальнойСтруктуры(УниверсальнаяСтруктура);			
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьУниверсальнуюСтруктуру(ДанныеСтруктуры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеСтруктуры.ИдентификаторСтруктуры) Тогда
		СтруктураОбъект = Справочники.лм_УниверсальныеСтруктурыДанных.СоздатьЭлемент();
	Иначе
		СтруктураСсылка = Справочники.лм_УниверсальныеСтруктурыДанных.ПолучитьСсылку(ДанныеСтруктуры.ИдентификаторСтруктуры);
		СтруктураОбъект = СтруктураСсылка.ПолучитьОбъект();
		Если СтруктураОбъект = Неопределено Тогда
			СтруктураОбъект = Справочники.лм_УниверсальныеСтруктурыДанных.СоздатьЭлемент();
			СтруктураОбъект.УстановитьСсылкуНового(СтруктураСсылка);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОбъект, ДанныеСтруктуры);
		
	СтруктураОбъект.Реквизиты.Очистить();
	ДинРеквизиты = Новый Соответствие;
	
	Для Каждого Реквизит Из ДанныеСтруктуры.Реквизиты Цикл		
		Если Реквизит.Динамический Тогда
			ДинРеквизиты.Вставить(Реквизит.Идентификатор, Реквизит);
			Продолжить;	
		КонецЕсли;
		Стр = СтруктураОбъект.Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Реквизит);
		Стр.ТипЗначения = Новый ХранилищеЗначения(Реквизит.ТипЗначения);
	КонецЦикла;
	
	СтруктураОбъект.ЗависимостиРеквизитов.Очистить();
	Для Каждого Зависимость Из ДанныеСтруктуры.ЗависимостиРеквизитов Цикл
		Если ДинРеквизиты[Зависимость.Идентификатор] <> Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		Стр = СтруктураОбъект.ЗависимостиРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Зависимость);
		Стр.Значение    = Новый ХранилищеЗначения(Зависимость.Значение);
		Стр.ТипЗначения = Новый ХранилищеЗначения(Зависимость.ТипЗначения);
	КонецЦикла;
	
	СтруктураОбъект.Записать();		
	
	ДанныеСтруктуры.ИдентификаторСтруктуры = СтруктураОбъект.Ссылка.УникальныйИдентификатор();
	
КонецПроцедуры

Функция МетаданныеУниверсальнойСтруктурыПоДаннымОбъекта(ИдентификаторСтруктуры, ДополнительныеПараметры) Экспорт
		
	Если ТипЗнч(ИдентификаторСтруктуры) = Тип("УникальныйИдентификатор") Тогда
		СтруктураСсылка = Справочники.лм_УниверсальныеСтруктурыДанных.ПолучитьСсылку(ИдентификаторСтруктуры); 
	Иначе
		СтруктураСсылка = ИдентификаторСтруктуры;
	КонецЕсли;
	
	КопируемаяСтруктураСсылка = Неопределено;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИдентификаторКопируемойСтруктуры") Тогда
		КопируемаяСтруктураСсылка = Справочники.лм_УниверсальныеСтруктурыДанных.ПолучитьСсылку(ДополнительныеПараметры.ИдентификаторКопируемойСтруктуры);
	КонецЕсли;
	
	ДанныеСтруктуры                        = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ПодготовитьДанныеСтруктуры();	
	ДанныеСтруктуры.ИдентификаторСтруктуры = СтруктураСсылка.УникальныйИдентификатор();
	
	Если НЕ Сред(Строка(СтруктураСсылка), 1, 18) = "<Объект не найден>" Тогда
		ЗначенияРеквизитовСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураСсылка, "Наименование, ВладелецСтруктуры");
		ДанныеСтруктуры.Наименование           = ЗначенияРеквизитовСсылки.Наименование;
		ДанныеСтруктуры.ВладелецСтруктуры      = ЗначенияРеквизитовСсылки.ВладелецСтруктуры;
	КонецЕсли;
	
	МассивРеквизитов   = Новый Массив;
	МассивЗависимостей = Новый Массив;
	
	СсылкаНаДанные = Неопределено;
	Если НЕ КопируемаяСтруктураСсылка = Неопределено
		И НЕ Сред(Строка(КопируемаяСтруктураСсылка), 1, 18) = "<Объект не найден>" Тогда  
		СсылкаНаДанные = КопируемаяСтруктураСсылка;
	ИначеЕсли НЕ Сред(Строка(СтруктураСсылка), 1, 18) = "<Объект не найден>"
		И ЗначениеЗаполнено(СтруктураСсылка) 
		И ТипЗнч(СтруктураСсылка) = Тип("СправочникСсылка.лм_УниверсальныеСтруктурыДанных") Тогда
		СсылкаНаДанные = СтруктураСсылка;
	КонецЕсли;
		 
	// Проверим ссылку на существование и заполненность.
	Если НЕ СсылкаНаДанные = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	лм_УниверсальныеСтруктурыДанных.Наименование КАК Наименование,
		|	лм_УниверсальныеСтруктурыДанных.ВладелецСтруктуры КАК ВладелецСтруктуры,
		|	лм_УниверсальныеСтруктурыДанных.Реквизиты.(
		|		ИмяПоля КАК ИмяПоля,
		|		Синоним КАК Синоним,
		|		ТипЗначения КАК ТипЗначения,
		|		МногострочноеПолеВвода КАК МногострочноеПолеВвода,
		|		ВыводитьВВидеГиперссылки КАК ВыводитьВВидеГиперссылки,
		|		Подсказка КАК Подсказка,
		|		Комментарий КАК Комментарий,
		|		ФорматСвойства КАК ФорматСвойства,
		|		ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
		|		Идентификатор КАК Идентификатор,
		|		ОсновнойИдентификатор КАК ОсновнойИдентификатор,
		|		Метка КАК Метка,
		|		ВидСправочника КАК ВидСправочника
		|	) КАК Реквизиты,
		|	лм_УниверсальныеСтруктурыДанных.ЗависимостиРеквизитов.(
		|		Представление КАК Представление,
		|		Условие КАК Условие,
		|		Значение КАК Значение,
		|		ЗависимоеСвойство КАК ЗависимоеСвойство,
		|		РежимВыбора КАК РежимВыбора,
		|		ТипЗначения КАК ТипЗначения,
		|		Реквизит КАК Реквизит,
		|		ОсновнойИдентификатор КАК ОсновнойИдентификатор,
		|		Идентификатор КАК Идентификатор) КАК ЗависимостиРеквизитов
		|ИЗ
		|	Справочник.лм_УниверсальныеСтруктурыДанных КАК лм_УниверсальныеСтруктурыДанных
		|ГДЕ
		|	лм_УниверсальныеСтруктурыДанных.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДанные);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		ВыборкаДетальныеЗаписи.Следующий();
		
		ВыборкаРеквизиты = ВыборкаДетальныеЗаписи.Реквизиты.Выбрать();
		Пока ВыборкаРеквизиты.Следующий() Цикл		
			стрРеквизит = лм_УниверсальныеСтруктурыДанныхКлиентСервер.СформироватьСтруктуруСвойстваРеквизита();
			стрРеквизит.Вставить("ОсновнойИдентификатор");
			ЗаполнитьЗначенияСвойств(стрРеквизит, ВыборкаРеквизиты);
			стрРеквизит.Динамический    = Ложь;
			стрРеквизит.Нередактируемый = Ложь;
			стрРеквизит.ТипЗначения = ВыборкаРеквизиты.ТипЗначения.Получить();
			МассивРеквизитов.Добавить(стрРеквизит);
		КонецЦикла;
		
		ВыборкаЗависимостиРеквизитов = ВыборкаДетальныеЗаписи.ЗависимостиРеквизитов.Выбрать();
		Пока ВыборкаЗависимостиРеквизитов.Следующий() Цикл
			стрЗависимость = лм_УниверсальныеСтруктурыДанныхКлиентСервер.СформироватьСтруктуруЗависимостиРеквизита();
			стрЗависимость.Вставить("ОсновнойИдентификатор");
			ЗаполнитьЗначенияСвойств(стрЗависимость, ВыборкаЗависимостиРеквизитов);
			стрЗависимость.ТипЗначения = ВыборкаЗависимостиРеквизитов.ТипЗначения.Получить();
			стрЗависимость.Значение    = ВыборкаЗависимостиРеквизитов.Значение.Получить();
			МассивЗависимостей.Добавить(стрЗависимость);
		КонецЦикла;
		
	КонецЕсли;

	ДанныеСтруктуры.Реквизиты             = МассивРеквизитов;
	ДанныеСтруктуры.ЗависимостиРеквизитов = МассивЗависимостей;

	Возврат ДанныеСтруктуры;

КонецФункции

Функция ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДанныеСтруктуры = МетаданныеУниверсальнойСтруктурыПоДаннымОбъекта(ИдентификаторСтруктуры, ДополнительныеПараметры);
	лм_УниверсальныеСтруктурыДанныхВызовСервера.ПриПолученииДанныхУниверсальнойСтруктуры(ДанныеСтруктуры, ДополнительныеПараметры);
	
	Если Не ЗначениеЗаполнено(ДанныеСтруктуры.ХешСумма) Тогда
		лм_УниверсальныеСтруктурыДанныхВызовСервера.ВычислитьХешСуммуУниверсальнойСтруктуры(ДанныеСтруктуры);
	КонецЕсли;
	
	Возврат ДанныеСтруктуры;
		
КонецФункции

Функция ЗаписатьЭлементУниверсальнойСтруктуры(Знач ДанныеЭлемента, УниверсальнаяСтруктура, Знач ИдентификаторЭлемента)
	
	ИдентификаторСтруктуры = УниверсальнаяСтруктура.ИдентификаторСтруктуры;
	МассивРеквизитов       = УниверсальнаяСтруктура.Реквизиты;
	
	Если ТипЗнч(ИдентификаторЭлемента) <> Тип("УникальныйИдентификатор") Тогда
		ИдентификаторЭлемента = ИдентификаторЭлемента.УникальныйИдентификатор();
	КонецЕсли;
	
	стрРегистры        = Новый Структура("лм_УниверсальныеСтруктурыСсылка,лм_УниверсальныеСтруктурыДата,лм_УниверсальныеСтруктурыЧисло,
								  |лм_УниверсальныеСтруктурыСтрока,лм_УниверсальныеСтруктурыБулево");
	
	Для Каждого КлючИЗначение Из стрРегистры Цикл
		НаборЗаписей = РегистрыСведений[КлючИЗначение.Ключ].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСтруктуры.Установить(ИдентификаторСтруктуры);
		НаборЗаписей.Отбор.ИдентификаторЭлемента.Установить(ИдентификаторЭлемента);
		НаборЗаписей.Прочитать();
		стрРегистры[КлючИЗначение.Ключ] = ?(НаборЗаписей.Количество() <> 0, Истина, Ложь);
		НаборЗаписей.Очистить();				
		Для Каждого Элемент Из ДанныеЭлемента Цикл
			Если Элемент.Значение = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			Если ТипЗнч(Элемент.Значение) <> Тип("Массив") Тогда
				ДобавитьЗаписьРегистра(КлючИЗначение.Ключ, НаборЗаписей, МассивРеквизитов, ИдентификаторСтруктуры, ИдентификаторЭлемента, Элемент);
			Иначе
				Для Каждого стрСтрока Из Элемент.Значение Цикл
					Если Не стрСтрока.Свойство("ИдентификаторСтрокиТаблицы") Тогда
						стрСтрока.Вставить("ИдентификаторСтрокиТаблицы", Новый УникальныйИдентификатор);
					КонецЕсли;
					ИдентификаторСтрокиТаблицы = стрСтрока.ИдентификаторСтрокиТаблицы;					
					Отбор                      = Новый Структура("ИмяПоля,ОсновнойИдентификатор", Элемент.Ключ, ПолучитьПустойИдентификатор());
					СтрокиОтбора               = лм_УниверсальныеСтруктурыДанныхКлиентСервер.НайтиСтрокиТаблицыОбъекта(МассивРеквизитов, Отбор);
					ОсновнойИдентификатор      = СтрокиОтбора[0].Идентификатор;
					Для Каждого ЭлементСтроки Из стрСтрока Цикл
						Если ЭлементСтроки.Ключ = "ИдентификаторСтрокиТаблицы" Тогда
							Продолжить;
						КонецЕсли;
						ДобавитьЗаписьРегистра(КлючИЗначение.Ключ, НаборЗаписей, МассивРеквизитов, ИдентификаторСтруктуры, ИдентификаторЭлемента, ЭлементСтроки, Истина, ИдентификаторСтрокиТаблицы, ОсновнойИдентификатор);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если НаборЗаписей.Количество() <> 0 ИЛИ стрРегистры[КлючИЗначение.Ключ] Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;	
		
КонецФункции

Функция ПолучитьИзФормыДанныеЭлементаУниверсальнойСтруктуры(Форма, УниверсальнаяСтруктура)
	
	ДанныеЭлемента        = Новый Структура;
	ОписаниеТипаСтруктура = Новый ОписаниеТипов("Структура");
	
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		Если Реквизит.ТипЗначения = ОписаниеТипаСтруктура Тогда
			ДанныеЭлемента.Вставить(Реквизит.ИмяПоля, Новый Массив);
			Отбор = Новый Структура("ОсновнойИдентификатор", Реквизит.Идентификатор);
			СтрокиОтбора = лм_УниверсальныеСтруктурыДанныхКлиентСервер.НайтиСтрокиТаблицыОбъекта(УниверсальнаяСтруктура.Реквизиты, Отбор);
			
			ТаблицаФормы = Форма["лм_" + Реквизит.ИмяПоля];
			
			Для Каждого Стр Из ТаблицаФормы Цикл
				стрСтрокаТаблицы = Новый Структура;						
				Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
					стрСтрокаТаблицы.Вставить(СтрокаОтбора.ИмяПоля);
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(стрСтрокаТаблицы, Стр);
				ДанныеЭлемента[Реквизит.ИмяПоля].Добавить(стрСтрокаТаблицы);
			КонецЦикла;			
		ИначеЕсли Не ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
			ДанныеЭлемента.Вставить(Реквизит.ИмяПоля, Форма["лм_" + Реквизит.ИмяПоля]); 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЭлемента;
	
КонецФункции

Функция ПолучитьДанныеЭлементаУниверсальнойСтруктуры_Удалить(ИдентификаторЭлемента, УниверсальнаяСтруктура)
	
	ДанныеЭлемента   = Новый Структура;
	МассивРеквизитов = УниверсальнаяСтруктура.Реквизиты;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСтруктуры", УниверсальнаяСтруктура.ИдентификаторСтруктуры);
	Запрос.УстановитьПараметр("ИдентификаторЭлемента",  ИдентификаторЭлемента);	
	Запрос.УстановитьПараметр("ПустойИдентификатор",    ПолучитьПустойИдентификатор());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыСсылка.Значение КАК Значение,
	               |	лм_УниверсальныеСтруктурыСсылка.ИдентификаторСтрокиТаблицы КАК ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыСсылка.ИдентификаторРеквизита КАК ИдентификаторРеквизита
	               |ПОМЕСТИТЬ втДанныеЭлемента
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыСсылка КАК лм_УниверсальныеСтруктурыСсылка
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыСсылка.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыСсылка.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыДата.Значение,
	               |	лм_УниверсальныеСтруктурыДата.ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыДата.ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыДата КАК лм_УниверсальныеСтруктурыДата
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыДата.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыДата.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыЧисло.Значение,
	               |	лм_УниверсальныеСтруктурыЧисло.ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыЧисло.ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыЧисло КАК лм_УниверсальныеСтруктурыЧисло
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыЧисло.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыЧисло.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыСтрока.Значение,
	               |	лм_УниверсальныеСтруктурыСтрока.ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыСтрока.ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыСтрока КАК лм_УниверсальныеСтруктурыСтрока
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыСтрока.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыСтрока.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыБулево.Значение,
	               |	лм_УниверсальныеСтруктурыБулево.ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыБулево.ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыБулево КАК лм_УниверсальныеСтруктурыБулево
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыБулево.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыБулево.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втДанныеЭлемента.Значение КАК Значение,
	               |	втДанныеЭлемента.ИдентификаторСтрокиТаблицы КАК ИдентификаторСтрокиТаблицы,
	               |	втДанныеЭлемента.ИдентификаторРеквизита КАК ИдентификаторРеквизита
	               |ИЗ
	               |	втДанныеЭлемента КАК втДанныеЭлемента
	               |ГДЕ
	               |	втДанныеЭлемента.ИдентификаторСтрокиТаблицы = &ПустойИдентификатор";
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОписаниеТиповСтруктура   = Новый ОписаниеТипов("Структура");
	РеквизитыТаблицСтруктуры = Новый Соответствие;
	ТаблицыСтруктуры         = Новый Соответствие;
	РеквизитыСтруктуры       = Новый Соответствие;
	
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		Если ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
			Если РеквизитыТаблицСтруктуры[Реквизит.ОсновнойИдентификатор] = Неопределено Тогда
				РеквизитыТаблицСтруктуры.Вставить(Реквизит.ОсновнойИдентификатор, Новый Массив);	
			КонецЕсли;
			РеквизитыТаблицСтруктуры[Реквизит.ОсновнойИдентификатор].Добавить(Реквизит);
		ИначеЕсли Реквизит.ТипЗначения = ОписаниеТиповСтруктура Тогда
			ТаблицыСтруктуры.Вставить(Реквизит.Идентификатор, Реквизит);
		Иначе
			РеквизитыСтруктуры.Вставить(Реквизит.Идентификатор, Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	ИмяВТ = "втДанныеЭлемента";
	
	Для Каждого КлючИЗначение Из ТаблицыСтруктуры Цикл
		Таблица = КлючИЗначение.Значение;
		РеквизитыТаблицы = РеквизитыТаблицСтруктуры[Таблица.Идентификатор];
		Если РеквизитыТаблицы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;		
		ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Добавить();
		ТекИсточник = Неопределено;
		ТекПсевдонимТаблицы = Неопределено;
		Сч = 0;
		Для Каждого РеквизитТаблицы Из РеквизитыТаблицы Цикл
			Операторы = ПакетЗапросов.Операторы[0];	
			ПсевдонимТаблицы = ИмяВТ + "_" + РеквизитТаблицы.ИмяПоля;
			Источник         = Операторы.Источники.Добавить(ИмяВТ, ПсевдонимТаблицы);
			Если ТекИсточник <> Неопределено Тогда
				Источник.Соединения.Добавить(ТекИсточник, ПсевдонимТаблицы + ".ИдентификаторСтрокиТаблицы = " + ТекПсевдонимТаблицы + ".ИдентификаторСтрокиТаблицы");
				Источник.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
			КонецЕсли;
			ТекИсточник = Источник;
			ТекПсевдонимТаблицы = ПсевдонимТаблицы;
			Операторы.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".Значение");
			ПакетЗапросов.Колонки[Сч].Псевдоним = РеквизитТаблицы.ИмяПоля;
			Сч = Сч + 1;
			Операторы.Отбор.Добавить(ПсевдонимТаблицы + ".ИдентификаторРеквизита = &" + Таблица.ИмяПоля + "_" + РеквизитТаблицы.ИмяПоля);
			Запрос.УстановитьПараметр(Таблица.ИмяПоля + "_" + РеквизитТаблицы.ИмяПоля, РеквизитТаблицы.Идентификатор);
		КонецЦикла;		
	КонецЦикла;	
	
	Запрос.Текст  = СхемаЗапроса.ПолучитьТекстЗапроса();
	ПакетЗапросов = Запрос.ВыполнитьПакет();	
	
	ВыборкаРеквизитов = ПакетЗапросов[1].Выбрать();
	Пока ВыборкаРеквизитов.Следующий() Цикл
		Реквизит = РеквизитыСтруктуры[ВыборкаРеквизитов.ИдентификаторРеквизита];
		Если Реквизит <> Неопределено Тогда
			ДанныеЭлемента.Вставить(Реквизит.ИмяПоля, ВыборкаРеквизитов.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Сч = 2;
	Для Каждого КлючИЗначение Из ТаблицыСтруктуры Цикл
		Таблица = КлючИЗначение.Значение;
		РеквизитыТаблицы = РеквизитыТаблицСтруктуры[Таблица.Идентификатор];
		Если РеквизитыТаблицы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;		
		
		ТЗ = ПакетЗапросов[Сч].Выгрузить();
		МассивСтруктур = Новый Массив;
		Для Каждого СтрТЗ Из ТЗ Цикл
			стрСтрока = Новый Структура;
			Для Каждого Колонка Из ТЗ.Колонки Цикл
				стрСтрока.Вставить(Колонка.Имя);	
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(стрСтрока, СтрТЗ);
			МассивСтруктур.Добавить(стрСтрока);
		КонецЦикла;
		ДанныеЭлемента.Вставить(Таблица.ИмяПоля, МассивСтруктур);
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ДанныеЭлемента;
	
КонецФункции

Функция ПолучитьДанныеЭлементаУниверсальнойСтруктуры(ИдентификаторЭлемента, УниверсальнаяСтруктура)
	
	ДанныеЭлемента   = Новый Структура;
	МассивРеквизитов = УниверсальнаяСтруктура.Реквизиты;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСтруктуры", УниверсальнаяСтруктура.ИдентификаторСтруктуры);
	Запрос.УстановитьПараметр("ИдентификаторЭлемента",  ИдентификаторЭлемента);	
	Запрос.УстановитьПараметр("ПустойИдентификатор",    ПолучитьПустойИдентификатор());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыСсылка.Значение КАК Значение,
	               |	лм_УниверсальныеСтруктурыСсылка.ИдентификаторСтрокиТаблицы КАК ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыСсылка.ИдентификаторРеквизита КАК ИдентификаторРеквизита
	               |ПОМЕСТИТЬ втДанныеЭлемента
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыСсылка КАК лм_УниверсальныеСтруктурыСсылка
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыСсылка.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыСсылка.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыДата.Значение,
	               |	лм_УниверсальныеСтруктурыДата.ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыДата.ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыДата КАК лм_УниверсальныеСтруктурыДата
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыДата.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыДата.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыЧисло.Значение,
	               |	лм_УниверсальныеСтруктурыЧисло.ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыЧисло.ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыЧисло КАК лм_УниверсальныеСтруктурыЧисло
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыЧисло.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыЧисло.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыСтрока.Значение,
	               |	лм_УниверсальныеСтруктурыСтрока.ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыСтрока.ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыСтрока КАК лм_УниверсальныеСтруктурыСтрока
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыСтрока.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыСтрока.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыБулево.Значение,
	               |	лм_УниверсальныеСтруктурыБулево.ИдентификаторСтрокиТаблицы,
	               |	лм_УниверсальныеСтруктурыБулево.ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_УниверсальныеСтруктурыБулево КАК лм_УниверсальныеСтруктурыБулево
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыБулево.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_УниверсальныеСтруктурыБулево.ИдентификаторЭлемента = &ИдентификаторЭлемента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втДанныеЭлемента.Значение КАК Значение,
	               |	втДанныеЭлемента.ИдентификаторСтрокиТаблицы КАК ИдентификаторСтрокиТаблицы,
	               |	втДанныеЭлемента.ИдентификаторРеквизита КАК ИдентификаторРеквизита
	               |ИЗ
	               |	втДанныеЭлемента КАК втДанныеЭлемента
	               |ГДЕ
	               |	втДанныеЭлемента.ИдентификаторСтрокиТаблицы = &ПустойИдентификатор";
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОписаниеТиповСтруктура   = Новый ОписаниеТипов("Структура");
	РеквизитыТаблицСтруктуры = Новый Соответствие;
	ТаблицыСтруктуры         = Новый Соответствие;
	РеквизитыСтруктуры       = Новый Соответствие;
	
	тзРеквизитыТаблицСтруктуры = Новый ТаблицаЗначений();
	тзРеквизитыТаблицСтруктуры.Колонки.Добавить("ИдентификаторРеквизита",	Новый ОписаниеТипов("УникальныйИдентификатор"));
	тзРеквизитыТаблицСтруктуры.Колонки.Добавить("ОсновнойИдентификатор", 	Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		Если ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
			Если РеквизитыТаблицСтруктуры[Реквизит.ОсновнойИдентификатор] = Неопределено Тогда
				РеквизитыТаблицСтруктуры.Вставить(Реквизит.ОсновнойИдентификатор, Новый Соответствие);	
			КонецЕсли;
			РеквизитыТаблицСтруктуры[Реквизит.ОсновнойИдентификатор].Вставить(Реквизит.Идентификатор, Реквизит);
			НоваяСтрока	= тзРеквизитыТаблицСтруктуры.Добавить();
			НоваяСтрока.ИдентификаторРеквизита	= Реквизит.Идентификатор;
			НоваяСтрока.ОсновнойИдентификатор	= Реквизит.ОсновнойИдентификатор;
		ИначеЕсли Реквизит.ТипЗначения = ОписаниеТиповСтруктура Тогда
			ТаблицыСтруктуры.Вставить(Реквизит.Идентификатор, Реквизит);
		Иначе
			РеквизитыСтруктуры.Вставить(Реквизит.Идентификатор, Реквизит);
		КонецЕсли;
	КонецЦикла;

	ИмяВТ = "втДанныеЭлемента";
	
	// Добавляется ИдентификаторТаблицы, чтобы определить, какие строки к какой таблице относятся
	ПакетЗапросов			= СхемаЗапроса.ПакетЗапросов.Добавить();
	ТекстВложенногоЗапроса	= 
		"ВЫБРАТЬ
			|	РеквизитыТаблицСтруктуры.ОсновнойИдентификатор КАК ОсновнойИдентификатор,
			|	РеквизитыТаблицСтруктуры.ИдентификаторРеквизита КАК ИдентификаторРеквизита
			|ПОМЕСТИТЬ ВТ_РеквизитыТаблицСтруктуры
			|ИЗ
			|	&тзРеквизитыТаблицСтруктуры КАК РеквизитыТаблицСтруктуры";
	
	ПакетЗапросов.УстановитьТекстЗапроса(ТекстВложенногоЗапроса);
	Запрос.УстановитьПараметр("тзРеквизитыТаблицСтруктуры", тзРеквизитыТаблицСтруктуры);
	
	ПакетЗапросов			= СхемаЗапроса.ПакетЗапросов.Добавить();
	ТекстВложенногоЗапроса	= 
		"ВЫБРАТЬ
			|	втДанныеЭлемента.Значение КАК Значение,
			|	втДанныеЭлемента.ИдентификаторСтрокиТаблицы КАК ИдентификаторСтрокиТаблицы,
			|	втДанныеЭлемента.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
			|	ВТ_РеквизитыТаблицСтруктуры.ОсновнойИдентификатор КАК ИдентификаторТаблицы
			|ИЗ
			|	втДанныеЭлемента КАК втДанныеЭлемента
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеквизитыТаблицСтруктуры КАК ВТ_РеквизитыТаблицСтруктуры
			|		ПО ВТ_РеквизитыТаблицСтруктуры.ИдентификаторРеквизита = втДанныеЭлемента.ИдентификаторРеквизита
			|ГДЕ
			|	втДанныеЭлемента.ИдентификаторСтрокиТаблицы <> &ПустойИдентификатор
			|ИТОГИ ПО
			|	ИдентификаторТаблицы,
			|	ИдентификаторСтрокиТаблицы";
	
	ПакетЗапросов.УстановитьТекстЗапроса(ТекстВложенногоЗапроса);
	
	Запрос.Текст  = СхемаЗапроса.ПолучитьТекстЗапроса();
	ПакетЗапросов = Запрос.ВыполнитьПакет();	
	
	// Заполнение головных реквизитов
	ВыборкаРеквизитов = ПакетЗапросов[1].Выбрать();
	Пока ВыборкаРеквизитов.Следующий() Цикл
		Реквизит = РеквизитыСтруктуры[ВыборкаРеквизитов.ИдентификаторРеквизита];
		Если Реквизит <> Неопределено Тогда
			ДанныеЭлемента.Вставить(Реквизит.ИмяПоля, ВыборкаРеквизитов.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение таблиц 
	ДЗ = ПакетЗапросов[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого КлючИЗначение Из ТаблицыСтруктуры Цикл
				
		Таблица = КлючИЗначение.Значение;
		РеквизитыТаблицы = РеквизитыТаблицСтруктуры[Таблица.Идентификатор];
		Если РеквизитыТаблицы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;		
		
		Отбор = Новый Структура("ИдентификаторТаблицы", КлючИЗначение.Ключ);
		ЗаполненныеСтрокиТаблицы = ДЗ.Строки.НайтиСтроки(Отбор);		
		МассивСтруктур = Новый Массив;
		
		Если ЗаполненныеСтрокиТаблицы.Количество() = 1 Тогда
			Для каждого СтрокаТаблицы Из ЗаполненныеСтрокиТаблицы[0].Строки Цикл
				стрСтрока = Новый Структура;
				Для Каждого РеквизитТаблицы Из РеквизитыТаблицы Цикл
					РеквизитДЗ = СтрокаТаблицы.Строки.Найти(РеквизитТаблицы.Ключ, "ИдентификаторРеквизита");
					Если РеквизитДЗ <> Неопределено Тогда
						стрСтрока.Вставить(РеквизитТаблицы.Значение.ИмяПоля, РеквизитДЗ.Значение);
					Иначе
						стрСтрока.Вставить(РеквизитТаблицы.Значение.ИмяПоля);
					КонецЕсли; 
				КонецЦикла;	
				
				МассивСтруктур.Добавить(стрСтрока);
			КонецЦикла;
		КонецЕсли; 
		
		ДанныеЭлемента.Вставить(Таблица.ИмяПоля, МассивСтруктур);

	КонецЦикла;
	
	Возврат ДанныеЭлемента;
	
КонецФункции

Функция ПолучитьЗначенияУниверсальнойСтруктуры(ВладелецЗначений, УниверсальнаяСтруктура) Экспорт
	
	Возврат ПолучитьДанныеЭлементаУниверсальнойСтруктуры(ВладелецЗначений.УникальныйИдентификатор(), УниверсальнаяСтруктура);
	
КонецФункции

Процедура ЗаписатьЗначенияУниверсальнойСтруктуры(ВладелецЗначений, ДанныеЭлемента, УниверсальнаяСтруктура) Экспорт
	
	ЗаписатьЭлементУниверсальнойСтруктуры(ДанныеЭлемента, УниверсальнаяСтруктура, ВладелецЗначений.УникальныйИдентификатор());
	
КонецПроцедуры

Функция ПолучитьИдентификаторРеквизитаСтруктуры(ИдентификаторСтруктуры, КлючРеквизита, СоответствиеИдентификаторов = Неопределено) Экспорт
	
	СтрокиОтбора = Новый Массив;
	
	Если СоответствиеИдентификаторов = Неопределено Тогда
		НаборЗаписей = РегистрыСведений.лм_ИдентификаторыРеквизитовСтруктур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСтруктуры.Установить(ИдентификаторСтруктуры);
		НаборЗаписей.Отбор.КлючРеквизита.Установить(КлючРеквизита);
		НаборЗаписей.Прочитать();
	Иначе		
		ИдентификаторРеквизита = СоответствиеИдентификаторов[КлючРеквизита];
	КонецЕсли;
	
	Если СоответствиеИдентификаторов = Неопределено И НаборЗаписей.Количество() <> 0 Тогда
		Возврат НаборЗаписей[0].ИдентификаторРеквизита;
	ИначеЕсли СоответствиеИдентификаторов <> Неопределено И ИдентификаторРеквизита <> Неопределено Тогда
		Возврат ИдентификаторРеквизита;
	Иначе
		НаборЗаписей = РегистрыСведений.лм_ИдентификаторыРеквизитовСтруктур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСтруктуры.Установить(ИдентификаторСтруктуры);
		НаборЗаписей.Отбор.КлючРеквизита.Установить(КлючРеквизита);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Запись                        = НаборЗаписей.Добавить();
		Запись.ИдентификаторСтруктуры = ИдентификаторСтруктуры;
		Запись.КлючРеквизита          = КлючРеквизита;
		Запись.ИдентификаторРеквизита = Новый УникальныйИдентификатор;
		НаборЗаписей.Записать();
		Возврат Запись.ИдентификаторРеквизита;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоответствиеИдентификаторовРеквизитовСтруктуры(ИдентификаторСтруктуры) Экспорт
	
	СоответствиеРезультат = Новый Соответствие;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_ИдентификаторыРеквизитовСтруктур.КлючРеквизита КАК КлючРеквизита,
	               |	лм_ИдентификаторыРеквизитовСтруктур.ИдентификаторРеквизита КАК ИдентификаторРеквизита
	               |ИЗ
	               |	РегистрСведений.лм_ИдентификаторыРеквизитовСтруктур КАК лм_ИдентификаторыРеквизитовСтруктур
	               |ГДЕ
	               |	лм_ИдентификаторыРеквизитовСтруктур.ИдентификаторСтруктуры = &ИдентификаторСтруктуры";
	
	Запрос.УстановитьПараметр("ИдентификаторСтруктуры", ИдентификаторСтруктуры);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СоответствиеРезультат.Вставить(Выборка.КлючРеквизита, Выборка.ИдентификаторРеквизита);	
		КонецЦикла;
	КонецЕсли;
		
	Возврат СоответствиеРезультат;
	
КонецФункции

Функция СформироватьСоответствиеЗависимыхРеквизитов(УниверсальнаяСтруктура, ЭтоФорма = Истина) Экспорт
			
	КэшЗависимостей                        = РегистрыСведений.лм_КэшЗависимостейУниверсальныхСтруктурДанных.СоздатьМенеджерЗаписи();
	КэшЗависимостей.ИдентификаторСтруктуры = УниверсальнаяСтруктура.ИдентификаторСтруктуры;
	КэшЗависимостей.ЭтоФорма               = ЭтоФорма;
	КэшЗависимостей.Прочитать();
	ВычисленныеЗависимости                 = КэшЗависимостей.ВычисленныеЗависимости.Получить();
	
	Если ВычисленныеЗависимости <> Неопределено И УниверсальнаяСтруктура.ХешСумма = КэшЗависимостей.ХешСтруктуры Тогда
		Возврат ВычисленныеЗависимости;
	КонецЕсли;
	
	СоответствиеРеквизитов   = Новый Соответствие;
	СоответствиеЗависимостей = Новый Соответствие;
		
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		СоответствиеРеквизитов.Вставить(Реквизит.Идентификатор, Реквизит);
	КонецЦикла;
	
	Для Каждого Зависимость Из УниверсальнаяСтруктура.ЗависимостиРеквизитов Цикл
		
		ОписаниеЗависимогоРеквизита = СоответствиеЗависимостей[Зависимость.Идентификатор];
		
		Если ОписаниеЗависимогоРеквизита = Неопределено Тогда
			СоответствиеЗависимостей.Вставить(Зависимость.Идентификатор, Новый Структура("ИмяРеквизита,УсловиеВидимости,УсловиеДоступности,УсловиеОбязательностиЗаполнения,ЗаполнятьОбязательно"));
			ОписаниеЗависимогоРеквизита = СоответствиеЗависимостей[Зависимость.Идентификатор];
		КонецЕсли;
		
		Реквизит                                         = СоответствиеРеквизитов[Зависимость.Идентификатор];
		ОписаниеЗависимогоРеквизита.ИмяРеквизита         = "лм_" + Реквизит.ИмяПоля;
		ОписаниеЗависимогоРеквизита.ЗаполнятьОбязательно = ?(Реквизит.ЗаполнятьОбязательно <> Неопределено, Реквизит.ЗаполнятьОбязательно, Ложь);
		
		ПутьКРеквизиту = "Параметры." + ?(ЭтоФорма, "Форма.", "") + "лм_" + Зависимость.Реквизит;
		
		ШаблонУсловия = "";
		Если Зависимость.Условие = "Равно" Тогда
			ШаблонУсловия = "%1 = %2";
		ИначеЕсли Зависимость.Условие = "Не равно" Тогда // не ошибка, идентификатор.
			ШаблонУсловия = "%1 <> %2";
		КонецЕсли;
		
		Если Зависимость.Условие = "В списке" Тогда // не ошибка, идентификатор.
			ШаблонУсловия = "%2.НайтиПоЗначению(%1) <> Неопределено";
		ИначеЕсли Зависимость.Условие = "Не в списке" Тогда // не ошибка, идентификатор.
			ШаблонУсловия = "%2.НайтиПоЗначению(%1) = Неопределено";
		КонецЕсли;
		
		ПравоеЗначение = "";
		Если ЗначениеЗаполнено(ШаблонУсловия) Тогда
			ПравоеЗначение = "Параметры.ЗначенияПараметров[""" + ПутьКРеквизиту + """]";
		КонецЕсли;
		
		Если Зависимость.Условие = "Заполнено" Тогда
			ШаблонУсловия = "ЗначениеЗаполнено(%1)";
		ИначеЕсли Зависимость.Условие = "Не заполнено" Тогда // не ошибка, идентификатор.
			ШаблонУсловия = "Не ЗначениеЗаполнено(%1)";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПравоеЗначение) Тогда
			КодУсловия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, ПутьКРеквизиту, ПравоеЗначение);
		Иначе
			КодУсловия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, ПутьКРеквизиту);
		КонецЕсли;
		
		Если Зависимость.ЗависимоеСвойство = "Виден" Тогда
			УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеВидимости, ПутьКРеквизиту, Зависимость, КодУсловия, Зависимость.Условие);
		ИначеЕсли Зависимость.ЗависимоеСвойство = "Доступен" Тогда
			УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеДоступности, ПутьКРеквизиту, Зависимость, КодУсловия, Зависимость.Условие);
		Иначе
			УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения, ПутьКРеквизиту, Зависимость, КодУсловия, Зависимость.Условие);
		КонецЕсли;
	КонецЦикла;
	
	КэшЗависимостей.ИдентификаторСтруктуры = УниверсальнаяСтруктура.ИдентификаторСтруктуры; 
	КэшЗависимостей.ЭтоФорма               = ЭтоФорма;
	КэшЗависимостей.ВычисленныеЗависимости = Новый ХранилищеЗначения(СоответствиеЗависимостей);
	КэшЗависимостей.ХешСтруктуры           = УниверсальнаяСтруктура.ХешСумма;	
	КэшЗависимостей.Записать();
	
	Возврат СоответствиеЗависимостей;
		
КонецФункции

Процедура СформироватьЭлементыФормыПоУниверсальнойСтруктуре(Форма, УниверсальнаяСтруктура = Неопределено, ИмяГруппы, СоответствиеЗависимых = Неопределено, СоответствиеДобавляемых = Неопределено) Экспорт
	
	ГруппаФормы = Форма.Элементы.Найти(ИмяГруппы);
	ОписаниеТипаСтруктура = Новый ОписаниеТипов("Структура");
	
	Если ГруппаФормы <> Неопределено Тогда
		
		Если УниверсальнаяСтруктура = Неопределено Тогда
			МассивСтруктур         = ПолучитьИзВременногоХранилища(Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры()]);
			УниверсальнаяСтруктура = МассивСтруктур[0];
		КонецЕсли;
		
		СоответствиеРеквизитов = Новый Соответствие;
				
		Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
			СоответствиеРеквизитов.Вставить(Реквизит.Идентификатор, Реквизит);
		КонецЦикла;
				
		Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
			
			Если СоответствиеЗависимых <> Неопределено И СоответствиеЗависимых[Реквизит.Идентификатор] <> Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			Если СоответствиеДобавляемых <> Неопределено И СоответствиеДобавляемых[Реквизит.ИмяПоля] = Неопределено Тогда				
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.ТипЗначения = ОписаниеТипаСтруктура Тогда 
				Попытка
					ТаблицаСтруктур = Форма.Элементы.Вставить("лм_" + Реквизит.ИмяПоля, Тип("ТаблицаФормы"), ГруппаФормы);
					ТаблицаСтруктур.ПутьКДанным = "лм_" + Реквизит.ИмяПоля;
					ТаблицаСтруктур.Заголовок   = Реквизит.Синоним;
				Исключение
				КонецПопытки;
			ИначеЕсли Не ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда			
				Попытка
					НовыйЭлемент = Форма.Элементы.Вставить("лм_" + Реквизит.ИмяПоля, Тип("ПолеФормы"), ГруппаФормы);
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "лм_" + Реквизит.ИмяПоля;
					НовыйЭлемент.Заголовок   = Реквизит.Синоним;
					НовыйЭлемент.УстановитьДействие("ПриИзменении", "лм_УниверсальныеСтруктурыДанных_ПриИзмененииРеквизита");
					НовыйЭлемент.УстановитьДействие("НачалоВыбора", "лм_УниверсальныеСтруктурыДанных_НачалоВыбора");
					
					Если Реквизит.ТипЗначения.СодержитТип(Тип("СправочникСсылка.лм_ВидыУниверсальныхСправочников")) Тогда
						УстановитьПараметрыВыбора(Реквизит, НовыйЭлемент);
					КонецЕсли;
					
					Если Реквизит.МногострочноеПолеВвода <> Неопределено И Реквизит.МногострочноеПолеВвода > 0 Тогда
						НовыйЭлемент.МногострочныйРежим = Истина;
						НовыйЭлемент.Высота             = Реквизит.МногострочноеПолеВвода;
					КонецЕсли;
					НовыйЭлемент.АвтоОтметкаНезаполненного = Реквизит.ЗаполнятьОбязательно;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
			
		Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл	
			
			Если СоответствиеЗависимых <> Неопределено И СоответствиеЗависимых[Реквизит.Идентификатор] <> Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			Если СоответствиеДобавляемых <> Неопределено И СоответствиеДобавляемых[Реквизит.ИмяПоля] = Неопределено Тогда				
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
				Попытка
					ИмяТаблицы   = "лм_" + СоответствиеРеквизитов[Реквизит.ОсновнойИдентификатор].ИмяПоля;
					ТаблицаФормы = Форма.Элементы.Найти(ИмяТаблицы);
					ДобавитьКолонкуТаблицыФормы(Реквизит.ИмяПоля, Реквизит.Синоним, Форма, ТаблицаФормы, ИмяТаблицы);
					ИмяПоляТаблицы = ИмяТаблицы + Реквизит.ИмяПоля;
					Форма.Элементы[ИмяПоляТаблицы].УстановитьДействие("ПриИзменении", "лм_УниверсальныеСтруктурыДанных_ПриИзмененииРеквизита");
					Форма.Элементы[ИмяПоляТаблицы].УстановитьДействие("НачалоВыбора", "лм_УниверсальныеСтруктурыДанных_НачалоВыбора");
					Форма.Элементы[ИмяПоляТаблицы].АвтоОтметкаНезаполненного = Реквизит.ЗаполнятьОбязательно;
					
					Если Реквизит.ТипЗначения.СодержитТип(Тип("СправочникСсылка.лм_ВидыУниверсальныхСправочников")) Тогда
						УстановитьПараметрыВыбора(Реквизит, Форма.Элементы[ИмяПоляТаблицы]);
					КонецЕсли;
					
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры

Функция СгенерироватьЗапросЭлементовТаблицыУниверсальнойСтруктуры(УниверсальнаяСтруктура, МассивРеквизитов, Отбор, ИмяРеквизитаТипаСтруктура) Экспорт
			
	СоответствиеРеквизитов = Новый Соответствие;
	
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		СоответствиеРеквизитов.Вставить(Реквизит.ИмяПоля, Реквизит);
	КонецЦикла;
	
	// Формируем массив реквизитов
	РеквизитыЗапроса = Новый Массив;
	
	Для Каждого ИмяПоля Из МассивРеквизитов Цикл
		Если СоответствиеРеквизитов[ИмяПоля] <> Неопределено Тогда
			стРеквизитЗапроса               = Новый Структура("Идентификатор,ИмяПоля");
			стРеквизитЗапроса.ИмяПоля       = ИмяПоля;
			стРеквизитЗапроса.Идентификатор = СоответствиеРеквизитов[ИмяПоля].Идентификатор;
			РеквизитыЗапроса.Добавить(стРеквизитЗапроса);	
		КонецЕсли;
	КонецЦикла;	 	
	
	Запрос       = Новый Запрос;
	Сч           = 0;
	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос.УстановитьПараметр("ИдентификаторСтруктуры", УниверсальнаяСтруктура.ИдентификаторСтруктуры); 
	
	Для Каждого КлючИЗначение Из Отбор Цикл				
		Если Сч <> 0 Тогда
			СхемаЗапроса.ПакетЗапросов.Добавить();
		КонецЕсли;
		СформироватьЗапросКолонки(Сч, СхемаЗапроса.ПакетЗапросов[Сч], КлючИЗначение.Ключ, СоответствиеРеквизитов, Запрос, КлючИЗначение.Значение);				
		Сч = Сч + 1;
	КонецЦикла;
	
	Для Каждого РеквизитЗапроса Из РеквизитыЗапроса Цикл
		Если Отбор.Свойство(РеквизитЗапроса.ИмяПоля) Тогда
			Продолжить;	
		КонецЕсли;				
		СхемаЗапроса.ПакетЗапросов.Добавить();
		СформироватьЗапросКолонки(Сч, СхемаЗапроса.ПакетЗапросов[Сч], РеквизитЗапроса.ИмяПоля, СоответствиеРеквизитов, Запрос);
		Сч = Сч + 1;
	КонецЦикла;
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Добавить();
	Сч = 0;			
	Для Каждого КлючИЗначение Из Отбор Цикл
		ПсевдонимТаблицы = "ВТ_ДанныеКолонки" + "_" + КлючИЗначение.Ключ;
		Если Сч <> 0 Тогда
			ПакетЗапросов.Операторы.Добавить();	
		КонецЕсли;
		Операторы = ПакетЗапросов.Операторы[Сч];
		Операторы.Источники.Добавить(ПсевдонимТаблицы);
		Операторы.ВыбираемыеПоля.Добавить("ИдентификаторЭлемента");
		Операторы.ВыбираемыеПоля.Добавить("ИдентификаторСтрокиТаблицы");
		Сч = Сч + 1;
	КонецЦикла;
	
	ТаблицаИдентификаторовДоГруппировки = "ВТ_ИдентификаторыЭлементов";
	ПакетЗапросов.ТаблицаДляПомещения = ТаблицаИдентификаторовДоГруппировки;			
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Добавить();
	Операторы     = ПакетЗапросов.Операторы[0];			
	Операторы.Источники.Добавить(ТаблицаИдентификаторовДоГруппировки);
	Операторы.ВыбираемыеПоля.Добавить("ИдентификаторЭлемента");
	Операторы.ВыбираемыеПоля.Добавить("ИдентификаторСтрокиТаблицы");
	Операторы.Группировка.Добавить("ИдентификаторЭлемента");
	Операторы.Группировка.Добавить("ИдентификаторСтрокиТаблицы");
	ТаблицаИдентификаторовПослеГруппировки = "ВТ_ИдентификаторыЭлементовСгруппированные";
	ПакетЗапросов.ТаблицаДляПомещения = ТаблицаИдентификаторовПослеГруппировки;
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Добавить();
	Операторы     = ПакетЗапросов.Операторы[0];
	ЛеваяТаблица  = Операторы.Источники.Добавить(ТаблицаИдентификаторовПослеГруппировки);
	Сч            = 0;
	
	Для Каждого РеквизитЗапроса Из РеквизитыЗапроса Цикл
		ИмяТаблицыКолонки = "ВТ_ДанныеКолонки_" + РеквизитЗапроса.ИмяПоля;
		ТаблицаКолонки    = Операторы.Источники.Добавить(ИмяТаблицыКолонки);
		ЛеваяТаблица.Соединения.Добавить(ТаблицаКолонки, ТаблицаИдентификаторовПослеГруппировки + ".ИдентификаторЭлемента = " + ИмяТаблицыКолонки + ".ИдентификаторЭлемента И " + 
		ТаблицаИдентификаторовПослеГруппировки + ".ИдентификаторСтрокиТаблицы = " + ИмяТаблицыКолонки + ".ИдентификаторСтрокиТаблицы");
		Операторы.ВыбираемыеПоля.Добавить(ИмяТаблицыКолонки + ".Значение");
		ПакетЗапросов.Колонки[Сч].Псевдоним = РеквизитЗапроса.ИмяПоля;
		Сч = Сч + 1;
	КонецЦикла;		
	
	Операторы.ВыбираемыеПоля.Добавить(ТаблицаИдентификаторовПослеГруппировки + ".ИдентификаторЭлемента");
	
	Для Каждого КлючИЗначение Из Отбор Цикл
		Операторы.Отбор.Добавить("ВТ_ДанныеКолонки_" + КлючИЗначение.Ключ + ".Значение = &Параметр_Значение_" + КлючИЗначение.Ключ);
	КонецЦикла;
			
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Запрос;
	
КонецФункции

Функция ПроверитьСуществованиеУниверсальнойСтруктуры(ИдентификаторСтруктуры) Экспорт
	
	СтруктураСсылка = Справочники.лм_УниверсальныеСтруктурыДанных.ПолучитьСсылку(ИдентификаторСтруктуры);
	СтруктураОбъект = СтруктураСсылка.ПолучитьОбъект();
	
	СтруктураСуществует = Ложь;
	Если СтруктураОбъект = Неопределено Тогда
		СтруктураСуществует = Истина;	
	КонецЕсли;
	
	Возврат СтруктураСуществует;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсОбработчикиСобытийФорм

Процедура ПриСозданииНаСервере(Форма, ДополнительныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеПараметры.Свойство("ИдентификаторЭлемента") Тогда
		ИдентификаторЭлемента = ДополнительныеПараметры.ИдентификаторЭлемента;
		
		Если ТипЗнч(ИдентификаторЭлемента) <> Тип("УникальныйИдентификатор") Тогда
			ИдентификаторЭлемента = ИдентификаторЭлемента.УникальныйИдентификатор();	
		КонецЕсли;		
		СформироватьИдентификаторЭлементаНаФорме(Форма, ИдентификаторЭлемента);	
	Иначе
		ИдентификаторЭлемента = Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаИдентификаторЭлементаУниверсальнойСтруктуры()];
	КонецЕсли;
	
	СлужебныеРеквизитыДобавлены = СлужебныеРеквизитыДобавлены(Форма);
	
	Если Не СлужебныеРеквизитыДобавлены Тогда
		ИнициализироватьРеквизитАдресаСоответствияЗависимых(Форма);
		ИнициализироватьРеквизитАдресаСоответствияРеквизитов(Форма);
		СформироватьИмяЭлементаРазмещенияНаФорме(Форма, ДополнительныеПараметры.ИмяЭлементаДляРазмещения);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Владелец") Тогда
		МассивСтруктур = ПолучитьСтруктурыВладельца(ДополнительныеПараметры.Владелец);
	ИначеЕсли ДополнительныеПараметры.Свойство("ИмяЭлементаРеквизитаВладельца") Тогда
		ЭлементРеквизитаВладельца = Форма.Элементы.Найти(ДополнительныеПараметры.ИмяЭлементаРеквизитаВладельца);
		МассивСтруктур            = ПолучитьСтруктурыРеквизитаВладельца(Форма, ЭлементРеквизитаВладельца);
		УстановитьОбработчикИзмененияРеквизитаВладельца(ЭлементРеквизитаВладельца);
		СформироватьПутьКДаннымРеквизитаВладельцаНаФорме(Форма, ЭлементРеквизитаВладельца);
	КонецЕсли;
	МассивУниверсальныхСтруктур = Новый Массив;
	
	Для Каждого ИдентификаторСтруктуры Из МассивСтруктур Цикл
		УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);		
		МассивУниверсальныхСтруктур.Добавить(УниверсальнаяСтруктура);
		ДанныеЭлемента = ПолучитьДанныеЭлементаУниверсальнойСтруктуры(ИдентификаторЭлемента, УниверсальнаяСтруктура);		
		СоответствиеЗависимых = СформироватьСоответствиеЗависимыхРеквизитов(УниверсальнаяСтруктура);
		СоответствиеРеквизитов = СформироватьСоответствиеРеквизитов(УниверсальнаяСтруктура);		
		СформироватьСоответствиеЗависимыхРеквизитовНаФорме(Форма, СоответствиеЗависимых);		
		ИмяЭлементаДляРазмещения = Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаЭлементРазмещения()];		
		СформироватьСоответствиеРеквизитовНаФорме(Форма, СоответствиеРеквизитов);
		СформироватьРеквизитыПоУниверсальнойСтруктуре(Форма, УниверсальнаяСтруктура);
		СформироватьЭлементыФормыПоУниверсальнойСтруктуре(Форма, УниверсальнаяСтруктура, ИмяЭлементаДляРазмещения, СоответствиеЗависимых);
		Для Каждого КлючИЗначение Из ДанныеЭлемента Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				Для Каждого Стр Из КлючИЗначение.Значение Цикл
					ИмяРеквизитаСсылки = СтрЗаменить(КлючИЗначение.Ключ, "Связанный_", "") + "_Предзаполнение";
					Если СтрНачинаетсяС(КлючИЗначение.Ключ, "Связанный") И Стр.Свойство(ИмяРеквизитаСсылки) И Стр[ИмяРеквизитаСсылки] = Истина Тогда
						Продолжить;
					Иначе
						СтрТЗ = Форма["лм_" + КлючИЗначение.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(СтрТЗ, Стр);						
					КонецЕсли; 
				КонецЦикла;
			Иначе
				Форма["лм_" + КлючИЗначение.Ключ] = КлючИЗначение.Значение;	
			КонецЕсли;
		КонецЦикла;		
		ДополнитьСоставЭлементовФормы(Форма, СоответствиеЗависимых, УниверсальнаяСтруктура, ИмяЭлементаДляРазмещения);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("лм_УправлениеБизнесПроцессами") Тогда
			МодульБизнесПроцессы = ОбщегоНазначения.ОбщийМодуль("лм_БизнесПроцессы");
			Если Форма.ИмяФормы = "БизнесПроцесс.лм_БизнесПроцесс.Форма.ДействиеВыполнить" Тогда
				МодульБизнесПроцессы.УстановитьНастройкиОтображенияРеквизитовТочкиДействия(Форма, УниверсальнаяСтруктура);
				МодульБизнесПроцессыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("лм_БизнесПроцессыКлиентСервер");
				МодульБизнесПроцессыКлиентСервер.НастроитьОтображениеЭлементовФормыЗадачи(Форма);
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;	
	
	СформироватьУниверсальныеСтруктурыНаФорме(Форма, МассивУниверсальныхСтруктур, СлужебныеРеквизитыДобавлены);
	
	лм_УниверсальныеСтруктурыДанныхПереопределяемый.ПриСозданииНаСервере(Форма, ДополнительныеПараметры, МассивУниверсальныхСтруктур, ДанныеЭлемента);
		
КонецПроцедуры

Процедура ФормаНастроекПриСозданииНаСервере(Форма, ДополнительныеПараметры) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеПараметры.ВыводитьСписокСтруктур Тогда
		СформироватьСписокСтруктур(Форма, ДополнительныеПараметры);
	КонецЕсли;
			
	СформироватьСписокСоставаСтруктуры(Форма, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ВыводитьСписокСтруктур = Ложь
			И ДополнительныеПараметры.Свойство("ИдентификаторСтруктуры") Тогда
			
		ОтложеннаяИнициализация = Ложь;	
		Если ДополнительныеПараметры.Свойство("ОтложеннаяИнициализация") Тогда
			ОтложеннаяИнициализация = ДополнительныеПараметры.ОтложеннаяИнициализация;
		КонецЕсли;
		
		Если ОтложеннаяИнициализация Тогда
			УстановитьОбработчикПриСменеСтраницы(Форма, ДополнительныеПараметры.ИмяГруппы);	
		КонецЕсли;
		
		ИдентификаторКопируемойСтруктуры = Неопределено;
		Если ДополнительныеПараметры.Свойство("ИдентификаторКопируемойСтруктуры") Тогда
			ИдентификаторКопируемойСтруктуры = ДополнительныеПараметры.ИдентификаторКопируемойСтруктуры;
			ОтложеннаяИнициализация          = Ложь;
		КонецЕсли;
				
		ВладелецСтруктуры = ?(ДополнительныеПараметры.Свойство("ВладелецСтруктуры"), ДополнительныеПараметры.ВладелецСтруктуры, Неопределено);
		лм_УниверсальныеСтруктурыДанныхКлиентСервер.ВывестиДанныеСтруктуры(ДополнительныеПараметры.ИдентификаторСтруктуры, Форма, ВладелецСтруктуры, ОтложеннаяИнициализация, ИдентификаторКопируемойСтруктуры);		
		
		Если Не ДополнительныеПараметры.Свойство("ОтложеннаяИнициализация") Тогда
			Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаДанныеСтруктурыИнициализированы()] = Истина;	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ДополнительныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресМассиваСтруктур = Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры()];
	МассивСтруктур       = ПолучитьИзВременногоХранилища(АдресМассиваСтруктур);	
	
	Для Каждого УниверсальнаяСтруктура Из МассивСтруктур Цикл
		ДанныеЭлемента         = ПолучитьИзФормыДанныеЭлементаУниверсальнойСтруктуры(Форма, УниверсальнаяСтруктура);
		ЗаписатьЭлементУниверсальнойСтруктуры(ДанныеЭлемента, УниверсальнаяСтруктура, ДополнительныеПараметры.ИдентификаторЭлемента);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыполнитьОтложеннуюИнициализациюДанныхСтруктуры(Форма) Экспорт
	
	АдресСтруктуры = Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры()];
	
	УниверсальнаяСтруктура = Неопределено;
	
	Если ЗначениеЗаполнено(АдресСтруктуры) Тогда
		Пока УниверсальнаяСтруктура = Неопределено Цикл
			УниверсальнаяСтруктура = ПолучитьИзВременногоХранилища(АдресСтруктуры);	
		КонецЦикла;
		
		лм_УниверсальныеСтруктурыДанныхКлиентСервер.ЗаполнитьРеквизитыПоДаннымСтруктуры(УниверсальнаяСтруктура, Форма);
	КонецЕсли;
	
	Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаДанныеСтруктурыИнициализированы()] = Истина;
		
КонецПроцедуры

Процедура ПриИзмененииРеквизитаВладельца(Форма) Экспорт
	
	ИмяРеквизитаАдресСтруктуры = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры();
	ИмяРеквизитаПуть           = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаПутьКДаннымРеквизитаВладельца();
	Владелец                   = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ПолучитьЗначениеПоПути(Форма, Форма[ИмяРеквизитаПуть]);
	
	ДополнительныеПараметры = Новый Структура("Владелец", Владелец);
	
	УдаляемыеРеквизиты = Новый Массив;
	МассивСтруктур     = ПолучитьИзВременногоХранилища(Форма[ИмяРеквизитаАдресСтруктуры]);
	
	Для Каждого УниверсальнаяСтруктура Из МассивСтруктур Цикл
		Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
			ИмяРеквизита = "лм_" + Реквизит.ИмяПоля; 
			УдаляемыйЭлемент = Форма.Элементы.Найти(ИмяРеквизита);
			Если УдаляемыйЭлемент <> Неопределено Тогда
				Форма.Элементы.Удалить(УдаляемыйЭлемент);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
				УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	
	ПриСозданииНаСервере(Форма, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СформироватьДанныеСтруктурыВФоне(ИдентификаторСтруктуры, АдресСтруктуры, ВладелецСтруктуры, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанныхВызовСервера.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры, ДополнительныеПараметры);
	
	Если ВладелецСтруктуры <> Неопределено Тогда
		УниверсальнаяСтруктура.ВладелецСтруктуры = ВладелецСтруктуры;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(УниверсальнаяСтруктура, АдресСтруктуры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьСписокСтруктур(Форма, ДополнительныеПараметры)
	
	ИмяГруппы = ДополнительныеПараметры.ИмяГруппы;
	Структуры = ДополнительныеПараметры.Структуры;
	
	СформироватьРеквизитыСпискаСтруктур(Форма);
	СформироватьЭлементыСпискаСтруктур(Форма, ИмяГруппы);
	
	Для Каждого Структура Из Структуры Цикл
		Стр                    = Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяСпискаСтруктур()].Добавить();
		УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(Структура);
		Стр.Идентификатор      = УниверсальнаяСтруктура.ИдентификаторСтруктуры;
		Стр.Наименование       = УниверсальнаяСтруктура.Наименование;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСписокСоставаСтруктуры(Форма, ДополнительныеПараметры)
	
	ИмяГруппы = ДополнительныеПараметры.ИмяГруппы;
	//Структуры = ДополнительныеПараметры.Структуры;
	
	СформироватьРеквизитыФормыСостава(Форма);
	СформироватьЭлементыФормыСостава(Форма, ИмяГруппы);	
	Форма.лмЭтоОсновнаяСтруктура = ?(ДополнительныеПараметры.Свойство("ЭтоОсновнаяСтруктура"), ДополнительныеПараметры.ЭтоОсновнаяСтруктура, Истина);
	Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаИмяГруппыУниверсальнойСтруктуры()] = ДополнительныеПараметры.ИмяГруппы;
	
КонецПроцедуры

Процедура СформироватьРеквизитыФормыСостава(Форма)
		
	МассивРеквизитов = Новый Массив;
	
	ИмяТЗ = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыРеквизитов();
	УниверсальнаяСтруктура = Новый РеквизитФормы(ИмяТЗ, Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивРеквизитов.Добавить(УниверсальнаяСтруктура);	
	
	Описания = СформироватьСтруктуруОписанийТипов();
	
	СформироватьТаблицуСвойствРеквизита(МассивРеквизитов, ИмяТЗ, Описания);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ЗаполнитьПоДаннымПредмета", Описания.ОписаниеТиповЗначение, ИмяТЗ);
	
	ИмяТЗЗависимости = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыЗависимостей();
	ЗависимостиРеквизитов = Новый РеквизитФормы(ИмяТЗЗависимости, Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивРеквизитов.Добавить(ЗависимостиРеквизитов);			
	
	СформироватьТаблицуЗависимостейРеквизита(МассивРеквизитов, ИмяТЗЗависимости, Описания);
	
	ИмяТаблицыСвойств = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыСвойствРеквизитов();
	ТаблицаСвойств = Новый РеквизитФормы(ИмяТаблицыСвойств, Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивРеквизитов.Добавить(ТаблицаСвойств);	
	СформироватьТаблицуСвойствРеквизита(МассивРеквизитов, ИмяТаблицыСвойств, Описания);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ОсновнойИдентификатор", Описания.ОписаниеТиповИдентификатор,  ИмяТаблицыСвойств);
	
	ИмяТЗЗависимостиСвойств = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыЗависимостейСвойствРеквизитов();
	ТаблицаЗависимостейСвойств = Новый РеквизитФормы(ИмяТЗЗависимостиСвойств, Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивРеквизитов.Добавить(ТаблицаЗависимостейСвойств);
	СформироватьТаблицуЗависимостейРеквизита(МассивРеквизитов, ИмяТЗЗависимостиСвойств, Описания);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ОсновнойИдентификатор", Описания.ОписаниеТиповИдентификатор,  ИмяТЗЗависимостиСвойств);
	
	РеквизитИдентификаторСтруктуры = Новый РеквизитФормы("лмИдентификаторСтруктуры", Описания.ОписаниеТиповИдентификатор);
	МассивРеквизитов.Добавить(РеквизитИдентификаторСтруктуры);	
	
	РеквизитВладелецСтруктуры = Новый РеквизитФормы("лмВладелецСтруктуры", Описания.ОписаниеТиповВладелецСтруктуры);
	МассивРеквизитов.Добавить(РеквизитВладелецСтруктуры);			
	
	РеквизитНаименованиеСтруктуры = Новый РеквизитФормы("лмИмяСтруктуры", Описания.ОписаниеТиповСтрока);
	МассивРеквизитов.Добавить(РеквизитНаименованиеСтруктуры);			
	
	РеквизитЭтоОсновнаяСтруктура = Новый РеквизитФормы("лмЭтоОсновнаяСтруктура", Описания.ОписаниеТиповБулево);
	МассивРеквизитов.Добавить(РеквизитЭтоОсновнаяСтруктура);
	
	РеквизитДанныеСтруктурыИнициализированы = Новый РеквизитФормы(лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаДанныеСтруктурыИнициализированы(), Описания.ОписаниеТиповБулево);
	МассивРеквизитов.Добавить(РеквизитДанныеСтруктурыИнициализированы);
	
	РеквизитАдресСтруктуры = Новый РеквизитФормы(лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры(), Описания.ОписаниеТиповСтрока);
	МассивРеквизитов.Добавить(РеквизитАдресСтруктуры);
	
	РеквизитИмяГруппы = Новый РеквизитФормы(лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаИмяГруппыУниверсальнойСтруктуры(), Описания.ОписаниеТиповСтрока);
	МассивРеквизитов.Добавить(РеквизитИмяГруппы);
	
	РеквизитИмяСтраницы = Новый РеквизитФормы(лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаИмяСтраницыУниверсальнойСтруктуры(), Описания.ОписаниеТиповСтрока);
	МассивРеквизитов.Добавить(РеквизитИмяСтраницы);
		
	Форма.ИзменитьРеквизиты(МассивРеквизитов);	
	
КонецПроцедуры

Процедура СформироватьРеквизитыСпискаСтруктур(Форма)
	
	МассивРеквизитов = Новый Массив;
	
	ИмяСпискаСтруктур = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяСпискаСтруктур();
	
	СписокСтруктур = Новый РеквизитФормы(ИмяСпискаСтруктур, Новый ОписаниеТипов("ТаблицаЗначений"));	
	МассивРеквизитов.Добавить(СписокСтруктур);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Наименование",  Новый ОписаниеТипов("Строка"),                  ИмяСпискаСтруктур);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"), ИмяСпискаСтруктур);
		
	Форма.ИзменитьРеквизиты(МассивРеквизитов);	
	
КонецПроцедуры

Процедура ДобавитьКолонкуРеквизита(МассивРеквизитов, ИмяКолонки, Тип, ИмяТаблицы)
	
	КолонкаТаблицы = Новый РеквизитФормы(ИмяКолонки, Тип, ИмяТаблицы);
		
	МассивРеквизитов.Добавить(КолонкаТаблицы);
		
КонецПроцедуры

Процедура СформироватьЭлементыФормыСостава(Форма, ИмяГруппы)
	
	ИмяТЗ = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыРеквизитов();	
	
	ГруппаФормы = Форма.Элементы.Найти(ИмяГруппы);
	
	Если ГруппаФормы <> Неопределено Тогда
		ТаблицаСостава             = Форма.Элементы.Вставить(ИмяТЗ, Тип("ТаблицаФормы"), ГруппаФормы);
		ТаблицаСостава.ПутьКДанным = ИмяТЗ;
		ДобавитьКолонкуТаблицыФормы("ИмяПоля",                   "Имя поля", Форма, ТаблицаСостава, ИмяТЗ);
		ДобавитьКолонкуТаблицыФормы("Синоним",                   "Синоним",  Форма, ТаблицаСостава, ИмяТЗ);
		ДобавитьКолонкуТаблицыФормы("ПредставлениеТипаЗначения", "Тип",      Форма, ТаблицаСостава, ИмяТЗ);
		ТаблицаСостава.УстановитьДействие("ПередНачаломИзменения",   "лм_УниверсальныеСтруктурыДанных_ПередНачаломИзменения");
		ТаблицаСостава.УстановитьДействие("ПередНачаломДобавления",  "лм_УниверсальныеСтруктурыДанных_ПередНачаломДобавления");
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьЭлементыСпискаСтруктур(Форма, ИмяГруппы)
	
	ИмяСпискаСтруктур = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяСпискаСтруктур();
	
	ГруппаФормы = Форма.Элементы.Найти(ИмяГруппы);
	
	Если ГруппаФормы <> Неопределено Тогда
		ТаблицаСтруктур = Форма.Элементы.Вставить(ИмяСпискаСтруктур, Тип("ТаблицаФормы"), ГруппаФормы);
		ТаблицаСтруктур.ПутьКДанным = ИмяСпискаСтруктур;
		ДобавитьКолонкуТаблицыФормы("Наименование", "Наименование", Форма, ТаблицаСтруктур, ИмяСпискаСтруктур);
		ТаблицаСтруктур.УстановитьДействие("ПриАктивизацииСтроки",   "лм_УниверсальныеСтруктурыДанных_ПриАктивизацииСтрокиСпискаСтруктур");
		ТаблицаСтруктур.УстановитьДействие("ПередНачаломДобавления", "лм_УниверсальныеСтруктурыДанных_ПередНачаломДобавленияСтрокиСпискаСтруктур");
		ТаблицаСтруктур.УстановитьДействие("ПриИзменении",           "лм_УниверсальныеСтруктурыДанных_ПриИзмененииСтрокиСпискаСтруктур");
	КонецЕсли;		
	
КонецПроцедуры

Процедура ДобавитьКолонкуТаблицыФормы(ИмяПоля, Заголовок, Форма, ТаблицаФормы, ИмяТаблицы)
	
	НовыйЭлемент             = Форма.Элементы.Вставить(ИмяТаблицы + ИмяПоля, Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок   = Заголовок;
	НовыйЭлемент.ПутьКДанным = ИмяТаблицы + "." + ИмяПоля;
		
КонецПроцедуры

Функция СформироватьОписаниеТипаЛюбаяСсылка()
	
	Описание = Новый ОписаниеТипов;
	Описание = Новый ОписаниеТипов(Описание, Справочники.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, Документы.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, Перечисления.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, ПланыСчетов.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, Задачи.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, ПланыОбмена.ТипВсеСсылки().Типы());	
	
	Возврат Описание;
	
КонецФункции

Функция СформироватьСтруктуруОписанийТипов()
	
	СтруктураОписаний = Новый Структура;
	
	СтруктураОписаний.Вставить("ОписаниеТиповСтрока",            Новый ОписаниеТипов("Строка"));
	СтруктураОписаний.Вставить("ОписаниеТиповЧисло",             Новый ОписаниеТипов("Число"));
	СтруктураОписаний.Вставить("ОписаниеТиповБулево",            Новый ОписаниеТипов("Булево"));
	СтруктураОписаний.Вставить("ОписаниеТиповИдентификатор",     Новый ОписаниеТипов("УникальныйИдентификатор"));
	СтруктураОписаний.Вставить("ОписаниеТиповТипЗначения",       Новый ОписаниеТипов("ОписаниеТипов"));
	СтруктураОписаний.Вставить("ОписаниеТиповВладелецСтруктуры", Метаданные.ОпределяемыеТипы.лм_ВладелецУниверсальнойСтруктурыДанных.Тип);
	СтруктураОписаний.Вставить("ОписаниеТиповВидСправочника",    Новый ОписаниеТипов("СправочникСсылка.лм_ВидыУниверсальныхСправочников"));
	
	ОписаниеТиповЗначение 	 = СформироватьОписаниеТипаЛюбаяСсылка();
	ОписаниеТиповЗначение    = Новый ОписаниеТипов(ОписаниеТиповЗначение, "СписокЗначений");
	ОписаниеТиповЗначение    = Новый ОписаниеТипов(ОписаниеТиповЗначение, "Булево");
	ОписаниеТиповЗначение    = Новый ОписаниеТипов(ОписаниеТиповЗначение, "Строка");
	ОписаниеТиповЗначение    = Новый ОписаниеТипов(ОписаниеТиповЗначение, "Дата");
	ОписаниеТиповЗначение    = Новый ОписаниеТипов(ОписаниеТиповЗначение, "Число");
	
	СтруктураОписаний.Вставить("ОписаниеТиповЗначение", ОписаниеТиповЗначение);
	
	Возврат СтруктураОписаний;
	
КонецФункции

Процедура СформироватьТаблицуСвойствРеквизита(МассивРеквизитов, ИмяТЗ, Описания)
	
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ИмяПоля",                  Описания.ОписаниеТиповСтрока,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Синоним",                  Описания.ОписаниеТиповСтрока,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ТипЗначения",              Описания.ОписаниеТиповТипЗначения,    ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Идентификатор",            Описания.ОписаниеТиповИдентификатор,  ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "МногострочноеПолеВвода",   Описания.ОписаниеТиповЧисло,          ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ВыводитьВВидеГиперссылки", Описания.ОписаниеТиповБулево,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Подсказка",                Описания.ОписаниеТиповСтрока,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Комментарий",              Описания.ОписаниеТиповСтрока,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ФорматСвойства",           Описания.ОписаниеТиповСтрока,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ЗаполнятьОбязательно",     Описания.ОписаниеТиповБулево,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Динамический",     		   Описания.ОписаниеТиповБулево,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Нередактируемый",     	   Описания.ОписаниеТиповБулево,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Метка",        	           Описания.ОписаниеТиповСтрока,         ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ВидСправочника",           Описания.ОписаниеТиповВидСправочника, ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ПредставлениеТипаЗначения",Описания.ОписаниеТиповСтрока,         ИмяТЗ);
		
КонецПроцедуры

Процедура СформироватьТаблицуЗависимостейРеквизита(МассивРеквизитов, ИмяТЗ, Описания)
	
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Представление",		Описания.ОписаниеТиповСтрока,        ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Условие",           Описания.ОписаниеТиповСтрока,        ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Значение",       	Описания.ОписаниеТиповЗначение,      ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Реквизит",       	Описания.ОписаниеТиповСтрока,        ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ТипЗначения",       Описания.ОписаниеТиповТипЗначения,   ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "ЗависимоеСвойство", Описания.ОписаниеТиповСтрока,        ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "РежимВыбора",       Описания.ОписаниеТиповСтрока,   	 ИмяТЗ);
	ДобавитьКолонкуРеквизита(МассивРеквизитов, "Идентификатор",     Описания.ОписаниеТиповИдентификатор, ИмяТЗ);
		
КонецПроцедуры

Функция ПолучитьСтруктурыВладельца(ВладелецСтруктуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_УниверсальныеСтруктурыДанных.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.лм_УниверсальныеСтруктурыДанных КАК лм_УниверсальныеСтруктурыДанных
	               |ГДЕ
	               |	лм_УниверсальныеСтруктурыДанных.ВладелецСтруктуры = &ВладелецСтруктуры";
	
	Запрос.УстановитьПараметр("ВладелецСтруктуры", ВладелецСтруктуры);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьРеквизитыПоУниверсальнойСтруктуре(Форма, УниверсальнаяСтруктура)
	
	МассивРеквизитов = Новый Массив;
	ОписаниеТипаСтруктура = Новый ОписаниеТипов("Структура");
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		СоответствиеРеквизитов.Вставить(Реквизит.Идентификатор, Реквизит);
	КонецЦикла;
				
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		Если Реквизит.ТипЗначения = ОписаниеТипаСтруктура Тогда
			РеквизитФормы = Новый РеквизитФормы("лм_" + Реквизит.ИмяПоля, Новый ОписаниеТипов("ТаблицаЗначений"),, Реквизит.Синоним);	
			МассивРеквизитов.Добавить(РеквизитФормы);
		ИначеЕсли ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
			ИмяТаблицы   = "лм_" + СоответствиеРеквизитов[Реквизит.ОсновнойИдентификатор].ИмяПоля;
			ДобавитьКолонкуРеквизита(МассивРеквизитов, Реквизит.ИмяПоля, ПолучитьТипЗначенияРеквизита(Реквизит.ТипЗначения), ИмяТаблицы);
		Иначе		
			РеквизитФормы = Новый РеквизитФормы("лм_" + Реквизит.ИмяПоля, ПолучитьТипЗначенияРеквизита(Реквизит.ТипЗначения),, Реквизит.Синоним);
			МассивРеквизитов.Добавить(РеквизитФормы);
		КонецЕсли;
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

Процедура ИнициализироватьРеквизитАдресаСоответствияЗависимых(Форма)
	
	ИмяРеквизитаАдреса = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаСоответствияЗависимостей();
		
	МассивРеквизитов = Новый Массив;
	РеквизитАдреса   = Новый РеквизитФормы(ИмяРеквизитаАдреса, Новый ОписаниеТипов("Строка"));
	МассивРеквизитов.Добавить(РеквизитАдреса);	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);	
	Форма[ИмяРеквизитаАдреса] = ПоместитьВоВременноеХранилище(Новый Соответствие, Новый УникальныйИдентификатор);
		
КонецПроцедуры

Процедура ИнициализироватьРеквизитАдресаСоответствияРеквизитов(Форма)
	
	ИмяРеквизитаАдреса = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаСоответствияРеквизитов();
		
	МассивРеквизитов = Новый Массив;
	РеквизитАдреса   = Новый РеквизитФормы(ИмяРеквизитаАдреса, Новый ОписаниеТипов("Строка"));
	МассивРеквизитов.Добавить(РеквизитАдреса);	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);	
	Форма[ИмяРеквизитаАдреса] = ПоместитьВоВременноеХранилище(Новый Соответствие, Новый УникальныйИдентификатор);
			
КонецПроцедуры

Процедура СформироватьСоответствиеЗависимыхРеквизитовНаФорме(Форма, СоответствиеЗависимых)
	
	ИмяРеквизитаАдреса        = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаСоответствияЗависимостей();		
	Форма[ИмяРеквизитаАдреса] = ПоместитьВоВременноеХранилище(СоответствиеЗависимых, Новый УникальныйИдентификатор);
		
КонецПроцедуры

Процедура СформироватьСоответствиеРеквизитовНаФорме(Форма, СоответствиеРеквизитов)
	
	ИмяРеквизитаАдреса        = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаСоответствияРеквизитов();		
	Форма[ИмяРеквизитаАдреса] = ПоместитьВоВременноеХранилище(СоответствиеРеквизитов, Новый УникальныйИдентификатор);
			
КонецПроцедуры

Процедура СформироватьИмяЭлементаРазмещенияНаФорме(Форма, ИмяЭлементаДляРазмещения)
	
	ИмяРеквизитаЭлементРазмещения = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаЭлементРазмещения();
	
	МассивРеквизитов          = Новый Массив;
	РеквизитЭлементРазмещения = Новый РеквизитФормы(ИмяРеквизитаЭлементРазмещения, Новый ОписаниеТипов("Строка"));
	МассивРеквизитов.Добавить(РеквизитЭлементРазмещения);	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);		
	Форма[ИмяРеквизитаЭлементРазмещения] = ИмяЭлементаДляРазмещения;
	
КонецПроцедуры

Процедура СформироватьУниверсальныеСтруктурыНаФорме(Форма, МассивСтруктур, СлужебныеРеквизитыДобавлены)
	
	ИмяРеквизитаАдреса = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры();
	
	Если Не СлужебныеРеквизитыДобавлены Тогда
		МассивРеквизитов = Новый Массив;
		РеквизитАдреса   = Новый РеквизитФормы(ИмяРеквизитаАдреса, Новый ОписаниеТипов("Строка"));
		МассивРеквизитов.Добавить(РеквизитАдреса);	
		Форма.ИзменитьРеквизиты(МассивРеквизитов);
	КонецЕсли;
	
	Форма[ИмяРеквизитаАдреса] = ПоместитьВоВременноеХранилище(МассивСтруктур, Новый УникальныйИдентификатор);
		
КонецПроцедуры

Функция СформироватьСоответствиеРеквизитов(УниверсальнаяСтруктура)
	
	Результат = Новый Соответствие;
	
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		Результат.Вставить(Реквизит.ИмяПоля, Реквизит);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьУсловиеЗависимости(СтруктураЗависимостей, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия, Условие)
	
	Если СтруктураЗависимостей = Неопределено Тогда
		ЗначенияПараметров = Новый Соответствие;
		Если Условие = "В списке"
			Или Условие = "Не в списке" Тогда
			Значение = Новый СписокЗначений;
			Значение.Добавить(СтрокаТаблицы.Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
		ЗначенияПараметров.Вставить(ПутьКРеквизиту, Значение);
		СтруктураЗависимостей = Новый Структура;
		СтруктураЗависимостей.Вставить("КодУсловия", КодУсловия);
		СтруктураЗависимостей.Вставить("ЗначенияПараметров", ЗначенияПараметров);
	ИначеЕсли (Условие = "В списке" Или Условие = "Не в списке") Тогда
		Если ТипЗнч(СтруктураЗависимостей.ЗначенияПараметров[ПутьКРеквизиту]) = Тип("СписокЗначений") Тогда
			СтруктураЗависимостей.ЗначенияПараметров[ПутьКРеквизиту].Добавить(СтрокаТаблицы.Значение);			
		Иначе
			Значение = Новый СписокЗначений;
			Значение.Добавить(СтрокаТаблицы.Значение);
			СтруктураЗависимостей.ЗначенияПараметров.Вставить(ПутьКРеквизиту, Значение);
			СтруктураЗависимостей.КодУсловия = СтруктураЗависимостей.КодУсловия + " И " + КодУсловия;
		КонецЕсли;
	Иначе
		СтруктураЗависимостей.КодУсловия = СтруктураЗависимостей.КодУсловия + " И " + КодУсловия;
		СтруктураЗависимостей.ЗначенияПараметров.Вставить(ПутьКРеквизиту, СтрокаТаблицы.Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПустойИдентификатор()
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Возврат ПустойИдентификатор;	
	
КонецФункции

Процедура ДобавитьЗаписьРегистра(ИмяРегистра, 
								НаборЗаписей, 
								МассивРеквизитов, 
								ИдентификаторСтруктуры, 
								ИдентификаторЭлемента, 
								Элемент, 
								ЭтоРеквизитТаблицы = Ложь, 
								ИдентификаторСтрокиТаблицы = Неопределено, 
								ОсновнойИдентификатор = Неопределено)

	Префикс            = "лм_УниверсальныеСтруктуры";
	мсвПримитивныеТипы = СтрРазделить("Дата,Строка,Число,Булево", ",", Ложь);
	
	Если Не ЭтоРеквизитТаблицы Тогда
		Отбор = Новый Структура("ИмяПоля,ОсновнойИдентификатор", Элемент.Ключ, ПолучитьПустойИдентификатор());
	Иначе
		Отбор = Новый Структура("ИмяПоля,ОсновнойИдентификатор", Элемент.Ключ, ОсновнойИдентификатор);
	КонецЕсли;
	
	СтрокиОтбора           = лм_УниверсальныеСтруктурыДанныхКлиентСервер.НайтиСтрокиТаблицыОбъекта(МассивРеквизитов, Отбор);
	
	Если Не СтрокиОтбора.Количество() Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторРеквизита = СтрокиОтбора[0].Идентификатор;
	ТипЗначенияСтрокой     = Строка(ТипЗнч(Элемент.Значение));
	ТипЗначенияСтрокой     = ?(мсвПримитивныеТипы.Найти(ТипЗначенияСтрокой) <> Неопределено, ТипЗначенияСтрокой, "Ссылка");
	СтрокаИмяРегистра      = Префикс + ТипЗначенияСтрокой;
	Если СтрокаИмяРегистра = ИмяРегистра Тогда
		Запись                        = НаборЗаписей.Добавить();
		Запись.ИдентификаторСтруктуры = ИдентификаторСтруктуры;
		Запись.ИдентификаторЭлемента  = ИдентификаторЭлемента;
		Запись.ИдентификаторРеквизита = ИдентификаторРеквизита;
		Если ЭтоРеквизитТаблицы Тогда
			Запись.ИдентификаторСтрокиТаблицы = ИдентификаторСтрокиТаблицы;	
		КонецЕсли;
		Запись.Значение               = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьЗапросКолонки(Сч, ПакетЗапросов, ИмяПоля, СоответствиеРеквизитов, Запрос, ЗначениеОтбора = Неопределено)
	
	ИмяВТ              = "ВТ_ДанныеКолонки";	
	мсвПримитивныеТипы = СтрРазделить("Дата,Строка,Число,Булево", ",", Ложь);	
	ПсевдонимТаблицы   = ИмяВТ + "_" + ИмяПоля;
		
	Операторы          = ПакетЗапросов.Операторы[0];
	Реквизит           = СоответствиеРеквизитов[ИмяПоля];
	ТипЗначенияСтрокой = Строка(Реквизит.ТипЗначения);
	ТипЗначенияСтрокой = ?(мсвПримитивныеТипы.Найти(ТипЗначенияСтрокой) <> Неопределено, ТипЗначенияСтрокой, "Ссылка");
	СтрокаИмяРегистра  = "лм_УниверсальныеСтруктуры" + ТипЗначенияСтрокой;
	Операторы.Источники.Добавить("РегистрСведений." + СтрокаИмяРегистра, ПсевдонимТаблицы);
	Операторы.ВыбираемыеПоля.Добавить("ИдентификаторЭлемента");
	Операторы.ВыбираемыеПоля.Добавить("ИдентификаторСтрокиТаблицы");
	Операторы.ВыбираемыеПоля.Добавить("Значение");
	Операторы.Отбор.Добавить(ПсевдонимТаблицы + ".ИдентификаторСтруктуры = &ИдентификаторСтруктуры");
	КолонкаСтрокой = Строка(Формат(Сч + 1, "ЧРГ=0"));
	
	Если ЗначениеОтбора <> Неопределено Тогда
		Операторы.Отбор.Добавить(ПсевдонимТаблицы + ".Значение = &Параметр_Значение_" + ИмяПоля);
		Запрос.УстановитьПараметр("Параметр_Значение_" + ИмяПоля, ЗначениеОтбора);
	КонецЕсли;
	
	Операторы.Отбор.Добавить(ПсевдонимТаблицы + ".ИдентификаторРеквизита = &Параметр_Реквизит_" + КолонкаСтрокой);
	Запрос.УстановитьПараметр("Параметр_Реквизит_" + КолонкаСтрокой, Реквизит.Идентификатор);
	ПакетЗапросов.ТаблицаДляПомещения = ПсевдонимТаблицы;
		
КонецПроцедуры

Функция ПолучитьТипЗначенияРеквизита(ОписаниеТипаРеквизита)
	
	Если ОписаниеТипаРеквизита.СодержитТип(Тип("СправочникСсылка.лм_ВидыУниверсальныхСправочников")) Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.лм_УниверсальныеСправочники");
	Иначе
		Возврат ОписаниеТипаРеквизита;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПараметрыВыбора(Реквизит, НовыйЭлемент)
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Реквизит.ВидСправочника);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	НовыйЭлемент.ПараметрыВыбора = НовыеПараметры;
 	
КонецПроцедуры

Процедура УстановитьОбработчикПриСменеСтраницы(Форма, ИмяГруппы)
		
	ЭлементГруппаСтруктура = Форма.Элементы.Найти(ИмяГруппы);
	
	Если ЭлементГруппаСтруктура = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЭлементСтраницы = Неопределено;
	ЭлементСтраница = Неопределено;
	ТекЭлемент      = ЭлементГруппаСтруктура;
		
	Пока ТекЭлемент.Родитель <> Неопределено Цикл		
		ТекЭлемент = ТекЭлемент.Родитель;
		
		Если ТекЭлемент.Вид = ВидГруппыФормы.Страница Тогда
			ЭлементСтраница = ТекЭлемент;
		КонецЕсли;
		
		Если ТекЭлемент.Вид = ВидГруппыФормы.Страницы Тогда
			ЭлементСтраницы = ТекЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементСтраницы = Неопределено ИЛИ ЭлементСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаИмяСтраницыУниверсальнойСтруктуры()] = ЭлементСтраница.Имя;
	
	ЭлементСтраницы.УстановитьДействие("ПриСменеСтраницы", "лм_УниверсальныеСтруктурыДанных_ПодключаемыйПриСменеСтраницы");
	
КонецПроцедуры

Процедура ДополнитьСоставЭлементовФормы(Форма, СоответствиеЗависимых, УниверсальнаяСтруктура, ИмяЭлементаДляРазмещения)
	
	ДанныеЗависимостей = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ПолучитьДанныеЗависимостей(Форма, СоответствиеЗависимых);	
	
	СоответствиеДобавляемых = Новый Соответствие;
	Для Каждого ДанныеЗависимости Из ДанныеЗависимостей Цикл
		Если ДанныеЗависимости.Значение.Видимость = Истина Тогда
			СоответствиеДобавляемых.Вставить(Сред(ДанныеЗависимости.Ключ, 4), Истина);
		КонецЕсли;
	КонецЦикла;

	СформироватьЭлементыФормыПоУниверсальнойСтруктуре(Форма, УниверсальнаяСтруктура, Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаЭлементРазмещения()],, СоответствиеДобавляемых);	
	
КонецПроцедуры

Функция ПолучитьСтруктурыРеквизитаВладельца(Форма, ЭлементРеквизитаВладельца)
	
	Результат = Новый Массив;
	
	Если ЭлементРеквизитаВладельца = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Владелец = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ПолучитьЗначениеПоПути(Форма, ЭлементРеквизитаВладельца.ПутьКДанным);
			
	Результат = ПолучитьСтруктурыВладельца(Владелец); 
	
	Возврат Результат;
		
КонецФункции

Процедура СформироватьПутьКДаннымРеквизитаВладельцаНаФорме(Форма, ЭлементРеквизитаВладельца)
	
	Если ЭлементРеквизитаВладельца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаПутьКДаннымРеквизитаВладельца();
	
	МассивРеквизитов                      = Новый Массив;
	РеквизитИмяЭлементаРеквизитаВладельца = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"));
	МассивРеквизитов.Добавить(РеквизитИмяЭлементаРеквизитаВладельца);	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);		
	Форма[ИмяРеквизита] = ЭлементРеквизитаВладельца.ПутьКДанным;
		
КонецПроцедуры

Процедура СформироватьИдентификаторЭлементаНаФорме(Форма, ИдентификаторЭлемента)
	
	ИмяРеквизита = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаИдентификаторЭлементаУниверсальнойСтруктуры();
	
	МассивРеквизитов      = Новый Массив;
	РеквизитИдентификатор = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("УникальныйИдентификатор"));
	МассивРеквизитов.Добавить(РеквизитИдентификатор);	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	Форма[ИмяРеквизита] = ИдентификаторЭлемента;
			
КонецПроцедуры

Процедура УстановитьОбработчикИзмененияРеквизитаВладельца(ЭлементРеквизитаВладельца)
	
	Если ЭлементРеквизитаВладельца = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЭлементРеквизитаВладельца.УстановитьДействие("ПриИзменении", "лм_УниверсальныеСтруктурыДанных_ПриИзмененииРеквизитаВладельца");	
	
КонецПроцедуры

Функция СлужебныеРеквизитыДобавлены(Форма)
	
	ИмяРеквизитаАдреса = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаСоответствияЗависимостей();
	РеквизитыФормы     = Форма.ПолучитьРеквизиты();
	
	Результат = Ложь;
	Для Каждого Реквизит Из РеквизитыФормы Цикл
		Если Реквизит.Имя = ИмяРеквизитаАдреса Тогда
			Возврат Истина;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти