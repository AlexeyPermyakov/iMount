
&НаКлиенте
Перем СоответствиеТиповТочек;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// НачалоЗамераПроизводительности
НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
// Конец НачалоЗамераПроизводительности
	
	Если ЗначениеЗаполнено(Объект.ИсходныйШаблон) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КартаМаршрута = Объект.ИсходныйШаблон.КартаМаршрута.Получить();
		ПолучитьСохраненныеТочкиМаршрута(Объект.ИсходныйШаблон);
		ПолучитьИконкиДействий(Объект.ИсходныйШаблон);
		ЗаполнитьПараметрыШаблона(Объект.ИсходныйШаблон);
		ЗагрузитьНастройкиПредметов(Объект.ИсходныйШаблон);
		РассчитатьВремяВыполнения();
	КонецЕсли;
	
	// лм_УниверсальныеСтруктурыДанных
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СсылкаНового = Справочники.лм_ШаблоныБизнесПроцессов.ПолучитьСсылку(Новый УникальныйИдентификатор());
	КонецЕсли;
	лм_УниверсальныеСтруктурыДанных.ФормаНастроекПриСозданииНаСервере(ЭтаФорма, СформироватьПараметрыФормыНастроек());
// Конец лм_УниверсальныеСтруктурыДанных

	Если ПустаяСтрока(АдресСоответствияНастроекТочек) Тогда
		СоответствиеНастроекТочек = Новый Соответствие();
		АдресСоответствияНастроекТочек = ПоместитьВоВременноеХранилище(СоответствиеНастроекТочек, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ПустаяСтрока(АдресСоответствияНастроекПредметов) Тогда
		СоответствиеНастроекПредметов = Новый Соответствие();
		АдресСоответствияНастроекПредметов = ПоместитьВоВременноеХранилище(СоответствиеНастроекПредметов, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ПустаяСтрока(АдресСоответствияИконокДействий) Тогда
		СоответствиеИконокДействий = Новый Соответствие();
		АдресСоответствияИконокДействий = ПоместитьВоВременноеХранилище(СоответствиеИконокДействий, УникальныйИдентификатор);
	КонецЕсли;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.ПредметЗадачи.Тип;
	ДоступныеТипы = ОписаниеТипов.Типы();
	СписокВыбора = Элементы.ПредметыТипПредмета.СписокВыбора;
	Для Каждого Тип Из ДоступныеТипы Цикл
		ЗначениеВыбора = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип);
		Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
			СписокВыбора.Добавить(ЗначениеВыбора);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("лм_ЗахватОбъектов") Тогда
		Элементы.ПредметыБлокировать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.лм_СтатусыШаблонов.Черновик;
	КонецЕсли;
	
	// ЗавершениеЗамераПроизводительности
ОценкаПроизводительности.ЗакончитьЗамерВремени("Бизнес-процесс.ОткрытиеФормыШаблона", НачалоЗамера);
// Конец ЗавершениеЗамераПроизводительности	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СоответствиеТиповТочек = СоответствиеТиповТочек();
	ОбновитьИдентификаторыТочекМаршрута();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	КартаМаршрута = ТекущийОбъект.КартаМаршрута.Получить();
	ПолучитьСохраненныеТочкиМаршрута(Объект.Ссылка);
	ПолучитьИконкиДействий(Объект.Ссылка);
	ЗаполнитьПараметрыШаблона(Объект.Ссылка);
	ЗагрузитьНастройкиПредметов(Объект.Ссылка);
	РассчитатьВремяВыполнения();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// лм_УниверсальныеСтруктурыДанных
	Если ТекущийОбъект.ЭтоНовый() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
// Конец лм_УниверсальныеСтруктурыДанных

	МассивОшибок = Новый Массив();
	ЭлементыСОшибками = Новый Массив();
	ЗаписьВозможна = (Объект.Статус = Перечисления.лм_СтатусыШаблонов.Черновик) 
				ИЛИ КартаМаршрутаВалидна(МассивОшибок, ЭлементыСОшибками);
	ОтобразитьОшибкиКартыМаршрута(ЭлементыСОшибками);
	Если ЗаписьВозможна Тогда
		ТекущийОбъект.КартаМаршрута = Новый ХранилищеЗначения(КартаМаршрута);		
	Иначе
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Обнаружены ошибки в карте маршрута:" + Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС);
		Сообщение.Сообщить();
	КонецЕсли;
	
	МассивОшибок.Очистить();
	ПараметрыДляСохранения = СформироватьПараметрыШаблона(МассивОшибок);
	Если МассивОшибок.Количество() = 0 Тогда
		ТекущийОбъект.Параметры = Новый ХранилищеЗначения(ПараметрыДляСохранения);
	Иначе
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Некорректные имена параметров: " + СтрСоединить(МассивОшибок, ", ") + "." + Символы.ПС 
			+ "Имя параметра может содержать только буквы, цифры и символ подчеркивания, и не может начинаться с цифры.";
		Сообщение.Сообщить();
	КонецЕсли;
	
	СоответствиеНастроекПредметов = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекПредметов);
	СтрокиКУдалению = Новый Массив();
	Для Каждого Предмет Из ТекущийОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(Предмет.ТипПредмета) Тогда
			НастройкаОтбора = СоответствиеНастроекПредметов.Получить(Предмет.ТипПредмета);
			Предмет.УсловияОтбора = Новый ХранилищеЗначения(НастройкаОтбора);
		Иначе
			СтрокиКУдалению.Добавить(ТекущийОбъект.Предметы.Индекс(Предмет));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ИндексСтроки Из СтрокиКУдалению Цикл
		ТекущийОбъект.Предметы.Удалить(ИндексСтроки);
	КонецЦикла;
	
	Если Отказ <> Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	лм_БизнесПроцесс.Ссылка КАК Ссылка
		               |ИЗ
		               |	БизнесПроцесс.лм_БизнесПроцесс КАК лм_БизнесПроцесс
		               |ГДЕ
		               |	лм_БизнесПроцесс.Шаблон = &Шаблон
		               |	И лм_БизнесПроцесс.НомерВерсии = &НомерВерсии";
		Запрос.УстановитьПараметр("Шаблон", ТекущийОбъект.Ссылка);
		Запрос.УстановитьПараметр("НомерВерсии", ТекущийОбъект.НомерВерсии);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТекущийОбъект.НомерВерсии = ТекущийОбъект.НомерВерсии + 1;
		КонецЕсли;
		
		ЗаписьКарты = РегистрыСведений.лм_ВерсииКартыМаршрута.СоздатьМенеджерЗаписи();
		ЗаписьКарты.Шаблон = ТекущийОбъект.Ссылка;
		ЗаписьКарты.НомерВерсии = ТекущийОбъект.НомерВерсии;
		ЗаписьКарты.КартаМаршрута = Новый ХранилищеЗначения(КартаМаршрута);
		ЗаписьКарты.Записать();
	КонецЕсли;
	
	ТекущийОбъект.ВремяВыполнения = ВремяВыполненияЧасы * 60 + ВремяВыполненияМинуты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаписатьТочкиМаршрута();
	ЗаписатьРасширенныеНастройки();
	
	МассивСвязей = Новый Массив();
	Для Каждого ЭлементСхемы Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл		 
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			ИсходнаяТочка = ?(ЭлементСхемы.НачалоЭлемент <> Неопределено,
							ТочкиМаршрута.НайтиСтроки(Новый Структура("ИмяТочки", ЭлементСхемы.НачалоЭлемент.Имя))[0].ИдентификаторТочки,
							Неопределено);
			КонечнаяТочка = ?(ЭлементСхемы.КонецЭлемент <> Неопределено,
							ТочкиМаршрута.НайтиСтроки(Новый Структура("ИмяТочки", ЭлементСхемы.КонецЭлемент.Имя))[0].ИдентификаторТочки,
							Неопределено);
			НаименованиеВыхода = "";
			НаименованиеВарианта = "";
			УсловиеВыполнено = Ложь;
			Если ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
				НаименованиеВыхода = ЭлементСхемы.Наименование;
			КонецЕсли;
			Если ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
				НаименованиеВарианта = ЭлементСхемы.НачалоВариант.Наименование;
			КонецЕсли;
			Если ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыУсловие") Тогда
				УсловиеВыполнено = (СтрСравнить(ЭлементСхемы.Наименование, "Да") = 0);
			КонецЕсли;
			СоответствиеИконокДействий = ПолучитьИзВременногоХранилища(АдресСоответствияИконокДействий);
			стрЗначениеСоответствия = СоответствиеИконокДействий.Получить(ЭлементСхемы.Имя);
			СтруктураСвязи = Новый Структура();
			СтруктураСвязи.Вставить("ИсходнаяТочка", 				ИсходнаяТочка);
			СтруктураСвязи.Вставить("КонечнаяТочка", 				КонечнаяТочка);
			СтруктураСвязи.Вставить("НаименованиеВыхода", 			НаименованиеВыхода);
			СтруктураСвязи.Вставить("НаименованиеВарианта", 		НаименованиеВарианта);
			СтруктураСвязи.Вставить("УсловиеВыполнено", 			УсловиеВыполнено);
			СтруктураСвязи.Вставить("ИконкаДействия", 				?(стрЗначениеСоответствия = Неопределено, Неопределено, стрЗначениеСоответствия.ИконкаДействия));
			СтруктураСвязи.Вставить("ИмяЭлементаСхемы",				ЭлементСхемы.Имя);
			СтруктураСвязи.Вставить("ОбработчикПослеЗавершения",	?(стрЗначениеСоответствия = Неопределено, Неопределено, стрЗначениеСоответствия.ОбработчикПослеЗавершения));
			МассивСвязей.Добавить(СтруктураСвязи);
		КонецЕсли;		 
	КонецЦикла;                                                                 
	ЗаписатьСценарий(МассивСвязей, Объект.Ссылка);
	
	// лм_УниверсальныеСтруктурыДанных
	лм_УниверсальныеСтруктурыДанныхКлиент.ЗаписатьДанныеСтруктуры(ЭтаФорма);
// Конец лм_УниверсальныеСтруктурыДанных

	Оповестить("лм_БизнесПроцессы_ЗаписьШаблона");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// лм_УниверсальныеСтруктурыДанных 
	лм_УниверсальныеСтруктурыДанныхКлиент.ДобавитьИзменитьДанныеРеквизитаУниверсальнойСтруктуры(ИмяСобытия, Параметр, ЭтаФорма);
// Конец лм_УниверсальныеСтруктурыДанных

	Если ИмяСобытия = "ОткрытиеФормыРедактированияТочкиМаршрута" Тогда
		ВыполнитьОткрытиеФормыРедактированияТочкиМаршрута(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// НачалоЗамераПроизводительности
ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Бизнес-процесс.ЗаписьШаблона");
// Конец НачалоЗамераПроизводительности
		
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура КартаМаршрутаПриИзменении(Элемент)
	
	ОбновитьИдентификаторыТочекМаршрута();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаВыбор(Элемент)
	
	ТекущийЭлементСхемы = Элементы.КартаМаршрута.ТекущийЭлемент;
	Если ТекущийЭлементСхемы <> Неопределено Тогда
		ДанныеЭлемента = лм_БизнесПроцессыКлиентСервер.СтруктураЭлементаКартыМаршрута();
		
		Если ТипЗнч(ТекущийЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				ИЛИ ТипЗнч(ТекущийЭлементСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			ДанныеЭлемента.ИмяЭлемента 			= ТекущийЭлементСхемы.Имя;
			ДанныеЭлемента.НаименованиеЭлемента = ТекущийЭлементСхемы.Наименование;
			ДанныеЭлемента.ТипЭлемента 			= "Линия";
			Если ТекущийЭлементСхемы.НачалоЭлемент <> Неопределено
					И ТипЗнч(ТекущийЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
				ДанныеЭлемента.ЭтоДействие = Истина;
				СоответствиеИконокДействий = ПолучитьИзВременногоХранилища(АдресСоответствияИконокДействий);
				стрЗначениеСоответствия = СоответствиеИконокДействий.Получить(ТекущийЭлементСхемы.Имя);
				
				Если стрЗначениеСоответствия <> Неопределено Тогда
					ДанныеЭлемента.ИконкаДействия = стрЗначениеСоответствия.ИконкаДействия;
					ДанныеЭлемента.ОбработчикПослеЗавершения = стрЗначениеСоответствия.ОбработчикПослеЗавершения;
				КонецЕсли; 
			Иначе
				ДанныеЭлемента.ЭтоДействие = Ложь;
			КонецЕсли;

		Иначе
			СтрокаТочки = ТочкиМаршрута.НайтиСтроки(Новый Структура("ИмяТочки", ТекущийЭлементСхемы.Имя))[0];
			ДанныеЭлемента.ИмяЭлемента 					= СтрокаТочки.ИмяТочки;
			ДанныеЭлемента.НаименованиеЭлемента 		= СтрокаТочки.НаименованиеТочки;
			ДанныеЭлемента.ИдентификаторЭлемента        = СтрокаТочки.ИдентификаторТочки;
			ДанныеЭлемента.ТипЭлемента 					= СтрокаТочки.ТипТочки;
			ЗаполнитьЗначенияСвойств(ДанныеЭлемента, СтрокаТочки,, "ДанныеУсловия");
			
			Если СтрокаТочки.ТипТочки = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаУсловия") Тогда
				ДанныеЭлемента.ДанныеУсловия = СтрокаТочки.ДанныеУсловия;				
			ИначеЕсли СтрокаТочки.ТипТочки = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаОбработки") Тогда		
				СоответствиеНастроекТочек = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекТочек);
				ДанныеЭлемента.ПараметрыОбъекты = Новый Массив();
				Для Каждого ЭлементСоответствия Из СоответствиеНастроекТочек Цикл
					НастройкиТочки = ЭлементСоответствия.Значение;
					Если НастройкиТочки.Свойство("ДействияОбработки") Тогда
						Если ЭлементСоответствия.Ключ = СтрокаТочки.ИдентификаторТочки Тогда
							ДанныеЭлемента.ДействияОбработки = НастройкиТочки.ДействияОбработки;
							ДанныеЭлемента.ПараметрыОбработки = НастройкиТочки.ПараметрыОбработки;
						КонецЕсли;
						Для Каждого ДействиеОбработки Из НастройкиТочки.ДействияОбработки Цикл
							Если ДействиеОбработки.ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.СозданиеОбъекта")
									И ДействиеОбработки.Настройка.Свойство("ИмяПараметра")
									И (ЭлементСоответствия.Ключ = СтрокаТочки.ИдентификаторТочки
										ИЛИ СтрНачинаетсяС(ДействиеОбработки.Настройка.ИмяПараметра, "ОбщиеПараметры.")) Тогда
								ДанныеЭлемента.ПараметрыОбъекты.Добавить(ДействиеОбработки.Настройка.ИмяПараметра);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				ДанныеЭлемента.ПараметрыШаблона = СформироватьПараметрыШаблона();
				ДанныеЭлемента.ТипыПредметов = Новый Массив();
				Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
					ДанныеЭлемента.ТипыПредметов.Добавить(СтрокаПредмета.ТипПредмета);
				КонецЦикла;
				
			ИначеЕсли СтрокаТочки.ТипТочки = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаДействия") Тогда
				СоответствиеНастроекТочек = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекТочек);
				НастройкиТочки = СоответствиеНастроекТочек.Получить(СтрокаТочки.ИдентификаторТочки);
				Если НастройкиТочки <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДанныеЭлемента, НастройкиТочки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		ДанныеЭлемента.Шаблон = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНового);		
		
		ПараметрыФормы = Новый Структура("ДанныеЭлемента", ДанныеЭлемента);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияЭлемента", ЭтотОбъект);
		ОткрытьФорму("Справочник.лм_ШаблоныБизнесПроцессов.Форма.ФормаЭлементаМаршрута", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаПриАктивизации(Элемент)
	
	ТекущийЭлемент = Элементы.КартаМаршрута;
	ЭлементСхемы = Элементы.КартаМаршрута.ТекущийЭлемент;
	ЭтоТочкаПодпроцесса = (ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс"));
	Элементы.ПерейтиКШаблонуПодпроцесса.Видимость = ЭтоТочкаПодпроцесса;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыТипПредметаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ТипПредмета) 
			И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущиеДанные.Блокировать = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыТипПредметаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипПредмета) Тогда
		СтрокиСВыбраннымЗначением = Объект.Предметы.НайтиСтроки(Новый Структура("ТипПредмета", ТекущиеДанные.ТипПредмета));
		Если СтрокиСВыбраннымЗначением.Количество() > 1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Тип предмета """ + Строка(ТекущиеДанные.ТипПредмета) + """ уже был выбран!";
			Сообщение.Сообщить();
			ТекущиеДанные.ТипПредмета = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипПредмета) Тогда
		ТекущиеДанные.НастройкаДоступна = Истина;
	Иначе
		ТекущиеДанные.НастройкаДоступна = Ложь;
		ТекущиеДанные.Блокировать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныеДанные = Объект.Предметы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ПредметыНастройки" 
			И ВыбранныеДанные.НастройкаДоступна Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("ТипПредмета", ВыбранныеДанные.ТипПредмета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаполненияНастроекПредмета", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипПредмета", ВыбранныеДанные.ТипПредмета);
		СоответствиеНастроекДействийОбработки = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекПредметов);
		ПараметрыФормы.Вставить("НастройкиОтбора", СоответствиеНастроекДействийОбработки.Получить(ВыбранныеДанные.ТипПредмета));
		
		ИмяФормыНастроек = "Справочник.лм_ШаблоныБизнесПроцессов.Форма.ФормаНастройкиОтбораПредметовБП";
		ОткрытьФорму(ИмяФормыНастроек, ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

// лм_УниверсальныеСтруктурыДанных

&НаКлиенте
Процедура лм_УниверсальныеСтруктурыДанных_ПередНачаломИзменения(Элемент, Отказ)
	
	лм_УниверсальныеСтруктурыДанныхКлиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма); 
		
КонецПроцедуры

&НаКлиенте
Процедура лм_УниверсальныеСтруктурыДанных_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	лм_УниверсальныеСтруктурыДанныхКлиент.ПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма); 
		
КонецПроцедуры

&НаКлиенте
Процедура лм_УниверсальныеСтруктурыДанных_ПодключаемыйПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИмяСтраницы                     = ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаИмяСтраницыУниверсальнойСтруктуры()];
	ДанныеСтруктурыИнициализированы = ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаДанныеСтруктурыИнициализированы()];
	
	Если Не ДанныеСтруктурыИнициализированы И ТекущаяСтраница.Имя = ИмяСтраницы Тогда
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, Новый УникальныйИдентификатор);
		ВыполнитьОтложеннуюИнициализациюДанныхСтруктуры();
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтложеннуюИнициализациюДанныхСтруктуры()
	
	лм_УниверсальныеСтруктурыДанных.ВыполнитьОтложеннуюИнициализациюДанныхСтруктуры(ЭтаФорма);
	
КонецПроцедуры

// Конец лм_УниверсальныеСтруктурыДанных

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновлятьРеквизитыЗадач(Команда)
	
	// Обновляем кэш универсальных структур.
	Состояние("Производится обновление реквизитов задач ...");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ Модифицированность Тогда
		ЭтаФорма.Записать();	
	КонецЕсли;

	Результат = ОбновитьСтруктуруКэшаУниверсальныхДанных();
	
	Если Результат.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = "Производится обновление реквизитов задач ...";
		
		ПараметрыОжидания.ВыводитьОкноОжидания  = Истина;
		ПараметрыОжидания.ВыводитьСообщения     = Истина;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеФоновогоЗадания", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШаблонуПодпроцесса(Команда)
	
	ЭлементСхемы = Элементы.КартаМаршрута.ТекущийЭлемент;
	Если ЭлементСхемы <> Неопределено
			И ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
			И ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
		СтрокаТочки = ТочкиМаршрута.НайтиСтроки(Новый Структура("ИмяТочки", ЭлементСхемы.Имя))[0];
		Если ЗначениеЗаполнено(СтрокаТочки.ШаблонПодпроцесса) Тогда
			ОткрытьФорму("Справочник.лм_ШаблоныБизнесПроцессов.Форма.ФормаЭлемента", Новый Структура("Ключ", СтрокаТочки.ШаблонПодпроцесса));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБизнесПроцесс(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		БизнесПроцесс = СоздатьБизнесПроцессНаСервере(Объект.Ссылка);
		Если БизнесПроцесс <> Неопределено Тогда
			лм_БизнесПроцессыКлиент.ПослеИнтерактивногоСозданияБизнесПроцесса(БизнесПроцесс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКартуМаршрута(Команда)
	
	МассивОшибок = Новый Массив();
	ЭлементыСОшибками = Новый Массив();
	Если КартаМаршрутаВалидна(МассивОшибок, ЭлементыСОшибками) Тогда
		ТекстСообщения = "Проверка пройдена";
	Иначе
		ТекстСообщения = "Обнаружены ошибки в карте маршрута:" + Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	ОтобразитьОшибкиКартыМаршрута(ЭлементыСОшибками);
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокТочекБП(Команда)
	
	МассивТочек = Новый Массив;
	Для Каждого ЭлементСхемы Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл
		стЭлемент = Новый Структура("Имя,Наименование");
		ЗаполнитьЗначенияСвойств(стЭлемент, ЭлементСхемы);
		МассивТочек.Добавить(стЭлемент);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("МассивТочек", МассивТочек);
	
	ОткрытьФорму("Справочник.лм_ШаблоныБизнесПроцессов.Форма.ФормаСпискаТочек", ПараметрыФормы);		
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиОповещений

&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияЭлемента(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЭлементСхемы              = КартаМаршрута.ЭлементыГрафическойСхемы[Результат.ИмяЭлемента];
		ЭлементСхемы.Наименование = Результат.НаименованиеЭлемента;
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДействие") Тогда
			ЭлементСхемы.Пояснение    = СформироватьСтрокуПояснения(Результат);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ИдентификаторЭлемента) Тогда
			СтрокаТочки = ТочкиМаршрута.НайтиСтроки(Новый Структура("ИдентификаторТочки", Результат.ИдентификаторЭлемента))[0];
			СтрокаТочки.ИмяТочки					 = Результат.ИмяЭлемента;
			СтрокаТочки.НаименованиеТочки			 = Результат.НаименованиеЭлемента;
			ЗаполнитьЗначенияСвойств(СтрокаТочки, Результат,, "ДанныеУсловия");
			
			ТипТочки = Результат.ТипЭлемента;
			Если ТипТочки = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаУсловия") Тогда
				СтрокаТочки.ДанныеУсловия = Результат.ДанныеУсловия;
			ИначеЕсли ТипТочки = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаОбработки") Тогда
				СоответствиеНастроек = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекТочек);
				НастройкиТочки = СоответствиеНастроек.Получить(Результат.ИдентификаторЭлемента);
				Если НастройкиТочки = Неопределено Тогда
					НастройкиТочки = Новый Структура("ДействияОбработки, ПараметрыОбработки");
				КонецЕсли;
				НастройкиТочки.ДействияОбработки = Результат.ДействияОбработки;
				НастройкиТочки.ПараметрыОбработки = Результат.ПараметрыОбработки;
				СоответствиеНастроек.Вставить(Результат.ИдентификаторЭлемента, НастройкиТочки);
				ПоместитьВоВременноеХранилище(СоответствиеНастроек, АдресСоответствияНастроекТочек);
				
			ИначеЕсли ТипТочки = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаДействия") Тогда
				СоответствиеНастроек = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекТочек);
				НастройкиТочки = СоответствиеНастроек.Получить(Результат.ИдентификаторЭлемента);
				ПоляСтруктуры = "ЗначениеАвтоподстановки,НастройкиОтображения,РасширенныеНастройки,ИспользоватьПочтовыеОповещения,ШаблонСообщения,ВремяВыполнения";
				МассивПолей = СтрРазделить(ПоляСтруктуры, ",", Ложь);
				Если НастройкиТочки = Неопределено Тогда
					НастройкиТочки = Новый Структура(ПоляСтруктуры);
				КонецЕсли;
				
				Для Каждого ПолеСтр Из МассивПолей Цикл
					Если Не НастройкиТочки.Свойство(ПолеСтр) Тогда
						НастройкиТочки.Вставить(ПолеСтр);	
					КонецЕсли;
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(НастройкиТочки, Результат);
				СоответствиеНастроек.Вставить(Результат.ИдентификаторЭлемента, НастройкиТочки);
				ПоместитьВоВременноеХранилище(СоответствиеНастроек, АдресСоответствияНастроекТочек);
				ЭлементСхемы.Групповая = СтрокаТочки.Групповая;
				
			КонецЕсли;
			
		ИначеЕсли Результат.ТипЭлемента = "Линия"
				И Результат.ЭтоДействие = Истина Тогда
			СоответствиеИконокДействий = ПолучитьИзВременногоХранилища(АдресСоответствияИконокДействий);
			стрЗначениеСоответствия = Новый Структура("ИконкаДействия, ОбработчикПослеЗавершения", Результат.ИконкаДействия, Результат.ОбработчикПослеЗавершения);
			СоответствиеИконокДействий.Вставить(Результат.ИмяЭлемента, стрЗначениеСоответствия);
			ПоместитьВоВременноеХранилище(СоответствиеИконокДействий, АдресСоответствияИконокДействий);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеЗаполненияНастроекПредмета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СоответствиеНастроекПредметов = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекПредметов);
		СоответствиеНастроекПредметов.Вставить(ДополнительныеПараметры.ТипПредмета, Результат);
		ПоместитьВоВременноеХранилище(СоответствиеНастроекПредметов, АдресСоответствияНастроекПредметов);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбновитьСтруктуруКэшаУниверсальныхДанных()
	
	ОстановитьОбновлениеКэшаСтруктуры();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Ссылка", Объект.Ссылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = 
		НСтр("ru='Обновление реквизитов задач'");

	РезультатЗапускаФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"лм_УниверсальныеСтруктурыДанных.ПослеЗаписиЭлементаУниверсальнойСтруктуры_Ссылка",
		ПараметрыЗадания,
		ПараметрыВыполнения);
		
	ИдентификаторФоновогоЗадания   = РезультатЗапускаФоновогоЗадания.ИдентификаторЗадания;
	АдресРезультатаФоновогоЗадания = РезультатЗапускаФоновогоЗадания.АдресРезультата;
	
	Возврат РезультатЗапускаФоновогоЗадания;
	
КонецФункции

&НаСервере
Процедура ОстановитьОбновлениеКэшаСтруктуры()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторФоновогоЗадания);
	Если Не ПустаяСтрока(АдресРезультатаФоновогоЗадания) Тогда
		УдалитьИзВременногоХранилища(АдресРезультатаФоновогоЗадания);
	КонецЕсли;
	
	АдресРезультатаФоновогоЗадания = "";
	ИдентификаторФоновогоЗадания   = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаСервере
Процедура РассчитатьВремяВыполнения()
	
	ВремяВыполненияЧасы   = Цел(Объект.ВремяВыполнения/60);
	ВремяВыполненияМинуты = Объект.ВремяВыполнения - ВремяВыполненияЧасы * 60;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыРедактированияТочкиМаршрута(ИмяТочки)
	
	Элементы.КартаМаршрута.ТекущийЭлемент = КартаМаршрута.ЭлементыГрафическойСхемы.Найти(ИмяТочки);
	КартаМаршрутаВыбор(Элементы.КартаМаршрута);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСохраненныеТочкиМаршрута(Шаблон)
	
	ТочкиМаршрута.Очистить();
	МассивИдентификаторовТочекДействия = Новый Массив;
	СоответствиеНастроекТочек = Новый Соответствие();
	НаборЗаписейДействий = РегистрыСведений.лм_ДействияТочкиОбработки.СоздатьНаборЗаписей();
	НаборЗаписейДействий.Отбор.Шаблон.Установить(Шаблон);
	НаборЗаписейДействий.Отбор.НомерВерсии.Установить(Шаблон.НомерВерсии);
	
	НаборЗаписей = РегистрыСведений.лм_ТочкиБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Шаблон.Установить(Шаблон);
	НаборЗаписей.Отбор.НомерВерсии.Установить(Шаблон.НомерВерсии);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		СтрокаТочки = ТочкиМаршрута.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТочки, Запись,, "ДанныеУсловия");
		
		Если Запись.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаУсловия Тогда
			ДанныеУсловия = Запись.ДанныеУсловия.Получить();
			Если ТипЗнч(ДанныеУсловия) = Тип("НастройкиКомпоновкиДанных") Тогда
				СтрокаТочки.ДанныеУсловия = ДанныеУсловия;
			КонецЕсли;
		ИначеЕсли Запись.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаОбработки Тогда
			НастройкиТочки = Новый Структура("ДействияОбработки, ПараметрыОбработки");		
			НаборЗаписейДействий.Отбор.ИдентификаторТочки.Установить(Запись.ИдентификаторТочки);
			НаборЗаписейДействий.Прочитать();
			МассивДействий = Новый Массив();
			Для Каждого ЗаписьДействия Из НаборЗаписейДействий Цикл
				СтруктураДействия = Новый Структура();
				СтруктураДействия.Вставить("Порядок",		ЗаписьДействия.Порядок);
				СтруктураДействия.Вставить("Наименование",	ЗаписьДействия.Наименование);
				СтруктураДействия.Вставить("ТипДействия",	ЗаписьДействия.ТипДействия);
				СтруктураДействия.Вставить("Настройка",		ЗаписьДействия.НастройкиДействия.Получить());
				МассивДействий.Добавить(СтруктураДействия);
			КонецЦикла;
			НастройкиТочки.ДействияОбработки = МассивДействий;
			НастройкиТочки.ПараметрыОбработки = Запись.ПараметрыОбработки.Получить(); 
			СоответствиеНастроекТочек.Вставить(Запись.ИдентификаторТочки, НастройкиТочки);
			
		ИначеЕсли Запись.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаДействия Тогда
			НастройкиАвтоподстановки = Запись.НастройкиАвтоподстановки.Получить();
			НастройкиТочки = Новый Структура("ЗначениеАвтоподстановки");
			Если НастройкиАвтоподстановки <> Неопределено Тогда
				НастройкиТочки.ЗначениеАвтоподстановки = НастройкиАвтоподстановки.ЗначениеАвтоподстановки;
			КонецЕсли;
			НастройкиОповещений = Запись.НастройкиОповещений.Получить();
			Если НастройкиОповещений <> Неопределено Тогда
				НастройкиТочки.Вставить("ИспользоватьПочтовыеОповещения", НастройкиОповещений.ИспользоватьПочтовыеОповещения);
				НастройкиТочки.Вставить("ШаблонСообщения",                НастройкиОповещений.ШаблонСообщения);
			КонецЕсли;
			МассивИдентификаторовТочекДействия.Добавить(Запись.ИдентификаторТочки);			
			СоответствиеНастроекТочек.Вставить(Запись.ИдентификаторТочки, НастройкиТочки); 
			
			ДополнительныеСвойства = Запись.ДополнительныеСвойства.Получить();
			
			Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура") Тогда
				
				Если ДополнительныеСвойства.Свойство("ЗаполнениеПоПредметам") Тогда
					
					Для Каждого Элемент Из ДополнительныеСвойства.ЗаполнениеПоПредметам Цикл
						НоваяСтрока = РеквизитыЗаполняемыеИзПредмета.Добавить();
						НоваяСтрока.ИдентификаторТочки 	= Запись.ИдентификаторТочки;
						НоваяСтрока.НаименованиеТочки 	= Запись.НаименованиеТочки;
						НоваяСтрока.ИмяПоля 			= Элемент.ИмяПоля;
						НоваяСтрока.Идентификатор 		= Элемент.Идентификатор;		
					КонецЦикла;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПолучитьРасширенныеНастройкиТочекДействия(СоответствиеНастроекТочек, Шаблон, МассивИдентификаторовТочекДействия, Шаблон.НомерВерсии);
	ПолучитьНастройкиОтображенияРеквизитовТочекДействия(СоответствиеНастроекТочек, Шаблон, МассивИдентификаторовТочекДействия, Шаблон.НомерВерсии);
	
	Если НЕ ПустаяСтрока(АдресСоответствияНастроекТочек) Тогда
		ПоместитьВоВременноеХранилище(СоответствиеНастроекТочек, АдресСоответствияНастроекТочек);
	Иначе
		АдресСоответствияНастроекТочек = ПоместитьВоВременноеХранилище(СоответствиеНастроекТочек, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиОтображенияРеквизитовТочекДействия(СоответствиеНастроекТочек, Шаблон, МассивИдентификаторов, НомерВерсии)
	
	ИдентификаторСтруктуры = Шаблон.УникальныйИдентификатор();
		
	ДанныеОтображения = лм_БизнесПроцессы.ДанныеОтображенияРеквизитовТочекДействия(Шаблон, МассивИдентификаторов, НомерВерсии, ИдентификаторСтруктуры, Истина);
	ВыборкаИтоги = ДанныеОтображения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтоги.Следующий() Цикл
		МассивНастроек  = Новый Массив;
		ВыборкаЗначения = ВыборкаИтоги.Выбрать();
		Пока ВыборкаЗначения.Следующий() Цикл
			стНастройка = Новый Структура("ИдентификаторРеквизита,Видимость,Доступность,ТолькоПросмотр,Обязательность");
			ЗаполнитьЗначенияСвойств(стНастройка, ВыборкаЗначения);
			МассивНастроек.Добавить(стНастройка);
		КонецЦикла;
		СоответствиеНастроекТочек[ВыборкаИтоги.ИдентификаторТочки].Вставить("НастройкиОтображения", МассивНастроек);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРасширенныеНастройкиТочекДействия(СоответствиеНастроекТочек, Шаблон, МассивИдентификаторов, НомерВерсии)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_РасширенныеНастройкиТочкиДействия.ИдентификаторНастройки КАК ИдентификаторНастройки,
	               |	лм_РасширенныеНастройкиТочкиДействия.ИмяРеквизита КАК ИмяРеквизита,
	               |	лм_РасширенныеНастройкиТочкиДействия.Значение КАК Значение,
	               |	лм_РасширенныеНастройкиТочкиДействия.ИдентификаторТочки КАК ИдентификаторТочки
	               |ИЗ
	               |	РегистрСведений.лм_РасширенныеНастройкиТочкиДействия КАК лм_РасширенныеНастройкиТочкиДействия
	               |ГДЕ
	               |	лм_РасширенныеНастройкиТочкиДействия.Шаблон = &Шаблон
	               |	И лм_РасширенныеНастройкиТочкиДействия.ИдентификаторТочки В(&МассивИдентификаторов)
	               |	И лм_РасширенныеНастройкиТочкиДействия.НомерВерсии = &НомерВерсии
	               |ИТОГИ ПО
	               |	ИдентификаторТочки";
	
	Запрос.УстановитьПараметр("Шаблон",                Шаблон);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	Запрос.УстановитьПараметр("НомерВерсии",           НомерВерсии);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтоги.Следующий() Цикл
		стНастройка     = Новый Структура("Идентификатор,Реквизиты",, Новый Массив);
		ВыборкаЗначения = ВыборкаИтоги.Выбрать();
		Пока ВыборкаЗначения.Следующий() Цикл
			стНастройка.Идентификатор = ВыборкаЗначения.ИдентификаторНастройки;
			стРеквизит = Новый Структура("Имя,Значение", ВыборкаЗначения.ИмяРеквизита, ВыборкаЗначения.Значение);
			стНастройка.Реквизиты.Добавить(стРеквизит);
		КонецЦикла;
		СоответствиеНастроекТочек[ВыборкаИтоги.ИдентификаторТочки].Вставить("РасширенныеНастройки", стНастройка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИконкиДействий(Шаблон)
	
	СоответствиеИконокДействий = Новый Соответствие();
	
	НаборЗаписей = РегистрыСведений.лм_СценарииБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Шаблон.Установить(Шаблон);
	НаборЗаписей.Отбор.НомерВерсии.Установить(Шаблон.НомерВерсии);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		стрЗначениеСоответствия = Новый Структура("ИконкаДействия, ОбработчикПослеЗавершения", Запись.ИконкаДействия, Запись.ОбработчикПослеЗавершения);
		СоответствиеИконокДействий.Вставить(Запись.ИмяЭлементаСхемы, стрЗначениеСоответствия);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(АдресСоответствияИконокДействий) Тогда
		ПоместитьВоВременноеХранилище(СоответствиеИконокДействий, АдресСоответствияИконокДействий);
	Иначе
		АдресСоответствияИконокДействий = ПоместитьВоВременноеХранилище(СоответствиеИконокДействий, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыШаблона(Шаблон)
	
	ПараметрыШаблона.Очистить();
	СохраненныеПараметры = Шаблон.Параметры.Получить();
	Если СохраненныеПараметры <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СохраненныеПараметры Цикл
			СтрокаПараметра = ПараметрыШаблона.Добавить();
			СтрокаПараметра.ИмяПараметра = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИдентификаторыТочекМаршрута()
	
	Для Каждого ЭлементСхемы Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл		 
		Если ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				И ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			НайденныеСтроки = ТочкиМаршрута.НайтиСтроки(Новый Структура("ИмяТочки", ЭлементСхемы.Имя));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТочки = ТочкиМаршрута.Добавить();
				СтрокаТочки.ИмяТочки = ЭлементСхемы.Имя;
				СтрокаТочки.НаименованиеТочки = ЭлементСхемы.Наименование;
				СтрокаТочки.ТипТочки = СоответствиеТиповТочек.Получить(ТипЗнч(ЭлементСхемы));
				СтрокаТочки.ИдентификаторТочки = Новый УникальныйИдентификатор();
			Иначе
				#Если Не ВебКлиент Тогда
					СтрокаТочки = НайденныеСтроки[0];
					СтрокаТочки.НаименованиеТочки = ЭлементСхемы.Наименование;
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;		 
	КонецЦикла;
	
	#Если Не ВебКлиент Тогда
		МаксИндекс = ТочкиМаршрута.Количество() - 1;
		Для Индекс = 0 По МаксИндекс Цикл
			СтрокаТочки = ТочкиМаршрута.Получить(МаксИндекс - Индекс);
			Если КартаМаршрута.ЭлементыГрафическойСхемы.Найти(СтрокаТочки.ИмяТочки) = Неопределено Тогда
				ТочкиМаршрута.Удалить(МаксИндекс - Индекс);
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТочкиМаршрута()
	
	ШаблонБизнесПроцесса = Объект.Ссылка;
	НомерВерсии = ШаблонБизнесПроцесса.НомерВерсии;
	СоответствиеНастроекТочек = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекТочек);
	
	НаборЗаписей = РегистрыСведений.лм_ТочкиБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Шаблон.Установить(ШаблонБизнесПроцесса);
	НаборЗаписей.Отбор.НомерВерсии.Установить(НомерВерсии);
	НаборЗаписей.Очистить();
	Для Каждого СтрокаТочки Из ТочкиМаршрута Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Шаблон = ШаблонБизнесПроцесса;
		Запись.НомерВерсии = НомерВерсии;
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТочки,, "ДанныеУсловия");
		
		Если СтрокаТочки.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаУсловия Тогда
			ДанныеУсловия = СтрокаТочки.ДанныеУсловия;
			Запись.ДанныеУсловия = Новый ХранилищеЗначения(ДанныеУсловия);
			
		ИначеЕсли СтрокаТочки.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаОбработки Тогда	
			НастройкиТочки = СоответствиеНастроекТочек.Получить(СтрокаТочки.ИдентификаторТочки);
			Если НастройкиТочки <> Неопределено Тогда
				Если НастройкиТочки.ДействияОбработки <> Неопределено Тогда
					НаборЗаписейДействий = РегистрыСведений.лм_ДействияТочкиОбработки.СоздатьНаборЗаписей();
					НаборЗаписейДействий.Отбор.Шаблон.Установить(ШаблонБизнесПроцесса);
					НаборЗаписейДействий.Отбор.ИдентификаторТочки.Установить(СтрокаТочки.ИдентификаторТочки);
					НаборЗаписейДействий.Отбор.НомерВерсии.Установить(НомерВерсии);
					Для Каждого СтруктураДействия Из НастройкиТочки.ДействияОбработки Цикл
						ЗаписьДействия = НаборЗаписейДействий.Добавить();
						ЗаписьДействия.Шаблон = ШаблонБизнесПроцесса;
						ЗаписьДействия.ИдентификаторТочки = СтрокаТочки.ИдентификаторТочки;
						ЗаписьДействия.Порядок = СтруктураДействия.Порядок;
						ЗаписьДействия.НомерВерсии = НомерВерсии;
						ЗаписьДействия.Наименование = СтруктураДействия.Наименование;
						ЗаписьДействия.ТипДействия = СтруктураДействия.ТипДействия;
						ЗаписьДействия.НастройкиДействия = Новый ХранилищеЗначения(СтруктураДействия.Настройка);
					КонецЦикла;
					НаборЗаписейДействий.Записать();
				КонецЕсли;
				Запись.ПараметрыОбработки = Новый ХранилищеЗначения(НастройкиТочки.ПараметрыОбработки);
			КонецЕсли;
			
		ИначеЕсли СтрокаТочки.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаДействия Тогда
			НастройкиТочки = СоответствиеНастроекТочек.Получить(СтрокаТочки.ИдентификаторТочки);
			Если НастройкиТочки <> Неопределено Тогда
				НастройкиАвтоподстановки = Новый Структура("ЗначениеАвтоподстановки", НастройкиТочки.ЗначениеАвтоподстановки);
				Запись.НастройкиАвтоподстановки = Новый ХранилищеЗначения(НастройкиАвтоподстановки);
				Если НастройкиТочки.Свойство("НастройкиОтображения") Тогда
					ЗаписатьНастройкиОтображения(НастройкиТочки.НастройкиОтображения, СтрокаТочки.ИдентификаторТочки, НомерВерсии);
				КонецЕсли;
				Если НастройкиТочки.Свойство("ИспользоватьПочтовыеОповещения") Тогда
					НастройкиОповещений = Новый Структура("ШаблонСообщения,ИспользоватьПочтовыеОповещения");
					ЗаполнитьЗначенияСвойств(НастройкиОповещений, НастройкиТочки);
					Запись.НастройкиОповещений = Новый ХранилищеЗначения(НастройкиОповещений);
				КонецЕсли;
		    КонецЕсли;
			
			НайденныеСтроки = РеквизитыЗаполняемыеИзПредмета.НайтиСтроки(Новый Структура("ИдентификаторТочки", СтрокаТочки.ИдентификаторТочки));
			
			Если НайденныеСтроки.Количество() Тогда
				
				ДополнительныеСвойства = Новый Структура("ЗаполнениеПоПредметам", Новый Массив);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					РеквизитЗаполнения = Новый Структура("ИмяПоля, Идентификатор");
					ЗаполнитьЗначенияСвойств(РеквизитЗаполнения, НайденнаяСтрока);
					ДополнительныеСвойства.ЗаполнениеПоПредметам.Добавить(РеквизитЗаполнения);
				КонецЦикла;
				
				Запись.ДополнительныеСвойства = Новый ХранилищеЗначения(ДополнительныеСвойства);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРасширенныеНастройки()
	
	ШаблонБизнесПроцесса      = Объект.Ссылка;
	НомерВерсии               = ШаблонБизнесПроцесса.НомерВерсии;
	СоответствиеНастроекТочек = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекТочек);
	
	Для Каждого КлючИЗначение Из СоответствиеНастроекТочек Цикл
		НастройкиТочки = КлючИЗначение.Значение;
		НаборЗаписей   = РегистрыСведений.лм_РасширенныеНастройкиТочкиДействия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерВерсии.Установить(НомерВерсии);
		НаборЗаписей.Отбор.Шаблон.Установить(ШаблонБизнесПроцесса);
		НаборЗаписей.Отбор.ИдентификаторТочки.Установить(КлючИЗначение.Ключ);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Если НастройкиТочки.Свойство("РасширенныеНастройки") Тогда
			Если НастройкиТочки.РасширенныеНастройки.Реквизиты.Количество() <> 0 Тогда
				Для Каждого Реквизит Из НастройкиТочки.РасширенныеНастройки.Реквизиты Цикл
					Запись                        = НаборЗаписей.Добавить();
					Запись.Шаблон                 = ШаблонБизнесПроцесса;
					Запись.ИдентификаторТочки     = КлючИЗначение.Ключ;
					Запись.ИдентификаторНастройки = НастройкиТочки.РасширенныеНастройки.Идентификатор;
					Запись.НомерВерсии            = НомерВерсии;
					Запись.ИмяРеквизита           = Реквизит.Имя;
					Запись.Значение               = Реквизит.Значение;
				КонецЦикла;
			Иначе
					Запись                        = НаборЗаписей.Добавить();
					Запись.Шаблон                 = ШаблонБизнесПроцесса;
					Запись.ИдентификаторТочки     = КлючИЗначение.Ключ;
					Запись.ИдентификаторНастройки = НастройкиТочки.РасширенныеНастройки.Идентификатор;
					Запись.НомерВерсии            = НомерВерсии;
					Запись.ИмяРеквизита           = "";
					Запись.Значение               = "";				
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСценарий(СвязиМаршрута, ШаблонБизнесПроцесса)
	
	НомерВерсии = ШаблонБизнесПроцесса.НомерВерсии;
	НаборЗаписей = РегистрыСведений.лм_СценарииБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Шаблон.Установить(ШаблонБизнесПроцесса);
	НаборЗаписей.Отбор.НомерВерсии.Установить(НомерВерсии);
	НаборЗаписей.Очистить();
	Для Каждого СтруктураСвязи Из СвязиМаршрута Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Шаблон = ШаблонБизнесПроцесса;
		Запись.НомерВерсии = НомерВерсии;
		ЗаполнитьЗначенияСвойств(Запись, СтруктураСвязи);
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиОтображения(НастройкиОтображения, ИдентификаторТочки, НомерВерсии)
	
	Если НастройкиОтображения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.лм_НастройкиОтображенияРеквизитовТочкиДействия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Шаблон.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.ИдентификаторТочки.Установить(ИдентификаторТочки);
	НаборЗаписей.Отбор.ИдентификаторСтруктуры.Установить(ЭтаФорма.лмИдентификаторСтруктуры);
	НаборЗаписей.Отбор.НомерВерсии.Установить(НомерВерсии);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого Настройка Из НастройкиОтображения Цикл
		Запись                        = НаборЗаписей.Добавить();
		Запись.Шаблон                 = Объект.Ссылка;
		Запись.ИдентификаторТочки     = ИдентификаторТочки;
		Запись.ИдентификаторСтруктуры = ЭтаФорма.лмИдентификаторСтруктуры;
		Запись.ИдентификаторРеквизита = Настройка.ИдентификаторРеквизита;
		Запись.НомерВерсии            = НомерВерсии;
		Запись.Видимость              = Настройка.Видимость;
		Запись.Доступность            = Настройка.Доступность;
		Запись.ТолькоПросмотр         = Настройка.ТолькоПросмотр;
		Запись.Обязательность         = Настройка.Обязательность;
	КонецЦикла;		
	
	НаборЗаписей.Записать();
	
Конецпроцедуры

&НаСервереБезКонтекста
Функция СоответствиеТиповТочек()
	
	Результат = Новый Соответствие();
	ПеречислениеТипыТочек = Перечисления.лм_ТипыТочекБизнесПроцессов;
	
	Результат.Вставить(Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс"),ПеречислениеТипыТочек.ТочкаПодпроцесса);
	Результат.Вставить(Тип("ЭлементГрафическойСхемыВыборВарианта"),			ПеречислениеТипыТочек.ТочкаВыбора);
	Результат.Вставить(Тип("ЭлементГрафическойСхемыДействие"),				ПеречислениеТипыТочек.ТочкаДействия);
	Результат.Вставить(Тип("ЭлементГрафическойСхемыЗавершение"),			ПеречислениеТипыТочек.ТочкаЗавершения);
	Результат.Вставить(Тип("ЭлементГрафическойСхемыОбработка"),				ПеречислениеТипыТочек.ТочкаОбработки);
	Результат.Вставить(Тип("ЭлементГрафическойСхемыРазделение"),			ПеречислениеТипыТочек.ТочкаРазделения);
	Результат.Вставить(Тип("ЭлементГрафическойСхемыСлияние"),				ПеречислениеТипыТочек.ТочкаСлияния);
	Результат.Вставить(Тип("ЭлементГрафическойСхемыСтарт"),					ПеречислениеТипыТочек.ТочкаСтарта);
	Результат.Вставить(Тип("ЭлементГрафическойСхемыУсловие"),				ПеречислениеТипыТочек.ТочкаУсловия);
	
    Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьБизнесПроцессНаСервере(ШаблонБизнесПроцесса)
	
	Возврат лм_БизнесПроцессы.СоздатьБизнесПроцессПоШаблону(ШаблонБизнесПроцесса);
	
КонецФункции

&НаСервере
Функция КартаМаршрутаВалидна(МассивОшибок = Неопределено, ЭлементыСОшибками = Неопределено)
	
	Если МассивОшибок = Неопределено Тогда
		МассивОшибок = Новый Массив();
	КонецЕсли;
	Если ЭлементыСошибками = Неопределено Тогда
		ЭлементыСошибками = Новый Массив();
	КонецЕсли;
	ЕстьТочкаСтарта = Ложь;
	ЕстьТочкаЗавершения = Ложь;
	ДанныеСвязей = Новый Структура();
	НаличиеВходов = Новый Структура();
	
	Для Каждого ЭлементСхемы Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			ОписаниеЭлемента = ?(ЗначениеЗаполнено(ЭлементСхемы.Наименование), ЭлементСхемы.Наименование, ЭлементСхемы.Имя)
					+ " (" + ?(ЭлементСхемы.НачалоЭлемент <> Неопределено, ЭлементСхемы.НачалоЭлемент.Наименование, "?") + " -> "
					+ ?(ЭлементСхемы.КонецЭлемент <> Неопределено, ЭлементСхемы.КонецЭлемент.Наименование, "?") + ")";				
			Если ЭлементСхемы.НачалоЭлемент = Неопределено
					ИЛИ ЭлементСхемы.КонецЭлемент = Неопределено Тогда
				ТекстОшибки = "Несвязный элемент: " + ОписаниеЭлемента;
				МассивОшибок.Добавить(ТекстОшибки);
				ЭлементыСОшибками.Добавить(ЭлементСхемы.Имя);
			Иначе
				НачалоИмя = ЭлементСхемы.НачалоЭлемент.Имя;
				КонецИмя = ЭлементСхемы.КонецЭлемент.Имя;
				КонечныеЭлементы = Новый Структура();
				Если ДанныеСвязей.Свойство(НачалоИмя) Тогда
					КонечныеЭлементы = ДанныеСвязей[НачалоИмя];
				КонецЕсли;
				Если КонечныеЭлементы.Свойство(КонецИмя) Тогда
					ТекстОшибки = "Связь дублируется: " + ЭлементСхемы.НачалоЭлемент.Наименование + " -> " + ЭлементСхемы.КонецЭлемент.Наименование;
					МассивОшибок.Добавить(ТекстОшибки);
					ЭлементыСОшибками.Добавить(ЭлементСхемы.Имя);
					ЭлементыСОшибками.Добавить(КонечныеЭлементы[КонецИмя]);
				ИначеЕсли ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыДействие")
						И ЭлементСхемы.НачалоЭлемент.Групповая = Истина 
						И КонечныеЭлементы.Количество() > 0 Тогда
					ТекстОшибки = "Действия с групповой адресацией могут иметь только один выход";
					МассивОшибок.Добавить(ТекстОшибки);
					ЭлементыСОшибками.Добавить(НачалоИмя);
				Иначе	
					КонечныеЭлементы.Вставить(КонецИмя, ЭлементСхемы.Имя);
					ДанныеСвязей.Вставить(НачалоИмя, КонечныеЭлементы);
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыДействие") 
					И НЕ ЗначениеЗаполнено(ЭлементСхемы.Наименование) Тогда
				ТекстОшибки = "Не заполнено наименование перехода: " + ОписаниеЭлемента;
				МассивОшибок.Добавить(ТекстОшибки);
				ЭлементыСОшибками.Добавить(ЭлементСхемы.Имя);
			КонецЕсли;
			Если ЭлементСхемы.КонецЭлемент <> Неопределено Тогда
				НаличиеВходов.Вставить(ЭлементСхемы.КонецЭлемент.Имя, Истина);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСтарт") Тогда
			ЕстьТочкаСтарта = Истина;
			
		ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыЗавершение") Тогда
			ЕстьТочкаЗавершения = Истина;
			
		ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
			ДанныеТочки = ТочкиМаршрута.НайтиСтроки(Новый Структура("ИмяТочки", ЭлементСхемы.Имя))[0];
			Если НЕ ЗначениеЗаполнено(ДанныеТочки.ШаблонПодпроцесса) Тогда
				ТекстОшибки = "Не указан шаблон подпроцесса: " + ЭлементСхемы.Наименование;
				МассивОшибок.Добавить(ТекстОшибки);
				ЭлементыСОшибками.Добавить(ЭлементСхемы.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				И ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыДекоративнаяЛиния")
				И ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыСтарт")
				И НЕ НаличиеВходов.Свойство(ЭлементСхемы.Имя) Тогда
			НаличиеВходов.Вставить(ЭлементСхемы.Имя, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьТочкаЗавершения = Ложь Тогда
		МассивОшибок.Вставить(0, "Отсутствует точка завершения");
	КонецЕсли;
	Если ЕстьТочкаСтарта = Ложь Тогда
		МассивОшибок.Вставить(0, "Отсутствует точка старта");
	КонецЕсли;
	Для Каждого КлючИЗначение Из НаличиеВходов Цикл
		Если КлючИЗначение.Значение = Ложь Тогда
			ЭлементСхемы = КартаМаршрута.ЭлементыГрафическойСхемы.Найти(КлючИЗначение.Ключ);
			МассивОшибок.Добавить("Отсутствуют точки входа: " + ЭлементСхемы.Наименование);
			ЭлементыСОшибками.Добавить(ЭлементСхемы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеСвязей Цикл
		ЭлементСхемы = КартаМаршрута.ЭлементыГрафическойСхемы.Найти(КлючИЗначение.Ключ);
		МаксКоличествоВыходов = 0;
		ТекстКоличествоВыходов = "";
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыУсловие") Тогда
			МаксКоличествоВыходов = 2;
			ТекстКоличествоВыходов = " может быть только два выхода";
		ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыОбработка")
				ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс")
				ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСтарт")
				ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСлияние") Тогда
			МаксКоличествоВыходов = 1;
			ТекстКоличествоВыходов = " может быть только один выход";
		ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыЗавершение") Тогда
			МаксКоличествоВыходов = 0;
			ТекстКоличествоВыходов = " не может быть выходов";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если КлючИЗначение.Значение.Количество() > МаксКоличествоВыходов Тогда
			МассивОшибок.Добавить("У элемента " + ЭлементСхемы.Наименование + ТекстКоличествоВыходов);
			ЭлементыСОшибками.Добавить(ЭлементСхемы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Результат = (МассивОшибок.Количество() = 0);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтобразитьОшибкиКартыМаршрута(ЭлементыСОшибками)
	
	Линия = Новый Линия(ТипСоединительнойЛинии.Сплошная, 1);
	ЦветЛинии = ЦветаСтиля.ЦветРамки;
	ЛинияСОшибкой = Новый Линия(ТипСоединительнойЛинии.Сплошная, 3);
	ЦветЛинииСОшибкой = Новый Цвет(255, 0, 0);
	Для Каждого ЭлементСхемы Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ЭлементыСОшибками.Найти(ЭлементСхемы.Имя) <> Неопределено Тогда
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
					ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
				ЭлементСхемы.Линия = ЛинияСОшибкой;
				ЭлементСхемы.ЦветЛинии = ЦветЛинииСОшибкой;
			Иначе
				ЭлементСхемы.Рамка = ЛинияСОшибкой;
				ЭлементСхемы.ЦветРамки = ЦветЛинииСОшибкой;
			КонецЕсли;
		Иначе
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
					ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
				ЭлементСхемы.Линия = Линия;
				ЭлементСхемы.ЦветЛинии = ЦветЛинии;
			Иначе
				ЭлементСхемы.Рамка = Линия;
				ЭлементСхемы.ЦветРамки = ЦветЛинии;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// лм_УниверсальныеСтруктурыДанных
&НаСервере
Функция СформироватьПараметрыФормыНастроек()
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ВыводитьСписокСтруктур", Ложь);
	ПараметрыФормы.Вставить("ИмяГруппы",              "ГруппаУниверсальнаяСтруктура");
	ПараметрыФормы.Вставить("ИдентификаторСтруктуры", ПолучитьИдентификаторСтруктуры());
	ПараметрыФормы.Вставить("ВладелецСтруктуры",	  ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНового));
	ПараметрыФормы.Вставить("ОтложеннаяИнициализация", Истина);
	
	Если ЗначениеЗаполнено(Объект.ИсходныйШаблон) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы.Вставить("ИдентификаторКопируемойСтруктуры", Объект.ИсходныйШаблон.УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторСтруктуры()
	
	Если Объект.Ссылка.Пустая() Тогда
		ИдентификаторСтруктуры = СсылкаНового.УникальныйИдентификатор();
	Иначе
		ИдентификаторСтруктуры = Объект.Ссылка.УникальныйИдентификатор();
	КонецЕсли;	
	
	Возврат ИдентификаторСтруктуры;
	
КонецФункции
// Конец лм_УниверсальныеСтруктурыДанных

&НаКлиенте
Функция СформироватьСтрокуПояснения(Результат)
	
	Пояснение = Строка(Результат.Исполнитель);
	
	Пояснение = Пояснение + ?(ЗначениеЗаполнено(Результат.ОсновнойОбъектАдресации), ", " + Результат.ОсновнойОбъектАдресации, "");
	Пояснение = Пояснение + ?(ЗначениеЗаполнено(Результат.ДополнительныйОбъектАдресации), ", " + Результат.ДополнительныйОбъектАдресации, "");
	
	Возврат Пояснение;
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыШаблона(МассивОшибок = Неопределено)
	
	Если МассивОшибок = Неопределено Тогда
		МассивОшибок = Новый Массив();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	Для Каждого СтрокаПараметра Из ПараметрыШаблона Цикл
		ИмяПараметра = СтрокаПараметра.ИмяПараметра;
		Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
			Если лм_СтроковыеФункцииКлиентСервер.ЭтоВалидныйИдентификатор(ИмяПараметра) Тогда
				СтруктураПараметров.Вставить(ИмяПараметра);
			Иначе
				МассивОшибок.Добавить(ИмяПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиПредметов(Шаблон)
	
	СоответствиеНастроекПредметов = Новый Соответствие();	
	Для Каждого Предмет Из Шаблон.Предметы Цикл
		СоответствиеНастроекПредметов.Вставить(Предмет.ТипПредмета, Предмет.УсловияОтбора.Получить());
	КонецЦикла;
			
	Для Каждого Предмет Из Объект.Предметы Цикл
		Предмет.НастройкаДоступна = Истина;
	КонецЦикла;
	АдресСоответствияНастроекПредметов = ПоместитьВоВременноеХранилище(СоответствиеНастроекПредметов, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти
