
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульУправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ЗагрузитьТаблицы();
	Иначе
		ЗагрузитьТаблицы(Параметры.ЗначениеКопирования);
	КонецЕсли;
	
	Попытка
		ДанныеXml = Параметры.ДанныеXml;
		КадастровыйДокумент = Параметры.Документ;
		ПараметрыПереводаВWgs84 = Параметры.ПараметрыПереводаВWgs84;
		Объект.Слой = Параметры.Слой;
		
		ЗаполнитьПоДаннымXml(ДанныеXml, КадастровыйДокумент, ПараметрыПереводаВWgs84);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульУправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульУправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Отказ Тогда
		Если Параметры.Пакетно Тогда
			// Нужно для веб-клиента, чтобы пробрасывалось в документ и не останавливало работу
			ВызватьИсключение "Земельный участок с таким же кадастровым номером уже существует!";
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Земельный участок с таким же кадастровым номером уже существует!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СохранитьДанныеПоРегистрам(ПараметрыЗаписи, ТекущийОбъект, Отказ);
	Если Не Отказ И ЗагруженФайл Тогда
		ПараметрыФайла = Новый Структура("Автор,ВладелецФайлов,ИмяБезРасширения,РасширениеБезТочки,ВремяИзмененияУниверсальное",
			Пользователи.ТекущийПользователь(), ТекущийОбъект.Ссылка, ИмяФайла, РасширениеФайла);
		Попытка
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресСохраненногоФайла);
			ЗагруженФайл = Ложь;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ГеометрияИзменилась" Тогда
		ГеометрияПеревестиКадастрВWgs(Команды.ГеометрияПеревестиКадастрВWgs);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Слой) Тогда
		ПараметрыСлоя = ПолучитьПараметрыСлоя(Объект.Слой);
		Если ЗначениеЗаполнено(ПараметрыСлоя.СправочникОбъектовУчета) Тогда
			ПараметрыФормы = Новый Структура("ТекущаяСтрока,РежимВыбора", Объект.ОбъектУчета, Истина);
			Если ЗначениеЗаполнено(ПараметрыСлоя.СправочникОбъектовУчетаВладелец) Тогда
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ПараметрыСлоя.СправочникОбъектовУчетаВладелец));
			КонецЕсли;
			
			Обработчик = Новый ОписаниеОповещения("ОбъектУчетаНачалоВыбораЗавершение", ЭтотОбъект);
			ОткрытьФорму("Справочник." + ПараметрыСлоя.СправочникОбъектовУчета + ".ФормаВыбора", ПараметрыФормы, , , , , 
				Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'У слоя ""%1"" не выбран справочник объектов учета!'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Объект.Слой);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран слой!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.ОбъектУчета = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПлощадьПриИзменении(Элемент)
	РассчитатьПлощадиДолей();
КонецПроцедуры

&НаКлиенте
Процедура КадастровыйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПраваНаУчасток

&НаКлиенте
Процедура КонтурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Копирование И (ЗначениеЗаполнено(Элементы.Контуры.ТекущиеДанные.ГеометрияКадастра) Или ЗначениеЗаполнено(Элементы.Контуры.ТекущиеДанные.ГеометрияWgs)) Тогда
		ГеометрияПеревестиКадастрВWgs(Команды.ГеометрияПеревестиКадастрВWgs);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтурыПослеУдаления(Элемент)
	ГеометрияПеревестиКадастрВWgs(Команды.ГеометрияПеревестиКадастрВWgs);
КонецПроцедуры


&НаКлиенте
Процедура КонтурыГеометрияРедактироватьJson(Команда)
	Если Элементы.Контуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Контуры.ТекущийЭлемент.Имя = "КонтурыГеометрияКадастра" Тогда
		гисРаботаСПлощаднымиОбъектамиКлиент.ГеометрияРедактироватьJson(ЭтотОбъект, "ГеометрияКадастра", "Контуры");
	ИначеЕсли Элементы.Контуры.ТекущийЭлемент.Имя = "КонтурыГеометрияWgs" Тогда
		гисРаботаСПлощаднымиОбъектамиКлиент.ГеометрияРедактироватьJson(ЭтотОбъект, "ГеометрияWgs", "Контуры");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтурыГеометрияКадастраОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	СписокТиповГеометрии = Новый СписокЗначений;
	СписокТиповГеометрии.Добавить("Polygon");
	СписокТиповГеометрии.Добавить("LineString");
	гисРаботаСПлощаднымиОбъектамиКлиент.ГеометрияРедактироватьВТаблице(ЭтотОбъект, "ГеометрияКадастра", Элементы.КонтурыГеометрияКадастра, "Контуры", СписокТиповГеометрии);
КонецПроцедуры

&НаКлиенте
Процедура КонтурыГеометрияКадастраОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.Контуры.ТекущиеДанные.ГеометрияКадастра <> "" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КонтурыГеометрияКадастраОчисткаЗавершение", ЭтотОбъект), "Геометрия будет удалена! Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтурыГеометрияКадастраОчисткаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Элементы.Контуры.ТекущиеДанные.ГеометрияКадастра = "";
		ГеометрияПеревестиКадастрВWgs(Команды.ГеометрияПеревестиКадастрВWgs);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КонтурыГеометрияWgsОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокТиповГеометрии = Новый СписокЗначений;
	СписокТиповГеометрии.Добавить("Polygon");
	СписокТиповГеометрии.Добавить("LineString");
	гисРаботаСПлощаднымиОбъектамиКлиент.ГеометрияРедактироватьВТаблице(ЭтотОбъект, "ГеометрияWgs", Элементы.КонтурыГеометрияWgs, "Контуры", СписокТиповГеометрии);
КонецПроцедуры

&НаКлиенте
Процедура КонтурыГеометрияWgsОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.Контуры.ТекущиеДанные.ГеометрияWgs <> "" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КонтурыГеометрияWgsОчисткаЗавершение", ЭтотОбъект), "Геометрия будет удалена! Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтурыГеометрияWgsОчисткаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Элементы.Контуры.ТекущиеДанные.ГеометрияWgs = "";
		ГеометрияПеревестиКадастрВWgs(Команды.ГеометрияПеревестиКадастрВWgs);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// общая геометрия

&НаКлиенте
Процедура ГеометрияWgsРедактироватьВТаблице(Команда)
	// TODO не надо, чтобы редактировалась
	гисРаботаСПлощаднымиОбъектамиКлиент.ГеометрияРедактироватьВТаблице(ЭтотОбъект, "ГеометрияWgs", Элементы.ГеометрияWgsРедактироватьВТаблице);
КонецПроцедуры

&НаКлиенте
Процедура ГеометрияWgsРедактироватьJson(Команда)
	// TODO не надо, чтобы редактировалась
	гисРаботаСПлощаднымиОбъектамиКлиент.ГеометрияРедактироватьJson(ЭтотОбъект, "ГеометрияWgs")
КонецПроцедуры

&НаКлиенте
Процедура ГеометрияПеревестиКадастрВWgs(Команда)
	Если Не ЗначениеЗаполнено(Объект.ПараметрыПереводаВWgs84) Тогда
		ПоказатьПредупреждение(, "Параметры перевода не выбраны!");
		Возврат;
	КонецЕсли;
	
	ГеометрияПеревестиКадастрВWgsНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПраваНаУчасток

&НаКлиенте
Процедура ПраваНаУчастокПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ПраваНаУчастокЧислительДробиДолиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПраваНаУчасток.ТекущиеДанные;
	ТекущаяСтрока.ПлощадьДоли = ПолучитьПлощадьДоли(ТекущаяСтрока.ЧислительДробиДоли, ТекущаяСтрока.ЗнаменательДробиДоли);
КонецПроцедуры

&НаКлиенте
Процедура ПраваНаУчастокЗнаменательДробиДолиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПраваНаУчасток.ТекущиеДанные;
	ТекущаяСтрока.ПлощадьДоли = ПолучитьПлощадьДоли(ТекущаяСтрока.ЧислительДробиДоли, ТекущаяСтрока.ЗнаменательДробиДоли);
КонецПроцедуры


&НаКлиенте
Процедура ПраваНаУчастокДокументыПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ОткрытьФорму("Справочник.гисКадастровыеЗемельныеУчастки.Форма.ФормаПросмотраДокументовПоПравам", Новый Структура("Документы", Элементы.ПраваНаУчасток.ТекущиеДанные.Документы), , , , , 
		Новый ОписаниеОповещения("ЗавершениеПросмотраДокументовПоПравам", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПросмотраДокументовПоПравам(ВозвращаемоеЗначение, ДополнительныеПараметры) Экспорт
	Если ВозвращаемоеЗначение <> Неопределено Тогда
		Элементы.ПраваНаУчасток.ТекущиеДанные.Документы = ВозвращаемоеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзКадастровойВыписки6(Команда)
	ДополнительныеПараметры = Новый Структура("ТипДокумента", ПредопределенноеЗначение("Перечисление.гисТипыКадастровыхДокументов.КадастроваяВыписка6"));
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры), , , , УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКадастровойВыписки7(Команда)
	ДополнительныеПараметры = Новый Структура("ТипДокумента", ПредопределенноеЗначение("Перечисление.гисТипыКадастровыхДокументов.КадастроваяВыписка7"));
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры), , , , УникальныйИдентификатор);
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИзКадастровогоПаспорта5(Команда)
	ДополнительныеПараметры = Новый Структура("ТипДокумента", ПредопределенноеЗначение("Перечисление.гисТипыКадастровыхДокументов.КадастровыйПаспорт5"));
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры), , , , УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКадастровогоПаспорта6(Команда)
	ДополнительныеПараметры = Новый Структура("ТипДокумента", ПредопределенноеЗначение("Перечисление.гисТипыКадастровыхДокументов.КадастровыйПаспорт6"));
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры), , , , УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаАвто(Команда)
	ДополнительныеПараметры = Новый Структура("ТипДокумента", Неопределено);
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры), , , , УникальныйИдентификатор);
КонецПроцедуры


&НаКлиенте
Процедура ЗавершениеВыбораФайла(Результат, АдресФайла, ИмяВыбранногоФайла, ДополнительныеПараметры) Экспорт
	Если Не Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Загрузка из файла отменена!");
		Возврат;
	КонецЕсли;
	
	ФайлЗагружен = ЗагрузитьИзКадастровогоДокументаНаСервере(АдресФайла, ДополнительныеПараметры.ТипДокумента);
	Если ФайлЗагружен Тогда
		Состояние("Загрузка завершена!");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершениеВопросаСохраненияФайла", ЭтотОбъект, Новый Структура("ИмяФайла,АдресФайла", ИмяВыбранногоФайла, АдресФайла)),
			"Сохранить загруженный файл?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВопросаСохраненияФайла(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагруженФайл = Истина;
		
		АдресСохраненногоФайла = ДополнительныеПараметры.АдресФайла;
		
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ДополнительныеПараметры.ИмяФайла);
		ИмяФайла = СтрЗаменить(ДополнительныеПараметры.ИмяФайла, "." + РасширениеФайла, "");
		
		Пока Найти(ИмяФайла, "\") > 0 Цикл
			ИмяФайла = Сред(ИмяФайла, Найти(ИмяФайла, "\") + 1);
		КонецЦикла;
	Иначе
		ЗагруженФайл = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Росреестр(Команда)
	Если Не ЗначениеЗаполнено(Объект.КадастровыйНомер) Тогда
		ПоказатьПредупреждение(, "Не заполнен кадастровый номер!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеИзРосРеестраНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыСлоя(Слой)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Слой, "СправочникОбъектовУчета,СправочникОбъектовУчетаВладелец", Истина);
КонецФункции

&НаСервере
Процедура ГеометрияПеревестиКадастрВWgsНаСервере()
	Реквизит = РеквизитФормыВЗначение("Объект");
	Реквизит.ГеометрияWgsСобратьОбщую();
	ЗначениеВРеквизитФормы(Реквизит, "Объект");
	
	Модифицированность = Истина;
КонецПроцедуры

// загрузка/сохранение регистров

&НаСервере
Процедура ЗагрузитьТаблицы(ЗначениеКопирования = Неопределено)
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ТаблицаПраваНаУчасток = ЗначениеКопирования.ПолучитьОбъект().ПолучитьТаблицуПраваНаУчасток();
	Иначе
		ТаблицаПраваНаУчасток = РеквизитФормыВЗначение("Объект").ПолучитьТаблицуПраваНаУчасток();
	КонецЕсли;
	
	ПраваНаУчасток.Загрузить(ТаблицаПраваНаУчасток);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеПоРегистрам(ПараметрыЗаписи, ТекущийОбъект, Отказ)
	НачатьТранзакцию();
	
	Попытка
		ТекущийОбъект.СохранитьТаблицуПраваНаУчасток(ПраваНаУчасток);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки(), , , , Отказ);
	КонецПопытки;
КонецПроцедуры

// права на участок

&НаСервере
Функция ПолучитьПлощадьДоли(Числитель, Знаменатель)
	Возврат ?(Знаменатель = 0, 0, Объект.Площадь * Числитель / Знаменатель);
КонецФункции

&НаСервере
Процедура РассчитатьПлощадиДолей()
	Для Каждого Право Из ПраваНаУчасток Цикл
		Право.ПлощадьДоли = ПолучитьПлощадьДоли(Право.ЧислительДробиДоли, Право.ЗнаменательДробиДоли);
	КонецЦикла;
КонецПроцедуры

#Область РаботаСРосреестром

// загрузка из документа

&НаСервере
Процедура ЗаполнитьПоДаннымXml(ДанныеXml, КадастровыйДокумент = Неопределено, ПараметрыПереводаВWgs84 = Неопределено)
	ТаблицаПраваНаУчасток = РеквизитФормыВЗначение("ПраваНаУчасток");
	
	Участок = РеквизитФормыВЗначение("Объект");
	Участок.ЗаполнитьПоДаннымXml(ДанныеXml, КадастровыйДокумент, ПараметрыПереводаВWgs84, ТаблицаПраваНаУчасток);
	
	ЗначениеВРеквизитФормы(Участок, "Объект");
	ЗначениеВРеквизитФормы(ТаблицаПраваНаУчасток, "ПраваНаУчасток");
	
	МассивРеквизитов = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКадастровогоЗемельногоУчастка));
	Если МассивРеквизитов.Количество() = 1 Тогда
		Реквизит = МассивРеквизитов[0];
		ЭтотОбъект[Реквизит.ИмяРеквизита] = Объект.КонтактнаяИнформация[0].Представление;
		Реквизит.Представление	= Объект.КонтактнаяИнформация[0].Представление;
		Реквизит.Значение		= Объект.КонтактнаяИнформация[0].Значение;
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// кнопка "РосРеестр"

&НаСервере
Процедура ЗагрузитьДанныеИзРосРеестраНаСервере()
	МассивДанныхXml = гисРаботаСКадастром.ЗаполнитьМассивДанныхИзРосреестра(Объект.КадастровыйНомер);
	Если МассивДанныхXml.Количество() = 1 Тогда
		ДанныеXml = гисРаботаСJson.ЗаписатьНативно(МассивДанныхXml[0]);
		ЗаполнитьПоДаннымXml(ДанныеXml);
		
		Модифицированность = Истина;
	ИначеЕсли МассивДанныхXml.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("На сайте РосРеестра нет информации по участку!");
	Иначе
		ОбщегоНазначения.СообщитьПользователю("На сайте РосРеестра информация есть более, чем по одному участку!");
	КонецЕсли;
КонецПроцедуры

// загрузка xml

&НаСервере
Функция ЗагрузитьИзКадастровогоДокументаНаСервере(Адрес, ТипДокумента)
	ИмяФайлаНаСервере = КаталогВременныхФайлов() + "xml " + Формат(ТекущаяДата(), "ДФ=""гггг.ММ.дд ЧЧ-мм-сс""") + ".xml";
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
	
	Если Не гисРаботаСКадастром.ПроверитьXmlНаКорректность(ИмяФайлаНаСервере) Тогда
		ОбщегоНазначения.СообщитьПользователю("Некорректная xml!" + Символы.ПС + "Ошибка разбора xml!");
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Тогда
		ТипДокумента = гисРаботаСКадастром.ПолучитьТипДокумента(ИмяФайлаНаСервере);
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда 
			ОбщегоНазначения.СообщитьПользователю("Тип xml не определен! Загрузка отменена!");
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипДокумента = Перечисления.гисТипыКадастровыхДокументов.КадастровыйПлан9 Тогда
			ОбщегоНазначения.СообщитьПользователю("В земельный участок нельзя загружать кадастровый план! Загрузка отменена!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивДанныхXml = Новый Массив;
	Результат = гисРаботаСКадастром.ЗаполнитьМассивДанныхЗемельныеУчастки(ИмяФайлаНаСервере, ТипДокумента, МассивДанныхXml);
	Если МассивДанныхXml.Количество() = 1 Тогда
		ДанныеXml = гисРаботаСJson.ЗаписатьНативно(МассивДанныхXml[0]);
		ЗаполнитьПоДаннымXml(ДанныеXml);
	ИначеЕсли МассивДанныхXml.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("В файле нет информации по участкам!");
		Возврат Ложь;
	Иначе
		ОбщегоНазначения.СообщитьПользователю("В файле информация более, чем по одному участку!");
		Возврат Ложь;
	КонецЕсли;
	
	Модифицированность = Истина;
	Возврат Истина;
КонецФункции

#КонецОбласти

#КонецОбласти
