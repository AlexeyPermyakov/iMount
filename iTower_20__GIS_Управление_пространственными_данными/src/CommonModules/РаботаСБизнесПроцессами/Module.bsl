
#Область ПрограммныйИнтерфейс

// Функция - Шаблон бизнес процесса по коду
//
// Параметры:
//  ШаблонБПКод	 - Строка - код шаблона бизнес процесса
// 
// Возвращаемое значение:
//  СправочникСсылка.лм_ШаблоныБизнесПроцессов, СправочникСсылка.ШаблоныБизнесПроцессов, Неопределено - Неопределено, если шаблон не найден
//
Функция ШаблонБизнесПроцессаПоКоду(ШаблонБПКод) Экспорт
	
	Возврат РаботаСБизнесПроцессамиПовтИсп.ШаблонБизнесПроцессаПоКоду(ШаблонБПКод);;
	
КонецФункции

Функция ЗаполнитьДанныеБизнесПроцессаИзДанныхИнтеграции(ДанныеБизнесПроцессаПриемник, ШаблонБП, ОбъектXDTO, ЭлементMDMОбъект, Данные, ИдентификаторСправочника, ОшибкаЗаполнения) Экспорт
	
	Если ОшибкаЗаполнения = Неопределено Тогда
		ОшибкаЗаполнения = Новый Структура("КодОшибкиСозданияБП");
	КонецЕсли;
	
	ЗаполнениеДанныхПрошлоУспешно = Истина;
	
	//Если ЭлементMDMОбъект = Неопределено Тогда
	//	Предмет = Неопределено;
	//Иначе
	//	Предмет	= ЭлементMDMОбъект.Ссылка;
	//КонецЕсли;
	//
	//Если ОбщегоНазначения.ПодсистемаСуществует("лм_УправлениеБизнесПроцессами") Тогда
	//	// БП 2: лм_УправлениеБизнесПроцессами
	//	Модуль_лм_СтроковыеФункцииКлиентСервер		= ОбщегоНазначения.ОбщийМодуль("лм_СтроковыеФункцииКлиентСервер");
	//	Модуль_лм_УниверсальныеСтруктурыДанных		= ОбщегоНазначения.ОбщийМодуль("лм_УниверсальныеСтруктурыДанных");
	//	Модуль_лм_БизнесПроцессыПереопределяемый	= ОбщегоНазначения.ОбщийМодуль("лм_БизнесПроцессыПереопределяемый");
	//	
	//	// Определим доступные данные процесса
	//	ствДоступныеДанныеПроцесса = Новый Соответствие;
	//	
	//	УстановитьПривилегированныйРежим(Истина);
	//	УниверсальнаяСтруктура = Модуль_лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ШаблонБП.УникальныйИдентификатор());
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Для Каждого сткОписаниеРеквизитаШаблонаБП Из УниверсальнаяСтруктура.Реквизиты Цикл
	//		ствДоступныеДанныеПроцесса[сткОписаниеРеквизитаШаблонаБП.ИмяПоля] = сткОписаниеРеквизитаШаблонаБП;
	//	КонецЦикла;
	//	
	//	// Заполним данные процесса
	//	Если ЗначениеЗаполнено(Предмет) Тогда
	//		ДанныеБизнесПроцессаПриемник.Вставить("Предмет",			Предмет);
	//	Иначе
	//		ДанныеБизнесПроцессаПриемник.Вставить("Предмет",			Неопределено);
	//	КонецЕсли;
	//	
	//	сткДанныеПроцесса = Новый Структура;
	//	ПрочиеДанныеПроцесса = Новый Соответствие;

	//	Для Каждого элтДанные Из Данные Цикл
	//		Если ТипЗнч(элтДанные.Имя) = Тип("СправочникСсылка.Классификаторы") Тогда
	//			текИдентификаторЭлементаДанных	= УправлениеНСИКлиентСервер.ВидДанныхКлассификатор() + "_" + элтДанные.Имя.Код;
	//		ИначеЕсли ТипЗнч(элтДанные.Имя) = Тип("ПланВидовХарактеристикСсылка.Атрибуты") Тогда
	//			текИдентификаторЭлементаДанных	= УправлениеНСИКлиентСервер.ВидДанныхДополнительноеСвойство() + "_" + элтДанные.Имя.Код;
	//		ИначеЕсли ТипЗнч(элтДанные.Имя) = Тип("Строка") Тогда
	//			текИдентификаторЭлементаДанных = Модуль_лм_СтроковыеФункцииКлиентСервер.ПолучитьВалидныйИдентификатор(элтДанные.Имя);
	//		Иначе
	//			// Ярлыки, связи, и .т.д. пропускаем
	//			ПрочиеДанныеПроцесса.Вставить(элтДанные.Имя, элтДанные.Значение);
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ствДоступныеДанныеПроцесса[текИдентификаторЭлементаДанных] = Неопределено Тогда
	//			// Эти данные не разрешены в текущем шаблоне
	//			ПрочиеДанныеПроцесса.Вставить(элтДанные.Имя, элтДанные.Значение);
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		сткДанныеПроцесса.Вставить(текИдентификаторЭлементаДанных, элтДанные.Значение);
	//	КонецЦикла;
	//	
	//	мсвТПК = Модуль_лм_БизнесПроцессыПереопределяемый.ДанныеТаблицыПереходныхКлючей(Предмет);
	//	Для Каждого refLID Из ОбъектXDTO.refLIDs Цикл
	//		Если refLID.extCatalog = Неопределено Или ПустаяСтрока(refLID.extCatalog.id) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если ПустаяСтрока(refLID.lid) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		сткПереходныйКлюч	= Интеграция.LIDизОбъектаXDTO(refLID);
	//		
	//		Интеграция.ДобавитьПереходныйКлючВТаблицуПереходныхКлючей(мсвТПК, сткПереходныйКлюч);
	//	КонецЦикла;
	//	Для Каждого сткПереходныйКлюч Из мсвТПК Цикл
	//		Если Не сткПереходныйКлюч.Свойство("Выбран") Тогда
	//			сткПереходныйКлюч.Вставить("Выбран", Ложь);
	//		КонецЕсли;
	//	КонецЦикла;
	//	сткДанныеПроцесса.Вставить("ТаблицаПереходныхКлючей",		мсвТПК);
	//	
	//	// Добавим признак автоматического запуска БП
	//	сткДанныеПроцесса.Вставить("ЗапущенАвтоматически",			Истина);
	//	
	//	ДанныеБизнесПроцессаПриемник.Вставить("ДанныеПроцесса",		  сткДанныеПроцесса);
	//	ДанныеБизнесПроцессаПриемник.Вставить("ПрочиеДанныеПроцесса", ПрочиеДанныеПроцесса);

	//ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("БизнесПроцессы") Тогда
	//	// БП 1: БизнесПроцессы
	//	
	//	// Исключительная ситуация может быть следующая:
	//	// Во внешней ИС создали запись до этого, и она там уже существует, а в МДМ приходит при попытке ее редактирования
	//	// и в шаблоне указано НЕ создание записи (например изменение)
	//	// Обработаем эту ситуацию так - сделать процессы создания и изменения записи равнозначными, т.е.
	//	// - в случае попытки изменения несуществующей записи создаем её, 
	//	// - в случае попытки создания уже существующей записи изменяем её.
	//	
	//	Если ЭлементMDMОбъект = Неопределено Тогда
	//		МодульБизнесПроцессы = ОбщегоНазначения.ОбщийМодуль("БизнесПроцессыНСИ");
	//		Если Не МодульБизнесПроцессы.ШаблонМожетСоздаватьНовыеЗаписи(ШаблонБП) Тогда
	//			ОшибкаЗаполнения.КодОшибкиСозданияБП = 18;
	//			
	//			ЗаполнениеДанныхПрошлоУспешно = Ложь;
	//			
	//			Возврат ЗаполнениеДанныхПрошлоУспешно;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ДанныеБизнесПроцессаПриемник.Вставить("Предмет",					Предмет);
	//	ДанныеБизнесПроцессаПриемник.Вставить("ДанныеПроцесса",				Данные);
	//	ДанныеБизнесПроцессаПриемник.Вставить("ИдентификаторСправочника",	ИдентификаторСправочника);
	//	ДанныеБизнесПроцессаПриемник.Вставить("ОписаниеОшибок",				"");
	//	
	//	// Глупость выходит, но нужно думать в сторону создания нескольких ключей одновременно по каждому справочнику
	//	// В модуле еще не реализована передача записей с группировкой по внешним справочникам, поэтому
	//	// берем первую пару LID - OuterCatalog
	//	мсвТПК = Новый Массив;
	//	Для Каждого refLID Из ОбъектXDTO.refLIDs Цикл
	//		Если refLID.extCatalog = Неопределено Или ПустаяСтрока(refLID.extCatalog.id) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если ПустаяСтрока(refLID.lid) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		сткПереходныйКлюч	= Интеграция.LIDизОбъектаXDTO(refLID);
	//		мсвТПК.Добавить(сткПереходныйКлюч);
	//	КонецЦикла;
	//	
	//	ДанныеБизнесПроцессаПриемник.Вставить("ТаблицаПереходныхКлючей",	мсвТПК);
	//КонецЕсли;
	
	Возврат ЗаполнениеДанныхПрошлоУспешно;
	
КонецФункции

// Функция - Создать бизнес процесс по шаблону
//
// Параметры:
//  ШаблонБП				 - СправочникСсылка.лм_ШаблоныБизнесПроцессов, СправочникСсылка.ШаблоныБизнесПроцессов	 - Шаблон бизнес процесса
//  Предмет					 - Произвольный																			 - Предмет бизнес процесса
//  ДанныеПроцесса			 - Структура																			 - структура с данными бизнес процесса
//  ДополнительныеСвойства	 - Структура																			 - дополнительный свойства в зависимости от используемой библиотеки бизнес процессов
// 
// Возвращаемое значение:
//  БизнесПроцессСсылка.лм_БизнесПроцесс, БизнесПроцессСсылка.СоставнойПроцесс, Неопределено - Неопределено, если бизнес процесс не создан
//
Функция СоздатьБизнесПроцессПоШаблону(ШаблонБП, СтруктураДанных) Экспорт
	
	БизнесПроцесс = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("лм_УправлениеБизнесПроцессами") Тогда
		//Функция СоздатьБизнесПроцессПоШаблону(ШаблонБизнесПроцесса,
		//									   Родитель = Неопределено,
		//									    РодительОжидаетЗавершения = Ложь,
		//										 ИдентификаторТочкиВхода = Неопределено,
		//										  Итерация = 1,
		//										   Предмет = Неопределено,
		//										    ДанныеПроцесса = Неопределено) Экспорт
		МодульБизнесПроцессы = ОбщегоНазначения.ОбщийМодуль("лм_БизнесПроцессы");
		
		ДополнительныеПараметры = Новый Структура;
		Если СтруктураДанных.Свойство("ПрочиеДанныеПроцесса") Тогда  
			ДополнительныеПараметры.Вставить("ПрочиеДанныеПроцесса", СтруктураДанных.ПрочиеДанныеПроцесса);
		КонецЕсли;
	   
		БизнесПроцесс = МодульБизнесПроцессы.СоздатьБизнесПроцессПоШаблону(ШаблонБП, , , , , СтруктураДанных.Предмет, СтруктураДанных.ДанныеПроцесса, ДополнительныеПараметры);

	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("БизнесПроцессы") Тогда
		////Метод создает бизнес-процесс на основании шаблона и данных (массив структур)
		////
		//// Параметры:
		////  ИдентификаторСправочникаНСИ	 - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификатор объекта метаданных (Справочник НСИ)
		////  Шаблон	  		             - СправочникСсылка.ШаблоныБизнесПроцессов - Шаблон бизнес-процесса
		////  ОригиналНСИ                  - Определяемый (Справочники НСИ) - эталонная запись
		////  Данные						 - Массив - см. УправлениеНСИКлиентСервер.СтруктураНастройкиСправочникаСоЗначением
		////  ОписаниеОшибок				 - Строка - Тексты ошибок
		//// 
		//// Возвращаемое значение:
		////  БизнесПроцессСсылка.СоставнойПроцесс - 
		////
		//Функция СоздатьБизнесПроцессИзвне(ИдентификаторСправочникаНСИ,
		//								   Шаблон,
		//								    ОригиналНСИ = Неопределено,
		//									 Данные = Неопределено,
		//									  ОписаниеОшибок = Неопределено,
		//									   МассивПереходныхКлючей = Неопределено) Экспорт
		МодульБизнесПроцессы = ОбщегоНазначения.ОбщийМодуль("БизнесПроцессыНСИ");
		
		БизнесПроцесс = МодульБизнесПроцессы.СоздатьБизнесПроцессИзвне(СтруктураДанных.ИдентификаторСправочника,
																		ШаблонБП,
																		 СтруктураДанных.Предмет,
																		  СтруктураДанных.ДанныеПроцесса,
																		   СтруктураДанных.ОписаниеОшибок,
																		    СтруктураДанных.ТаблицаПереходныхКлючей);
	КонецЕсли;
	
	Возврат БизнесПроцесс;
	
КонецФункции

Процедура ПриСозданииФормыЗадачиНаСервере(Форма, РасширенныеНастройки) Экспорт
	
	РаботаСБизнесПроцессамиПереопределяемый.ПриСозданииФормыЗадачиНаСервере(Форма, РасширенныеНастройки);
	
КонецПроцедуры

Функция СкопироватьБизнесПроцессПоЗаявке(Заявка, ДополнительныеПараметры) Экспорт
	
	текНовыйБП = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("лм_УправлениеБизнесПроцессами") Тогда
		// Получим данные процесса
		БизнесПроцесс			= Заявка.БизнесПроцесс;
		ШаблонБП				= БизнесПроцесс.Шаблон;
		ИдентификаторСтруктуры	= ШаблонБП.УникальныйИдентификатор();
		
		УстановитьПривилегированныйРежим(Истина);
		СтруктураДанных		= лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
		ДанныеПроцесса		= лм_УниверсальныеСтруктурыДанных.ПолучитьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, СтруктураДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		// Модифицируем данные процесса для целей "создания на основании"
		// 1. Очистим таблицу ТПК
		// 2. Очистим в данных связанных справочников ссылки на элементы, для создания "новых"
		// 3. Очистим связи;
		// 4. Очистим реквизит "комментарий эксперта";
		// 5. Очистим реквизит "код";
		// 6. Очистим реквизиты с типом "СправочникСсылка.Пользователь";
		Для Каждого кзРеквизитПроцесса Из ДанныеПроцесса Цикл
			Если РаботаСБизнесПроцессамиКлиентСервер.ЭтоРеквизитСвязанныеЭлементы(кзРеквизитПроцесса.Ключ, СтруктураДанных) Тогда
				// Имя реквизита ссылка
				текИмяРеквизитаСсылка = РаботаСБизнесПроцессамиКлиентСервер.ИмяРеквизитаСсылка_РеквизитаСвязанныеЭлементы(кзРеквизитПроцесса.Ключ, СтруктураДанных);
				
				// ПустаяСсылка
				ИмяСвязанногоСправочника = Сред(кзРеквизитПроцесса.Ключ, СтрДлина(РаботаСБизнесПроцессамиКлиентСервер.ПрефиксРеквизитаСвязанныеЭлементы()) + 1);
				ПустаяСсылкаСвязанногоСправочника = Справочники[ИмяСвязанногоСправочника].ПустаяСсылка();
				
				// Очистим ссылки
				Для Каждого сткСвязанныйЭлемент Из кзРеквизитПроцесса.Значение Цикл
					сткСвязанныйЭлемент[текИмяРеквизитаСсылка] = ПустаяСсылкаСвязанногоСправочника;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрСравнить(кзРеквизитПроцесса.Ключ, "ТаблицаПереходныхКлючей") = 0
			   И ТипЗнч(кзРеквизитПроцесса.Значение) = Тип("Массив") Тогда
				// Очистим ТПК
				кзРеквизитПроцесса.Значение.Очистить();
			КонецЕсли;
			
			Если СтрСравнить(кзРеквизитПроцесса.Ключ, "ТаблицаСвязей") = 0 Тогда
				// Очистим связи
				кзРеквизитПроцесса.Значение.Очистить();
			КонецЕсли;
			
			Если СтрСравнить(кзРеквизитПроцесса.Ключ, "КомментарийЭксперта") = 0 Тогда
				// Очистим комментарий эксперта
				ДанныеПроцесса[кзРеквизитПроцесса.Ключ] = "";
			КонецЕсли;
			
			Если СтрСравнить(кзРеквизитПроцесса.Ключ, "Код") = 0 Тогда
				// Очистим Код
				ДанныеПроцесса[кзРеквизитПроцесса.Ключ] = "";
			КонецЕсли;
			
			// Очистим реквизиты с типом "СправочникСсылка.Пользователь"
			Если ТипЗнч(кзРеквизитПроцесса.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
				ДанныеПроцесса[кзРеквизитПроцесса.Ключ] = Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		РаботаСБизнесПроцессамиПереопределяемый.СкопироватьБизнесПроцессПоЗаявке_ПриЗаполненииДанныхПроцесса(ДанныеПроцесса, СтруктураДанных, Заявка, ДополнительныеПараметры);
		
		// Создадим новый бизнес процесс
		МодульБизнесПроцессы = ОбщегоНазначения.ОбщийМодуль("лм_БизнесПроцессы");
		
		БизнесПроцесс = МодульБизнесПроцессы.СоздатьБизнесПроцессПоШаблону(ШаблонБП, , , , , , ДанныеПроцесса, ДополнительныеПараметры);
		
		// Вернём ссылку на новый бизнес процесс
		текНовыйБП = БизнесПроцесс;
	КонецЕсли;
	
	Возврат текНовыйБП;
	
КонецФункции

Процедура СоздатьБизнесПроцесс_ПередЗаписьюДанныхПроцесса(ДанныеПроцесса, СтруктураДанных, БизнесПроцесс, ДополнительныеПараметры) Экспорт
	
// Подсистема СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначения.ПодсистемаСуществует("лм_УправлениеБизнесПроцессами") 
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		
		текКопироватьФайлы	= Ложь;
		мсвКопируемыеФайлы	= Новый Массив;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		   И ДополнительныеПараметры.Свойство("КопироватьФайлы") Тогда
			текКопироватьФайлы = (ДополнительныеПараметры.КопироватьФайлы = Истина);
		КонецЕсли;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		   И ДополнительныеПараметры.Свойство("КопируемыеФайлы")
		   И ТипЗнч(ДополнительныеПараметры.КопируемыеФайлы) = Тип("Массив") Тогда
			мсвКопируемыеФайлы = ДополнительныеПараметры.КопируемыеФайлы;
		КонецЕсли;
		
		Если текКопироватьФайлы И мсвКопируемыеФайлы.Количество() > 0 Тогда
			// Получим данные файлов и подготовим данные для их создания
			ствЗаменаСсылок = Новый Соответствие;
			Для Каждого элтФайл Из мсвКопируемыеФайлы Цикл
				сткДанныеФайла										= МодульРаботаСФайлами.ДанныеФайла(элтФайл);
				
				сткДанныеНовогоФайла								= Новый_СтруктураДанныхФайла();
				сткДанныеНовогоФайла.Автор							= ПользователиКлиентСервер.ТекущийПользователь();
				сткДанныеНовогоФайла.ВладелецФайлов					= БизнесПроцесс;
				сткДанныеНовогоФайла.ИмяБезРасширения				= сткДанныеФайла.Наименование;
				сткДанныеНовогоФайла.РасширениеБезТочки				= сткДанныеФайла.Расширение;
				
				НовыйФайлСсылка										= МодульРаботаСФайлами.ДобавитьФайл(сткДанныеНовогоФайла, сткДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				
				ствЗаменаСсылок[элтФайл]							= НовыйФайлСсылка;
			КонецЦикла;
			
			// Найдем ссылки на файлы и заменим их
			Для Каждого сткРеквизит Из СтруктураДанных.Реквизиты Цикл
				Если ДанныеПроцесса.Свойство(сткРеквизит.ИмяПоля)
				   И ствЗаменаСсылок[ДанныеПроцесса[сткРеквизит.ИмяПоля]] <> Неопределено Тогда
					ДанныеПроцесса[сткРеквизит.ИмяПоля] = ствЗаменаСсылок[ДанныеПроцесса[сткРеквизит.ИмяПоля]];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
// Конец Подсистема СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

Процедура ВыполнитьФоновоеФормированиеКэшейУниверсальныхСтруктур(Источник = Неопределено) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
		            |	лм_ШаблоныБизнесПроцессов.Ссылка КАК Ссылка
		            |ИЗ
		            |	Справочник.лм_ШаблоныБизнесПроцессов КАК лм_ШаблоныБизнесПроцессов";		
	
	ВладелецСтруктуры = Неопределено;
	
	Если Источник <> Неопределено 
		И ТипЗнч(Источник) = Тип("СправочникОбъект.лм_ШаблоныБизнесПроцессов") Тогда		
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.КэшУниверсальныхСтруктурДанных.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСтруктуры.Установить(Источник.Ссылка.УникальныйИдентификатор());
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	лм_ШаблоныБизнесПроцессов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.лм_ШаблоныБизнесПроцессов КАК лм_ШаблоныБизнесПроцессов
		               |ГДЕ
		               |	лм_ШаблоныБизнесПроцессов.Ссылка = &Шаблон";
		Запрос.УстановитьПараметр("Шаблон", Источник.Ссылка);	
		
		ВладелецСтруктуры = Источник.Ссылка;
	КонецЕсли;
			
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИдентификаторСтруктуры  = Выборка.Ссылка.УникальныйИдентификатор();
		ДополнительныеПараметры = Новый Структура("НеИспользоватьКэш, ВладелецСтруктуры", Истина, ВладелецСтруктуры);
		МассивПараметров        = Новый Массив;
		МассивПараметров.Добавить(ИдентификаторСтруктуры);
		МассивПараметров.Добавить(ДополнительныеПараметры);
		ФоновыеЗадания.Выполнить("лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры", МассивПараметров);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытие

Процедура ПриЗаписиОбъектаИсточникаДанныхУниверсальнойСтруктурыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиРегистраИсточникаДанныхУниверсальнойСтруктурыПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	//УстановитьПризнакАктуальностиКэшейУниверсальныхСтруктур(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбъекта

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПризнакАктуальностиКэшейУниверсальныхСтруктур(ПризнакАктуальности, ИдентификаторСтруктуры = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.КэшУниверсальныхСтруктурДанных.СоздатьНаборЗаписей();
	
	Если ИдентификаторСтруктуры <> Неопределено Тогда
		НаборЗаписей.Отбор.ИдентификаторСтруктуры.Установить(ИдентификаторСтруктуры);	
	КонецЕсли;
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Актуален = ПризнакАктуальности;	
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция Новый_СтруктураДанныхФайла()
	ПараметрыФайла = Новый Структура;
	
	ПараметрыФайла.Вставить("Автор");
	ПараметрыФайла.Вставить("ВладелецФайлов");
	ПараметрыФайла.Вставить("ИмяБезРасширения");
	ПараметрыФайла.Вставить("РасширениеБезТочки");
	ПараметрыФайла.Вставить("ГруппаФайлов");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	Возврат ПараметрыФайла
КонецФункции

#КонецОбласти

