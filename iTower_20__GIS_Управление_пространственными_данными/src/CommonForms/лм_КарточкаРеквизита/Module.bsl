

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьГруппуУниверсальнаяСтруктура();
	ЗаполнитьКарточкуРеквизита();
	
	ЗаполнениеПоДаннымПредмета();
	ОбновитьСоставЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Свойства_УстановленаЗависимостьРеквизита"
		 И Параметр.ИдентификаторФормыВладельца = ЭтаФорма.УникальныйИдентификатор Тогда
		Модифицированность = Истина;
		ЗначениеДобавлено = Ложь;
		Для Каждого УсловиеЗависимости Из УсловияЗависимостиРеквизитов Цикл
			Значение = Неопределено;
			Если Параметр.Свойство(УсловиеЗависимости.Представление, Значение) Тогда
				ЗначениеВХранилище = ПоместитьВоВременноеХранилище(Значение, УникальныйИдентификатор);
				УсловиеЗависимости.Значение = ЗначениеВХранилище;
				ЗначениеДобавлено = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеДобавлено Тогда
			Для Каждого ПереданныйПараметр Из Параметр Цикл
				Если ПереданныйПараметр.Ключ = "ИдентификаторФормыВладельца" Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеВХранилище = ПоместитьВоВременноеХранилище(ПереданныйПараметр.Значение, УникальныйИдентификатор);
				УсловияЗависимостиРеквизитов.Добавить(ЗначениеВХранилище, ПереданныйПараметр.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		УстановитьЗависимостиДополнительныхРеквизитов();
	КонецЕсли;
	
	// Универсальные структуры данных
	лм_УниверсальныеСтруктурыДанныхКлиент.ДобавитьИзменитьДанныеРеквизитаУниверсальнойСтруктуры(ИмяСобытия, Параметр, ЭтаФорма);
	// Универсальные структуры данных
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТочкиЗаполняемыеПоПредметуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ЗаполнитьПоПредметуВыборТочекДействия", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ТочкиДоступныеПоПредмету, ТочкиЗаполняемыеПоПредмету", ТочкиДоступныеПоПредмету, ТочкиЗаполняемыеПоПредмету);
	
	ОткрытьФорму("Справочник.лм_ШаблоныБизнесПроцессов.Форма.ФормаВыбораТочекДействия", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,ОповещениеЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МногострочноеПолеВводаЧислоПриИзменении(Элемент)
	
	ПредставлениеРеквизита = "МногострочноеПолеВвода";
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	
	ОбновитьСоставЭлементовФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьУсловиеДоступностиНажатие(Элемент)
	ОткрытьФормуНастройкиЗависимости("Доступен");
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьУсловиеНажатие(Элемент)
	ОткрытьФормуНастройкиЗависимости("ЗаполнятьОбязательно");
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьУсловиеВидимостиНажатие(Элемент)
	ОткрытьФормуНастройкиЗависимости("Виден");
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьОбязательноПриИзменении(Элемент)
	Элементы.ЗадатьУсловиеЗаполнения.Доступность = ЗаполнятьОбязательно;
КонецПроцедуры

&НаКлиенте
Процедура ВидРеквизитаПриИзменении(Элемент)
	Элементы.ВыводитьВВидеГиперссылки.Доступность    = (ПредставлениеРеквизита = "ОднострочноеПолеВвода");
	Элементы.МногострочноеПолеВводаЧисло.Доступность = (ПредставлениеРеквизита = "МногострочноеПолеВвода");
КонецПроцедуры

&НаКлиенте
Процедура лм_УниверсальныеСтруктурыДанных_ПередНачаломИзменения(Элемент, Отказ)
	
	// Универсальные структуры данных	
	лм_УниверсальныеСтруктурыДанныхКлиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма); 
	// Универсальные структуры данных
		
КонецПроцедуры

&НаКлиенте
Процедура лм_УниверсальныеСтруктурыДанных_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Универсальные структуры данных	
	лм_УниверсальныеСтруктурыДанныхКлиент.ПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма); 
	// Универсальные структуры данных
		
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыборТипаЗначения", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ЭтоОсновнаяСтруктура, ТипЗначения, ВидСправочника", ЭтоОсновнаяСтруктура, ТипЗначения, ВидСправочника);
	
	ОткрытьФорму("ОбщаяФорма.лм_РедактированиеТипаДанных", ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТипЗначения = Результат.ОписаниеВыбранногоТипа;
	
	Если Результат.Свойство("ВидСправочника") Тогда
		ВидСправочника = Результат.ВидСправочника;	
	КонецЕсли;
	
	ПредставлениеТипаЗначения = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ПолучитьПредставлениеТипаЗначения(ТипЗначения, ВидСправочника);;
	
	ОбновитьСоставЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьФорматЗначения(Команда)
	
	Конструктор = Новый КонструкторФорматнойСтроки(ФорматСвойства);	
	Конструктор.ДоступныеТипы = ТипЗначения;
	Конструктор.Показать(Новый ОписаниеОповещения("РедактироватьФорматЗначенияЗавершение", ЭтотОбъект));
	
КонецПроцедуры
	
&НаКлиенте
Процедура РедактироватьФорматЗначенияЗавершение(Текст, Контекст) Экспорт
	
	Если Текст <> Неопределено Тогда
		ФорматСвойства = Текст;
		УстановитьЗаголовокКнопкиФормата(ЭтотОбъект);
		
		ТекстПредупреждения = НСтр("ru = 'Следующие настройки формата автоматически не применяются в большинстве мест:'");
		Массив = СтрРазделить(Текст, ";", Ложь);
		
		Для каждого Подстрока Из Массив Цикл
			Если СтрНайти(Подстрока, "ДП=") > 0 ИЛИ СтрНайти(Подстрока, "DE=") > 0 Тогда
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
					+ " - " + НСтр("ru = 'представление пустой даты'");
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Подстрока, "ЧН=") > 0 ИЛИ СтрНайти(Подстрока, "NZ=") > 0 Тогда
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
					+ " - " + НСтр("ru = 'представление пустого числа'");
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Подстрока, "ДФ=") > 0 ИЛИ СтрНайти(Подстрока, "DF=") > 0 Тогда
				Если СтрНайти(Подстрока, "ддд") > 0 ИЛИ СтрНайти(Подстрока, "ddd") > 0 Тогда
					ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
						+ " - " + НСтр("ru = 'кратное название дня недели'");
				КонецЕсли;
				Если СтрНайти(Подстрока, "дддд") > 0 ИЛИ СтрНайти(Подстрока, "dddd") > 0 Тогда
					ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
						+ " - " + НСтр("ru = 'полное название дня недели'");
				КонецЕсли;
				Если СтрНайти(Подстрока, "МММ") > 0 ИЛИ СтрНайти(Подстрока, "MMM") > 0 Тогда
					ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
						+ " - " + НСтр("ru = 'кратное название месяца'");
				КонецЕсли;
				Если СтрНайти(Подстрока, "ММММ") > 0 ИЛИ СтрНайти(Подстрока, "MMMM") > 0 Тогда
					ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
						+ " - " + НСтр("ru = 'полное название месяца'");
				КонецЕсли;
			КонецЕсли;
			Если СтрНайти(Подстрока, "ДЛФ=") > 0 ИЛИ СтрНайти(Подстрока, "DLF=") > 0 Тогда
				Если СтрНайти(Подстрока, "ДД") > 0 ИЛИ СтрНайти(Подстрока, "DD") > 0 Тогда
					ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
						+ " - " + НСтр("ru = 'длинная дата (месяц прописью)'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрЧислоСтрок(ТекстПредупреждения) > 1 Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаполнитьИмяПоля();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЗакрытиеФормы();
	Оповестить("лм_УниверсальныеСтруктурыДанных_ЗаписьРеквизита", СформироватьСтруктуруРеквизита());
	Закрыть();	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКарточкуРеквизита()
	
	Нередактируемый 			= Параметры.Нередактируемый;
	
	ИмяПоля                     = Параметры.ИмяПоля; 
	Синоним                     = Параметры.Синоним;
	Идентификатор               = Параметры.Идентификатор;
	ТипЗначения                 = Параметры.ТипЗначения;
	ИдентификаторФормыВладельца = Параметры.ИдентификаторФормыВладельца;
	ВыводитьВВидеГиперссылки    = Параметры.ВыводитьВВидеГиперссылки;
	ЗаполнятьОбязательно        = Параметры.ЗаполнятьОбязательно;
	Подсказка                   = Параметры.Подсказка;
	Комментарий                 = Параметры.Комментарий;
	ФорматСвойства              = Параметры.ФорматСвойства;
		
	ВидСправочника             		   = Параметры.ВидСправочника;
	ДоступныеТипы                      = Элементы.ТипЗначения.ДоступныеТипы;
	СсылочныеТипы                      = Метаданные.ОпределяемыеТипы.лм_СсылочныйТипРеквизитаСтруктуры.Тип.Типы();	
	Элементы.ТипЗначения.ДоступныеТипы = Новый ОписаниеТипов(ДоступныеТипы, СсылочныеТипы);		
	
	ПредставлениеТипаЗначения = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ПолучитьПредставлениеТипаЗначения(ТипЗначения, ВидСправочника);
	
	ЭтоОсновнаяСтруктура = Параметры.ЭтоОсновнаяСтруктура;
	
	Для Каждого Стр Из Параметры.РеквизитыСтруктуры Цикл
		СтрТЗ = РеквизитыСтруктуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТЗ, Стр);
	КонецЦикла;
	
	Если Параметры.Свойство("СвойстваРеквизитов") Тогда
		Для Каждого Стр Из Параметры.СвойстваРеквизитов Цикл
			СтрТЗ = ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыРеквизитов()].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЗ, Стр);
			СтрТЗ.ПредставлениеТипаЗначения = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ПолучитьПредставлениеТипаЗначения(Стр.ТипЗначения, Стр.ВидСправочника);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗависимостиРеквизитов") Тогда
		Для Каждого Стр Из Параметры.ЗависимостиРеквизитов Цикл
			СтрТЗ = ЗависимостиРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЗ, Стр);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗависимостиСвойств") Тогда
		Для Каждого Стр Из Параметры.ЗависимостиСвойств Цикл
			СтрТЗ = ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыЗависимостей()].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЗ, Стр);
		КонецЦикла;
	КонецЕсли;	
	
	Если Параметры.МногострочноеПолеВвода > 0 Тогда
		ПредставлениеРеквизита = "МногострочноеПолеВвода";
		МногострочноеПолеВводаЧисло = Параметры.МногострочноеПолеВвода;
	Иначе
		ПредставлениеРеквизита = "ОднострочноеПолеВвода";
	КонецЕсли;
	
	Элементы.ВыводитьВВидеГиперссылки.Доступность    = (ПредставлениеРеквизита = "ОднострочноеПолеВвода");
	Элементы.МногострочноеПолеВводаЧисло.Доступность = (ПредставлениеРеквизита = "МногострочноеПолеВвода");	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПоДаннымПредмета()
	
	Элементы.ГруппаНаименованиеРеквизита.Доступность 	= Не Нередактируемый;
	Элементы.ТипЗначенияРеквизита.Доступность 			= Не Нередактируемый;
	Элементы.ГруппаМногострочность.Доступность 			= Не Нередактируемый;
	Элементы.ГлавнаяСтраница.Доступность 				= Не Нередактируемый;
	Элементы.ГруппаДляРазработчиков.Доступность 		= Не Нередактируемый;
	Элементы.ФормаЗаписать.Доступность 					= Не Нередактируемый;
	
	Элементы.СтраницаЗначения.Видимость 				= Истина;
	Элементы.СтраницыЗначенияРеквизита.Видимость 		= Ложь;
	Элементы.УточнениеСпискаЗначений.Видимость 			= Ложь;
	
	ЗаполнятьТД = Ложь;
	Если Параметры.Свойство("ЗаполнитьПоДаннымПредмета")
		И Параметры.Свойство("СписокТочекДействия") И ЗначениеЗаполнено(Параметры.СписокТочекДействия) Тогда
		ТочкиЗаполняемыеПоПредмету = Параметры.ЗаполнитьПоДаннымПредмета;
        ТочкиДоступныеПоПредмету   = Параметры.СписокТочекДействия;
		ЗаполнятьТД = Истина;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ТочкиЗаполняемыеПоПредмету.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредметуВыборТочекДействия(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТочкиЗаполняемыеПоПредмету.Очистить();
	Для Каждого ТочкаДействия Из РезультатВыбора.ТочкиЗаполняемыеПоПредмету Цикл
		Если ТочкаДействия.Пометка Тогда
			ТочкиЗаполняемыеПоПредмету.Добавить(ТочкаДействия.Значение, ТочкаДействия.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставЭлементовФормы()
	
	УстановитьЗаголовокФормы();
	
	Если НЕ ТипЗначения.СодержитТип(Тип("Число"))
	   И НЕ ТипЗначения.СодержитТип(Тип("Дата"))
	   И НЕ ТипЗначения.СодержитТип(Тип("Булево")) Тогда
		
		ФорматСвойства = "";
	КонецЕсли;	
	
	УстановитьЗаголовокКнопкиФормата(ЭтотОбъект);	
	
	Если НЕ (ТипЗначения.СодержитТип(Тип("Число" ))
	         ИЛИ ТипЗначения.СодержитТип(Тип("Дата"  ))
	         ИЛИ ТипЗначения.СодержитТип(Тип("Булево")) )Тогда
		
		Элементы.РедактироватьФорматЗначения.Видимость = Ложь;
	Иначе
		Элементы.РедактироватьФорматЗначения.Видимость = Истина;
	КонецЕсли;
	
	РазрешитьВыборМногострочногоПоля = (ТипЗначения.Типы().Количество() = 1)
		И (ТипЗначения.СодержитТип(Тип("Строка")));
	РазрешитьВыводВВидеГиперссылки   = РазрешитьВыборМногострочногоПоля
		Или (Не ТипЗначения.СодержитТип(Тип("Строка"))
			И Не ТипЗначения.СодержитТип(Тип("Дата"))
			И Не ТипЗначения.СодержитТип(Тип("Булево"))
			И Не ТипЗначения.СодержитТип(Тип("Число"))
			И Не ТипЗначения.СодержитТип(Тип("Структура")));
			
	Если ТипЗначения.СодержитТип(Тип("Структура")) Тогда
		Элементы.ГруппаУниверсальнаяСтруктура.Видимость = Истина;
	Иначе
		Элементы.ГруппаУниверсальнаяСтруктура.Видимость = Ложь;
	КонецЕсли;		
	
	Элементы.ОднострочныйВид.Видимость                       = РазрешитьВыборМногострочногоПоля;
	Элементы.ГруппаМногострочноеПолеВводаНастройки.Видимость = РазрешитьВыборМногострочногоПоля;
	Элементы.ВыводитьВВидеГиперссылки.Видимость              = РазрешитьВыводВВидеГиперссылки;	
		
	РеквизитБулево = (ТипЗначения = Новый ОписаниеТипов("Булево"));
	Элементы.ЗаполнятьОбязательно.Видимость    = Не РеквизитБулево;
	Элементы.ЗадатьУсловиеЗаполнения.Видимость = Не РеквизитБулево;
	Элементы.ГруппаСвойстваИЗависимости.Видимость = Истина;
	
	Элементы.ЗадатьУсловиеЗаполнения.Доступность   = ЗаполнятьОбязательно;
	Элементы.ЗадатьУсловиеДоступности.Доступность  = Истина;
	Элементы.ЗадатьУсловиеВидимости.Доступность    = Истина;
	УстановитьЗаголовкиГиперссылок();
		
	// заглушка
	Элементы.ГруппаЗаголовкиФормЗначений.Видимость = Ложь;
	
	Если НЕ ПоказатьУточнениеНабора Тогда
		Элементы.УточнениеНаборов.Видимость = Ложь;
	КонецЕсли;	
	// заглушка
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Заголовок = НСтр("ru = 'Новый (Создание реквизита)'");
	Иначе
		Заголовок = Синоним + НСтр("ru = ' (Реквизит)'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКнопкиФормата(Форма)
	
	Если ПустаяСтрока(Форма.ФорматСвойства) Тогда
		ТекстЗаголовка = НСтр("ru = 'Формат по умолчанию'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Формат установлен'");
	КонецЕсли;
	
	Форма.Элементы.РедактироватьФорматЗначения.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиЗависимости(НастраиваемоеСвойство)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РеквизитыСтруктуры",          РеквизитыСтруктуры);
	ПараметрыФормы.Вставить("ЗависимостиРеквизитов",       ЗависимостиРеквизитов);
	ПараметрыФормы.Вставить("Синоним",                     Синоним);
	ПараметрыФормы.Вставить("НастраиваемоеСвойство",       НастраиваемоеСвойство);
	ПараметрыФормы.Вставить("ИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.лм_ЗависимостьРеквизитов", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗависимостиДополнительныхРеквизитов()
	
	Если УсловияЗависимостиРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УсловиеЗависимости Из УсловияЗависимостиРеквизитов Цикл
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ЗависимоеСвойство", УсловиеЗависимости.Представление);
		МассивСтрок = ЗависимостиРеквизитов.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
			ЗависимостиРеквизитов.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		ЗначениеИзХранилища = ПолучитьИзВременногоХранилища(УсловиеЗависимости.Значение);
		Если ЗначениеИзХранилища = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого НоваяЗависимость Из ЗначениеИзХранилища.Получить() Цикл
			ЗаполнитьЗначенияСвойств(ЗависимостиРеквизитов.Добавить(), НоваяЗависимость);
		КонецЦикла;
	КонецЦикла;
	
	УстановитьЗаголовкиГиперссылок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиГиперссылок()
	
	ЗаданаЗависимостьДоступности              = Ложь;
	ЗаданаЗависимостьОбязательностиЗаполнения = Ложь;
	ЗаданаЗависимостьВидимости                = Ложь;
	ЗависимостиСвойств                        = ЗависимостиРеквизитов;
	
	Для Каждого ЗависимостьСвойства Из ЗависимостиСвойств Цикл
		Если ЗависимостьСвойства.ЗависимоеСвойство = "Доступен" Тогда
			ЗаданаЗависимостьДоступности = Истина;
		ИначеЕсли ЗависимостьСвойства.ЗависимоеСвойство = "ЗаполнятьОбязательно" Тогда
			ЗаданаЗависимостьОбязательностиЗаполнения = Истина;
		ИначеЕсли ЗависимостьСвойства.ЗависимоеСвойство = "Виден" Тогда
			ЗаданаЗависимостьВидимости = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ШаблонЗависимостьЗадана = НСтр("ru = 'при заданном условии'");
	ШаблонЗависимостьНеЗадана = НСтр("ru = 'всегда'");
	
	Элементы.ЗадатьУсловиеДоступности.Заголовок = ?(ЗаданаЗависимостьДоступности,
		ШаблонЗависимостьЗадана,
		ШаблонЗависимостьНеЗадана);
	
	Элементы.ЗадатьУсловиеЗаполнения.Заголовок = ?(ЗаданаЗависимостьОбязательностиЗаполнения,
		ШаблонЗависимостьЗадана,
		ШаблонЗависимостьНеЗадана);
	
	Элементы.ЗадатьУсловиеВидимости.Заголовок = ?(ЗаданаЗависимостьВидимости,
		ШаблонЗависимостьЗадана,
		ШаблонЗависимостьНеЗадана);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуУниверсальнаяСтруктура()
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ВыводитьСписокСтруктур", Ложь);
	ПараметрыФормы.Вставить("ИмяГруппы",              "ГруппаУниверсальнаяСтруктура");
	ПараметрыФормы.Вставить("Структуры",              Новый Массив());
	ПараметрыФормы.Вставить("ЭтоОсновнаяСтруктура",   Ложь);
	
	лм_УниверсальныеСтруктурыДанных.ФормаНастроекПриСозданииНаСервере(ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруРеквизита()
	
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Идентификатор",               Идентификатор);
	СтруктураРеквизита.Вставить("ИмяПоля",                     ИмяПоля);
	СтруктураРеквизита.Вставить("Синоним",                     Синоним);
	СтруктураРеквизита.Вставить("ТипЗначения",                 ТипЗначения);
	СтруктураРеквизита.Вставить("МногострочноеПолеВвода",      МногострочноеПолеВводаЧисло);
	СтруктураРеквизита.Вставить("ЗаполнятьОбязательно",        ЗаполнятьОбязательно);
	СтруктураРеквизита.Вставить("ВыводитьВВидеГиперссылки",    ВыводитьВВидеГиперссылки);
	СтруктураРеквизита.Вставить("ИдентификаторФормыВладельца", ИдентификаторФормыВладельца);
	СтруктураРеквизита.Вставить("ЗависимостиРеквизитов",       ЗависимостиРеквизитов);
	СтруктураРеквизита.Вставить("Подсказка",                   Подсказка);
	СтруктураРеквизита.Вставить("Комментарий",                 Комментарий);
	СтруктураРеквизита.Вставить("ФорматСвойства",              ФорматСвойства);
	СтруктураРеквизита.Вставить("ВидСправочника",              ВидСправочника);
	СтруктураРеквизита.Вставить("Нередактируемый",             Нередактируемый);
	СтруктураРеквизита.Вставить("ЗаполнитьПоДаннымПредмета",   ТочкиЗаполняемыеПоПредмету);
	СтруктураРеквизита.Вставить("СвойстваРеквизитов",          ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыРеквизитов()]);
	СтруктураРеквизита.Вставить("ЗависимостиСвойств",          ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыЗависимостей()]);
	
	Возврат СтруктураРеквизита;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеФормы()
	
	Если ПредставлениеРеквизита = "МногострочноеПолеВвода" Тогда
		ВыводитьВВидеГиперссылки = Ложь;
	Иначе	
		МногострочноеПолеВводаЧисло = 0;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИмяПоля()
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Синоним) Тогда
		Возврат;	
	КонецЕсли;
	
	СтрИмяПоля = СтрЗаменить(Синоним, " ", "_");
	
	ЕстьДубли = Истина;
	
	Пока ЕстьДубли Цикл
		Отбор        = Новый Структура("Реквизит", СтрИмяПоля);
		СтрокиОтбора = ЭтаФорма.РеквизитыСтруктуры.НайтиСтроки(Отбор);
		
		Если СтрокиОтбора.Количество() <> 0 Тогда
			СтрИмяПоля = СтрИмяПоля + "_";			
		Иначе
			ЕстьДубли = Ложь;
		КонецЕсли;		
	КонецЦикла;
	
	Если лм_СтроковыеФункцииКлиентСервер.ЭтоВалидныйИдентификатор(СтрИмяПоля) Тогда	
		ИмяПоля = СтрИмяПоля;
	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти
