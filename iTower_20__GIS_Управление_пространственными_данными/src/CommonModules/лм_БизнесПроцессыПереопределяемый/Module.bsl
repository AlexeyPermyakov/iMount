
#Область ПрограммныйИнтерфейс

// Функция - Определить форму настроек действия точки обработки
//
// Параметры:
//  ТипДействия	 - ПеречислениеСсылка.лм_ТипыДействийТочкиОбработки	 - тип действия точки обработки
// 
// Возвращаемое значение:
//  Строка - полное имя формы настройки действия
//
Функция ОпределитьФормуНастроекДействияТочкиОбработки(ТипДействия) Экспорт
КонецФункции

// Процедура - Выполнить действие точки обработки
//
// Параметры:
//  ТипДействия			 - ПеречислениеСсылка.лм_ТипыДействийТочкиОбработки	 - тип действия точки обработки
//  НастройкиДействия	 - Структура	 - структура настроек действия
//  Параметры			 - Структура	 - структура параметров точки обработки
//  ОбщиеПараметры		 - Структура	 - структура параметров выполнения бизнес-процесса
//
Процедура ВыполнитьДействиеТочкиОбработки(ТипДействия, НастройкиДействия, Параметры, ОбщиеПараметры, БизнесПроцесс, ДанныеПроцесса, СтруктураДанных) Экспорт
	
	Если ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.ИнициализацияДанныхСправочникаНСИ") Тогда
		ИнициализацияДанныхСправочникаНСИ(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.ЗаписьДанныхСправочникаНСИ") Тогда
		ЗаписьДанныхСправочникаНСИ(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.ПереносПрисоединенныхФайловВЗаписьСправочникаНСИ") Тогда
		ПереносПрисоединенныхФайловВЗаписьСправочникаНСИ(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормыЗадачиНаСервере(Форма, РасширенныеНастройки) Экспорт
	
	//УстановитьОграниченияТиповАтрибутов(Форма);	
	
// Подсистема MDMЯдро
	Отбор = Новый Структура("Имя", "РасширеннаяНастройкаНСИ");
	СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(РасширенныеНастройки, Отбор);
	
	Если СтрокиОтбора.Количество() <> 0 Тогда
		КастомизацияДляСправочникаНСИ(Форма, СтрокиОтбора[0]);	
	КонецЕсли;
	
	РаботаСБизнесПроцессами.ПриСозданииФормыЗадачиНаСервере(Форма, РасширенныеНастройки);
// Конец Подсистема MDMЯдро

КонецПроцедуры

Процедура ПриЗаписиЗадачи(Отказ, ЗадачаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяСвойстваСменыПредмета = "СменаПредмета"; 
	Если Не ЗадачаОбъект.Выполнена И ЗадачаОбъект.Предмет <> ЗадачаОбъект.БизнесПроцесс.Предмет И НЕ ЗадачаОбъект.ДополнительныеСвойства.Свойство(ИмяСвойстваСменыПредмета) Тогда
		Попытка
			БизнесПроцессОбъект         = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Предмет = ЗадачаОбъект.Предмет;
			БизнесПроцессОбъект.Записать();
			
			Запрос       = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
			               |ИЗ
			               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			               |ГДЕ
			               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			               |	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
			               |	И ЗадачаИсполнителя.Ссылка <> &ТекущаяЗадача";
			
			Запрос.УстановитьПараметр("БизнесПроцесс", ЗадачаОбъект.БизнесПроцесс);
			Запрос.УстановитьПараметр("ТекущаяЗадача", ЗадачаОбъект.Ссылка);
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ПараллельнаяЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ПараллельнаяЗадачаОбъект.ДополнительныеСвойства.Вставить(ИмяСвойстваСменыПредмета, Истина);
					ПараллельнаяЗадачаОбъект.Предмет = ЗадачаОбъект.Предмет;
					ПараллельнаяЗадачаОбъект.Записать();
				КонецЦикла;
			КонецЕсли;			
		Исключение
			Отказ = Истина;	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыполненииЗадачи(Форма) Экспорт
	
	АдресДанныхПредмета = "";
	
	Попытка
		АдресДанныхПредмета = Форма["АдресДанныхПредмета"];
	Исключение
	КонецПопытки;
		
	Если ЗначениеЗаполнено(АдресДанныхПредмета) Тогда
		ДанныеПредмета = ПолучитьИзВременногоХранилища(АдресДанныхПредмета);
		ПараметрыБП    = лм_БизнесПроцессы.ПолучитьОбщиеПараметрыБизнесПроцесса(Форма.Объект.БизнесПроцесс);
		Если Не ПараметрыБП.Свойство("ДанныеПредметовЗадачMDM") Тогда
			ПараметрыБП.Вставить("ДанныеПредметовЗадачMDM", Новый Соответствие);		
		КонецЕсли;
		ДанныеПредметовЗадачMDM = ПараметрыБП.ДанныеПредметовЗадачMDM;
		ДанныеПредметовЗадачMDM.Вставить(Форма.Объект.Ссылка.УникальныйИдентификатор(), ДанныеПредмета);
		лм_БизнесПроцессы.ЗаписатьОбщиеПараметрыБизнесПроцесса(Форма.Объект.БизнесПроцесс, ПараметрыБП);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры, УниверсальнаяСтруктура) Экспорт
	
	Если УниверсальнаяСтруктура <> Неопределено Тогда
		НовыйРеквизит               = Реквизиты.Добавить();
		НовыйРеквизит.Имя           = "Таблица_основные_данные";
		НовыйРеквизит.Представление = "Таблица основных данных";					
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриФормированииСообщения(Сообщение, Предмет, УниверсальнаяСтруктура, ДанныеСтруктуры) Экспорт
	
	ТаблицаОсновныеДанные = СформироватьТаблицуОсновныхДанныхПроцесса(Предмет, УниверсальнаяСтруктура, ДанныеСтруктуры);
	Сообщение.ЗначенияРеквизитов.Вставить("Таблица_основные_данные", ПреобразоватьТаблицуЗначенийВHTMLСтроку(ТаблицаОсновныеДанные));
	
КонецПроцедуры

Процедура ПриПроверкеЗаполненияРеквизитовЗадачи(Форма, МассивПроверяемых, Результат) Экспорт
	
	ИмяТаблицыДанных = лм_БизнесПроцессыКлиентСерверПереопределяемый.ИмяТаблицыДанных();
	
	Если Форма.Элементы.Найти(ИмяТаблицыДанных) <> Неопределено Тогда
		ТаблицаДанных = Форма[ИмяТаблицыДанных];		
		МассивРезультат = Новый Массив;
		
		Отбор = Новый Структура("АвтоОтметкаНезаполненного", Истина);
		СтрокиОтбора = ТаблицаДанных.НайтиСтроки(Отбор);
		
		Для Каждого Стр Из СтрокиОтбора Цикл
			Если МассивПроверяемых.Найти(Стр.ИмяРеквизита) = Неопределено Тогда
				МассивПроверяемых.Добавить(Стр.ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Реквизит Из МассивПроверяемых Цикл
			Если СтрНайти(Реквизит, ".") = 0 Тогда
				Отбор = Новый Структура("ИмяРеквизита", Реквизит);
				СтрокиОтбора = ТаблицаДанных.НайтиСтроки(Отбор);
				Если СтрокиОтбора.Количество() <> 0 Тогда
					Если Не ЗначениеЗаполнено(СтрокиОтбора[0].НовоеЗначение) Тогда
						Сообщение       = Новый СообщениеПользователю;
						Сообщение.Текст = "Не заполнено значение в поле " + СтрокиОтбора[0].Наименование;
						Сообщение.Поле  = ИмяТаблицыДанных + "[" + ТаблицаДанных.Индекс(СтрокиОтбора[0]) + "].НовоеЗначение";
						Сообщение.Сообщить();
						Результат = Ложь;						
					КонецЕсли;
				КонецЕсли;
			Иначе
				МассивРезультат.Добавить(Реквизит);	
			КонецЕсли;
		КонецЦикла;
		
		МассивПроверяемых = МассивРезультат;
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруДанныхПредмета(Предмет) Экспорт
	
	Результат = Новый Структура;
	
	Префикс                  = "лм_";
	ПредметОбъект            = Предмет.ПолучитьОбъект();
	МетаОбъект               = ПредметОбъект.Метаданные();
	МетаОбъектОбщиеРеквизиты = Метаданные.ОбщиеРеквизиты;
	
	Для Каждого Реквизит Из МетаОбъект.Реквизиты Цикл
		Результат.Вставить(Префикс + Реквизит.Имя, ПредметОбъект[Реквизит.Имя]);		
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаОбъект.СтандартныеРеквизиты Цикл
		Результат.Вставить(Префикс + Реквизит.Имя, ПредметОбъект[Реквизит.Имя]);		
	КонецЦикла;
	
	Для Каждого МетаОбъектОбщийРеквизит Из МетаОбъектОбщиеРеквизиты Цикл
		ЭлементСоставаОбщегоРеквизита = МетаОбъектОбщийРеквизит.Состав.Найти(МетаОбъект);
		Если ЭлементСоставаОбщегоРеквизита <> Неопределено
			И ЭлементСоставаОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Результат.Вставить(Префикс + МетаОбъектОбщийРеквизит.Имя, ПредметОбъект[МетаОбъектОбщийРеквизит.Имя]);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаАтрибута Из ПредметОбъект.Атрибуты Цикл
		ИмяАтрибута = УправлениеНСИКлиентСервер.ВидДанныхДополнительноеСвойство() + "_" + СтрокаАтрибута.Атрибут.Код;
		Результат.Вставить(Префикс + ИмяАтрибута, СтрокаАтрибута.Значение);
	КонецЦикла;
	
	Для Каждого Стр Из ПредметОбъект.Классификация Цикл
		ИмяКГ = УправлениеНСИКлиентСервер.ВидДанныхКлассификатор() + "_" + Стр.Классификатор.Код;
		Результат.Вставить(Префикс + ИмяКГ, Стр.ЭлементКлассификатора);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаПравилНормализацииКлассификационныхГруппировок(Задача, Данные, Сообщения) Экспорт
	
	//ЗаданиеСправочникНСИ = Неопределено;
	//Если ЗначениеЗаполнено(Задача.Предмет) Тогда
	//	ЗаданиеСправочникНСИ = УправлениеНСИ.ИдентификаторСправочникаНСИПоСсылкеОбъекта(Задача.Предмет);
	//Иначе
	//	Шаблон = Задача.БизнесПроцесс.Шаблон;
	//	ЗаданиеСправочникНСИ = Шаблон.Предметы[0].ТипПредмета;
	//КонецЕсли;
	//
	//Результат = Новый Структура("ПроверкаПройдена, Правила, ДанныеДоНормализации, ДанныеПослеНормализации, ИдентификаторСправочника", 
	//	Истина, 
	//	Новый Массив(),
	//	,
	//	,
	//	ЗаданиеСправочникНСИ);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//
	//// Создание фантомного объекта справочника
	//МенеджерСправочникаНСИ = Справочники[ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ЗаданиеСправочникНСИ).Имя];		
	//ОбъектСправочникаНСИ = МенеджерСправочникаНСИ.СоздатьЭлемент();
	//
	//УправлениеНСИ.УстановитьДанныеОбъектаСправочника(ОбъектСправочникаНСИ, Данные);
	//РезультатНормализации = 
	//	НормализацияВызовСервера.ВыполнитьНормализациюЭлементаСправочника(ОбъектСправочникаНСИ);
	//		
	//ЗаполнитьЗначенияСвойств(Результат, РезультатНормализации, "ДанныеДоНормализации, ДанныеПослеНормализации");
	//		
	//Для Каждого РезультатФункции Из РезультатНормализации.ВыполненныеФункции Цикл
	//	ПравилоНормализации = РезультатФункции.Функция;				
	//	РезультатНормализации = РезультатФункции.Результат;
	//	
	//	// todo: в нормализации теперь доступен контекст (условный), оставить это здесь или переносить
	//	// в нормализацию?
	//	Если (РезультатФункции.Поведение.УчитыватьРезультатБП) Тогда
	//		Если ТипЗнч(РезультатНормализации) = Тип("Булево") Тогда
	//			Результат.ПроверкаПройдена = Результат.ПроверкаПройдена И РезультатНормализации;
	//			Если РезультатФункции.Результат = Ложь Тогда
	//				Сообщения.Добавить(Строка(ПравилоНормализации));
	//			КонецЕсли;
	//		Иначе
	//			// итоговый результат проверки не изменяется	
	//		КонецЕсли;
	//		
	//		Результат.Правила.Добавить( 
	//			Новый Структура("Правило, Результат, ОписаниеОшибки, Расшифровка, Сообщения", 
	//				ПравилоНормализации, 
	//				РезультатНормализации, 
	//				РезультатФункции.ТекстОшибки, 
	//				РезультатФункции.Расшифровка,
	//				РезультатФункции.Сообщения));
	//	КонецЕсли;
	//КонецЦикла;
	//	
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//Возврат Результат;
	
КонецФункции

Функция ПроверкаПравилНормализацииКлассификационныхГруппировокСвязанных(Задача, Данные, Сообщения, Ссылка) Экспорт
	
	//ЗаданиеСправочникНСИ = Неопределено;
	//
	//Если Ссылка <> Неопределено Тогда
	//	ИдентификаторСправочника = УправлениеНСИ.ИдентификаторСправочникаНСИПоСсылкеОбъекта(Ссылка);
	//	МенеджерСправочникаНСИ = Справочники[ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторСправочника).Имя];
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли; 
	//
	//Результат = Новый Структура("ПроверкаПройдена, Правила, ДанныеДоНормализации, ДанныеПослеНормализации, ИдентификаторСправочника", 
	//	Истина, 
	//	Новый Массив(),
	//	,
	//	,
	//	ИдентификаторСправочника);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//ОбъектСправочникаНСИ = МенеджерСправочникаНСИ.СоздатьЭлемент();
	//
	//Индекс = Неопределено;
	//Для каждого Элемент Из Данные Цикл
	//	Если Элемент.ВидДанных = УправлениеНСИКлиентСервер.ВидДанныхКлассификатор() Тогда
	//		Классификатор = Справочники.Классификаторы.НайтиПоКоду(Элемент.Имя, Истина);
	//		Если Классификатор <> Справочники.Классификаторы.ПустаяСсылка() Тогда
	//			Элемент.Имя = Классификатор;	
	//		КонецЕсли;
	//	ИначеЕсли Элемент.Имя = "Ссылка" Тогда
	//		Индекс = Данные.Найти(Элемент);
	//	КонецЕсли; 	
	//КонецЦикла; 
	//Если Индекс <> Неопределено Тогда
	//	Данные.Удалить(Индекс);	
	//КонецЕсли; 
	//
	//УправлениеНСИ.УстановитьДанныеОбъектаСправочника(ОбъектСправочникаНСИ, Данные);
	//РезультатНормализации = 
	//	НормализацияВызовСервера.ВыполнитьНормализациюЭлементаСправочника(
	//		ОбъектСправочникаНСИ);
	//		
	//ЗаполнитьЗначенияСвойств(Результат, РезультатНормализации, "ДанныеДоНормализации, ДанныеПослеНормализации");
	//		
	//Для Каждого РезультатФункции Из РезультатНормализации.ВыполненныеФункции Цикл
	//	ПравилоНормализации = РезультатФункции.Функция;				
	//	РезультатНормализации = РезультатФункции.Результат;
	//	
	//	Если (РезультатФункции.Поведение.УчитыватьРезультатБП) Тогда
	//		Если ТипЗнч(РезультатНормализации) = Тип("Булево") Тогда
	//			Результат.ПроверкаПройдена = Результат.ПроверкаПройдена И РезультатНормализации;
	//			Если РезультатФункции.Результат = Ложь Тогда
	//				Сообщения.Добавить(Строка(ПравилоНормализации));
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		Результат.Правила.Добавить( 
	//			Новый Структура("Правило, Результат, ОписаниеОшибки, Расшифровка, Сообщения", 
	//				ПравилоНормализации, 
	//				РезультатНормализации, 
	//				РезультатФункции.ТекстОшибки, 
	//				РезультатФункции.Расшифровка,
	//				РезультатФункции.Сообщения));
	//	КонецЕсли;
	//КонецЦикла;
	//	
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//Возврат Результат;
	
КонецФункции

Процедура СоздатьБизнесПроцесс_ПередЗаписьюДанныхПроцесса(ДанныеПроцесса, СтруктураДанных, БизнесПроцесс, ДополнительныеПараметры) Экспорт
	
// Подсистема MDMЯдро
	РаботаСБизнесПроцессами.СоздатьБизнесПроцесс_ПередЗаписьюДанныхПроцесса(ДанныеПроцесса, СтруктураДанных, БизнесПроцесс, ДополнительныеПараметры)
// Конец Подсистема MDMЯдро

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализацияДанныхСправочникаНСИ(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных)
	
	Предмет = БизнесПроцесс.Предмет;
	
	Если ЗначениеЗаполнено(Предмет) Тогда		
		Попытка
			ПриЗаполненииДанныхСправочникаНСИ(ДанныеПроцесса, Предмет, СтруктураДанных);
			
			УстановитьПривилегированныйРежим(Истина);
			лм_УниверсальныеСтруктурыДанных.ЗаписатьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
			УстановитьПривилегированныйРежим(Ложь);				
		Исключение
		КонецПопытки;		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриЗаполненииДанныхСправочникаНСИ(ДанныеСправочникаНСИ, Предмет, СтруктураДанных) Экспорт
	
	//Если ЗначениеЗаполнено(Предмет) Тогда		
	//	Попытка
	//		СоответствиеРеквизитов = Новый Соответствие;			
	//		Для Каждого Реквизит Из СтруктураДанных.Реквизиты Цикл
	//			Если Реквизит.Динамический И Не ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
	//				Если СтрНачинаетсяС(Реквизит.ИмяПоля, "Связанный_") И ТипЗнч(ДанныеСправочникаНСИ[Реквизит.ИмяПоля]) = Тип("Массив") И ДанныеСправочникаНСИ[Реквизит.ИмяПоля].Количество() Тогда
	//					Продолжить; // чтобы не затирались предопределенные	
	//				Иначе
	//					ДанныеСправочникаНСИ.Вставить(Реквизит.ИмяПоля);
	//				КонецЕсли; 
	//				СоответствиеРеквизитов.Вставить(Реквизит.ИмяПоля, Истина);
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		ЗаполнитьЗначенияСвойств(ДанныеСправочникаНСИ, Предмет);
	//		
	//		Для Каждого СтрАтрибут Из Предмет.Атрибуты Цикл
	//			ИмяРекАтрибут = УправлениеНСИКлиентСервер.ВидДанныхДополнительноеСвойство() + "_" + СтрАтрибут.Атрибут.Код;
	//			Если СоответствиеРеквизитов[ИмяРекАтрибут] <> Неопределено Тогда
	//				ДанныеСправочникаНСИ.Вставить(ИмяРекАтрибут, СтрАтрибут.Значение);
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Для Каждого СтрКГ Из Предмет.Классификация Цикл
	//			ИмяРекКГ = УправлениеНСИКлиентСервер.ВидДанныхКлассификатор() + "_" + СтрКГ.Классификатор.Код;;
	//			Если СоответствиеРеквизитов[ИмяРекКГ] <> Неопределено Тогда
	//				ДанныеСправочникаНСИ.Вставить(ИмяРекКГ, СтрКГ.ЭлементКлассификатора);
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		МетаОбъект = Предмет.Метаданные();		
	//		СтрокиСвязейСправочника = УправлениеНСИ.ПолучитьСвязиСправочникаНСИ(МетаОбъект.ПолноеИмя());		
	//		Для Каждого СтрокаСвязи Из СтрокиСвязейСправочника Цикл			
	//			ПропуститьСправочник = Ложь;
	//			лм_УниверсальныеСтруктурыДанныхПереопределяемый.ПриАнализеСвязейСправочника(СтрокаСвязи, ПропуститьСправочник);
	//			Если ПропуститьСправочник Тогда
	//				Продолжить;	
	//			КонецЕсли;
	//			ИмяТаблицы = "";
	//			ДанныеСвязанного = ПолучитьДанныеСвязанного(СтрокаСвязи, Предмет, ИмяТаблицы);
	//			МассивСтруктур = Новый Массив();
	//			Если ДанныеСправочникаНСИ[ИмяТаблицы] <> Неопределено И ДанныеСправочникаНСИ[ИмяТаблицы].Количество() Тогда
	//				Для каждого СтрСвязанный Из ДанныеСправочникаНСИ[ИмяТаблицы] Цикл
	//					МассивСтруктур.Добавить(СтрСвязанный);	
	//				КонецЦикла; 
	//			КонецЕсли; 
	//			Для Каждого СтрТЗ Из ДанныеСвязанного Цикл
	//				СтруктураДанныхСтроки = ПолучитьСтруктуруДанныхСтроки(ИмяТаблицы, СтруктураДанных);
	//				ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, СтрТЗ);
	//				МассивСтруктур.Добавить(СтруктураДанныхСтроки);
	//			КонецЦикла;
	//			ДанныеСправочникаНСИ.Вставить(ИмяТаблицы, МассивСтруктур);
	//		КонецЦикла;
	//		
	//		ТаблицаПереходныхКлючей = ДанныеТаблицыПереходныхКлючей(Предмет);
	//		
	//		ДанныеСправочникаНСИ.Вставить("ТаблицаПереходныхКлючей", ТаблицаПереходныхКлючей);
	//		
	//		ТаблицаСвязей = ДанныеТаблицыСвязей(Предмет);
	//		
	//		ДанныеСправочникаНСИ.Вставить("ТаблицаСвязей", ТаблицаСвязей);			
	//	Исключение
	//	КонецПопытки;		
	//КонецЕсли;
		
КонецПроцедуры

Функция ДанныеТаблицыСвязей(Предмет) Экспорт
	
	ТаблицаСвязей = Новый Массив;
	Запрос        = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ
	               |	СвязиСправочниковНСИ.Справочник2 КАК ЭлементМассиваНСИ,
	               |	Ложь КАК КУдалению,
				   |    Истина КАК Связи_Выбран,
	               |	СвязиСправочниковНСИ.ВидСвязи КАК НаименованиеСвязи
	               |ИЗ
	               |	РегистрСведений.СвязиСправочниковНСИ КАК СвязиСправочниковНСИ
	               |ГДЕ
	               |	СвязиСправочниковНСИ.Справочник1 = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		сткСвязь = Новый Структура("НаименованиеСвязи,ЭлементМассиваНСИ,КодЭлемента,Связи_СтатусЗаписи,КУдалению,Связи_Выбран");
		ЗаполнитьЗначенияСвойств(сткСвязь, Выборка);
		сткСвязь.Связи_СтатусЗаписи = Выборка.ЭлементМассиваНСИ.СтатусЗаписи;
		сткСвязь.КодЭлемента = Выборка.ЭлементМассиваНСИ.Код;
		ТаблицаСвязей.Добавить(сткСвязь);
	КонецЦикла;
	
	Возврат ТаблицаСвязей;
	
КонецФункции

Функция ДанныеТаблицыПереходныхКлючей(Предмет) Экспорт
	//ТаблицаПереходныхКлючей = Интеграция.LID(Предмет);
	//Если ТаблицаПереходныхКлючей = Неопределено Тогда
	//	ТаблицаПереходныхКлючей = Новый Массив;
	//КонецЕсли;
	//
	//Для Каждого сткПереходныйКлюч Из ТаблицаПереходныхКлючей Цикл
	//	сткПереходныйКлюч.Вставить("Выбран",	Истина);
	//КонецЦикла;
	//
	//Возврат ТаблицаПереходныхКлючей;
КонецФункции

Функция ПолучитьДанныеСвязанного(СтрокаСвязи, Предмет, ИмяТаблицы = Неопределено)
	
	Подстроки           = СтрРазделить(СтрокаСвязи.Справочник, ".");
	ИмяСвязанного       = Подстроки[1];
	ИмяТаблицы          = "Связанный_" + ИмяСвязанного;
	Запрос              = Новый Запрос;
	Запрос.Текст        = СформироватьЗапросСвязанных(СтрокаСвязи);
	Запрос.УстановитьПараметр("РеквизитСвязи", Предмет);
	ДанныеСвязанного    = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеСвязанного;	
	
КонецФункции

Функция СформироватьЗапросСвязанных(СтрокаСвязи)
	
	Подстроки           = СтрРазделить(СтрокаСвязи.Справочник, ".");
	ИмяСвязанного       = Подстроки[1];
	МетаОбъектСвязанный = Метаданные.Справочники[ИмяСвязанного];
			
	СхемаЗапроса  = Новый СхемаЗапроса;
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	Операторы     = ПакетЗапросов.Операторы[0];
	
	Операторы.Источники.Добавить(СтрокаСвязи.Справочник, ИмяСвязанного);
	
	Сч = 0;
	Для Каждого Реквизит Из МетаОбъектСвязанный.Реквизиты Цикл
		Операторы.ВыбираемыеПоля.Добавить(ИмяСвязанного + "." + Реквизит.Имя);
		ПакетЗапросов.Колонки[Сч].Псевдоним = ИмяСвязанного + "_" + Реквизит.Имя;
		Сч = Сч + 1;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаОбъектСвязанный.СтандартныеРеквизиты Цикл
		Операторы.ВыбираемыеПоля.Добавить(ИмяСвязанного + "." + Реквизит.Имя);
		ПакетЗапросов.Колонки[Сч].Псевдоним = ИмяСвязанного + "_" + Реквизит.Имя;
		Сч = Сч + 1;
	КонецЦикла;
	
	Операторы.ВыбираемыеПоля.Добавить(ИмяСвязанного + ".Классификация.Классификатор");
	Операторы.ВыбираемыеПоля.Добавить(ИмяСвязанного + ".Классификация.ЭлементКлассификатора");
	ПакетЗапросов.Колонки[Сч].Псевдоним = ИмяСвязанного + "_Классификатор";
	Сч = Сч + 1;
	
	Операторы.ВыбираемыеПоля.Добавить(ИмяСвязанного + ".СтатусЗаписи");
	ПакетЗапросов.Колонки[Сч].Псевдоним = ИмяСвязанного + "_СтатусЗаписи" ;
		
	Операторы.Отбор.Добавить(СтрокаСвязи.Реквизит + " = &РеквизитСвязи"); 
		
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхСтроки(ИмяТаблицы, СтруктураДанных)
		
	Результат = Новый Структура;
	
	Отбор = Новый Структура("ИмяПоля,ОсновнойИдентификатор", ИмяТаблицы, Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтруктураДанных.Реквизиты, Отбор);
	
	Отбор = Новый Структура("ОсновнойИдентификатор", СтрокиОтбора[0].Идентификатор);
	СтрокиОтбораРек = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтруктураДанных.Реквизиты, Отбор);
	
	Для Каждого Стр Из СтрокиОтбораРек Цикл
		Результат.Вставить(Стр.ИмяПоля);		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписьДанныхСправочникаНСИ(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных)
		
	//Попытка			
	//	Отбор        = Новый Структура("ТипЗначения,Динамический", Новый ОписаниеТипов("Структура"), Истина);
	//	СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтруктураДанных.Реквизиты, Отбор);
	//	
	//	ИдентификаторПредмета   = БизнесПроцесс.Шаблон.Предметы[0].ТипПредмета;
	//	СтрокиСвязейСправочника = УправлениеНСИ.ПолучитьСвязиСправочникаНСИ(ИдентификаторПредмета.ПолноеИмя);
	//	
	//	Если ЗначениеЗаполнено(БизнесПроцесс.Предмет) Тогда
	//		ПредметОбъект = БизнесПроцесс.Предмет.ПолучитьОбъект();
	//	Иначе
	//		ПредметОбъект = Справочники[ИдентификаторПредмета.Имя].СоздатьЭлемент();
	//	КонецЕсли;
	//	
	//	ПредметОбъект.Классификация.Очистить();
	//	ПредметОбъект.Атрибуты.Очистить();
	//	Для Каждого Реквизит Из СтруктураДанных.Реквизиты Цикл
	//		Если СтрНачинаетсяС(Реквизит.Метка, "Классификатор_") Тогда
	//			КодКлассификатора = Сред(Реквизит.Метка, 15);
	//			Классификатор     = Справочники.Классификаторы.НайтиПоКоду(КодКлассификатора);
	//			СтрКГ = ПредметОбъект.Классификация.Добавить();
	//			СтрКГ.Классификатор = Классификатор;
	//			СтрКГ.ЭлементКлассификатора = ДанныеПроцесса[Реквизит.ИмяПоля];
	//		ИначеЕсли СтрНачинаетсяС(Реквизит.Метка, "ДополнительноеСвойство_") Тогда 	
	//			КодАтрибута      = Сред(Реквизит.Метка, 24);
	//			Атрибут          = ПланыВидовХарактеристик.Атрибуты.НайтиПоКоду(КодАтрибута);
	//			Если ДанныеПроцесса.Свойство(Реквизит.ИмяПоля) Тогда
	//				ЗначениеАтрибута = ДанныеПроцесса[Реквизит.ИмяПоля];
	//			Иначе
	//				ЗначениеАтрибута = Неопределено;
	//			КонецЕсли;
	//			Если ЗначениеАтрибута <> Неопределено Тогда
	//				СтрАтрибут               = ПредметОбъект.Атрибуты.Добавить();
	//				СтрАтрибут.Атрибут       = Атрибут;
	//				СтрАтрибут.Значение      = ЗначениеАтрибута;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	ЗаполнитьЗначенияСвойств(ПредметОбъект, ДанныеПроцесса);
	//	ПредметОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьНормализацию", Истина);
	//	ПредметОбъект.Записать();
	//	ПредметСсылка = ПредметОбъект.Ссылка;
	//	
	//	Для Каждого Стр Из СтрокиОтбора Цикл
	//		Если СтрНачинаетсяС(Стр.ИмяПоля, "Связанный_") Тогда
	//			ИмяСвязанного         = Сред(Стр.ИмяПоля, 11);
	//			Отбор                 = Новый Структура("СвязанныйСправочник,Справочник", ИдентификаторПредмета.ПолноеИмя, "Справочник." + ИмяСвязанного);
	//			СтрокиОтбораСвязанных = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтрокиСвязейСправочника, Отбор);
	//			РеквизитСвязи         = СтрокиОтбораСвязанных[0].Реквизит;				
	//			
	//			Для Каждого СтрСвязанный  Из ДанныеПроцесса[Стр.ИмяПоля] Цикл
	//				Если ЗначениеЗаполнено(СтрСвязанный[ИмяСвязанного + "_Ссылка"]) Тогда
	//					ОбъектСвязанный = СтрСвязанный[ИмяСвязанного + "_Ссылка"].ПолучитьОбъект();
	//				Иначе	
	//					ОбъектСвязанный = Справочники[ИмяСвязанного].СоздатьЭлемент();
	//				КонецЕсли;
	//				СвязанныйИзменялся	= Ложь;
	//				Для Каждого КлючИЗначение Из СтрСвязанный Цикл
	//					Если КлючИЗначение.Ключ = ИмяСвязанного + "_Ссылка" Тогда
	//						Продолжить;
	//					КонецЕсли;
	//					Если КлючИЗначение.Ключ = ИмяСвязанного + "_Выбран" Тогда
	//						Продолжить;
	//					КонецЕсли;
	//					Если КлючИЗначение.Ключ = ИмяСвязанного + "_Предзаполнение" Тогда
	//						Продолжить;
	//					КонецЕсли;

	//					Если СтрНачинаетсяС(КлючИЗначение.Ключ, ИмяСвязанного + "_Классификатор") Тогда
	//						КодКлассификатора = СтрЗаменить(КлючИЗначение.Ключ, ИмяСвязанного + "_Классификатор_", "");
	//						Классификатор = Справочники.Классификаторы.НайтиПоКоду(КодКлассификатора, Истина);
	//						Если ЗначениеЗаполнено(Классификатор) Тогда
	//							СтрокаТЧ = ОбъектСвязанный.Классификация.Найти(Классификатор, "Классификатор");
	//							Если СтрокаТЧ = Неопределено Тогда
	//								СтрокаТЧ = ОбъектСвязанный.Классификация.Добавить();	
	//								СтрокаТЧ.Классификатор = Классификатор;
	//							КонецЕсли;   
	//							СтрокаТЧ.ЭлементКлассификатора = КлючИЗначение.Значение;
	//							СвязанныйИзменялся = Истина;
	//						КонецЕсли; 
	//						Продолжить;
	//					КонецЕсли;
	//					
	//					ИмяРек = Сред(КлючИЗначение.Ключ, СтрДлина(ИмяСвязанного) + 2);
	//					Если ОбъектСвязанный[ИмяРек] <> КлючИЗначение.Значение Тогда
	//						ОбъектСвязанный[ИмяРек] = КлючИЗначение.Значение;
	//						СвязанныйИзменялся		= Истина;
	//					КонецЕсли; 												
	//				КонецЦикла;
	//				Если СвязанныйИзменялся Тогда
	//					ОбъектСвязанный[РеквизитСвязи] = ПредметСсылка;
	//					ОбъектСвязанный.ДополнительныеСвойства.Вставить("НеВыполнятьНормализацию", Истина);
	//					ОбъектСвязанный.Записать();
	//					СтрСвязанный[ИмяСвязанного + "_Ссылка"] = ОбъектСвязанный.Ссылка;						
	//				КонецЕсли; 
	//			КонецЦикла;				
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если Не ЗначениеЗаполнено(БизнесПроцесс.Предмет) Тогда
	//		БизнесПроцессОбъект         = БизнесПроцесс.ПолучитьОбъект();
	//		БизнесПроцессОбъект.Предмет = ПредметСсылка;
	//		БизнесПроцессОбъект.Записать();
	//	КонецЕсли;
	//	
	//	ЗаписатьДанныеТПК(ДанныеПроцесса.ТаблицаПереходныхКлючей, ПредметСсылка);	
	//	ЗаписатьТаблицуСвязей(ДанныеПроцесса.ТаблицаСвязей, ПредметСсылка);
	//	
	//	УстановитьПривилегированныйРежим(Истина);
	//	лм_УниверсальныеСтруктурыДанных.ЗаписатьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
	//	УстановитьПривилегированныйРежим(Ложь);				
	//Исключение
	//	ЗаписьЖурналаРегистрации("ВыполнениеДействияТочкиОбработки.ЗаписьДанныхСправочникаНСИ", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	//КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьТаблицуСвязей(ТаблицаСвязей, Предмет)
	
	Для Каждого Стр Из ТаблицаСвязей Цикл
		Если Не Стр.Связи_Выбран И Стр.КУдалению Тогда
			Продолжить;	
		КонецЕсли;
		
		МенеджерЗаписи             = РегистрыСведений.СвязиСправочниковНСИ.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидСвязи    = Стр.НаименованиеСвязи;
		МенеджерЗаписи.Справочник1 = Предмет;
		МенеджерЗаписи.Справочник2 = Стр.ЭлементМассиваНСИ;
		
		Если Стр.Связи_Выбран И Стр.КУдалению Тогда
			МенеджерЗаписи.Удалить();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеТПК(ТаблицаПереходныхКлючей, Предмет)

	НаборЗаписейТПК = РегистрыСведений.ТаблицаПереходныхКлючей.СоздатьНаборЗаписей();
	НаборЗаписейТПК.Отбор.ЗначениеСправочникаНСИ.Установить(Предмет);
	НаборЗаписейТПК.Прочитать();
	
	ТЗ = НаборЗаписейТПК.Выгрузить();
	
	Для Каждого Стр Из ТаблицаПереходныхКлючей Цикл
		Отбор        = Новый Структура("ВнешнийСправочник,КодВнешнегоСправочника", Стр.ВнешнийСправочник, Стр.КодВнешнегоСправочника);
		СтрокиОтбора = ТЗ.НайтиСтроки(Отбор);
		
		Если СтрокиОтбора.Количество() = 0 Тогда		
			Запись                        = НаборЗаписейТПК.Добавить();
			Запись.ЗначениеСправочникаНСИ = Предмет;
			Запись.ВнешнийСправочник      = Стр.ВнешнийСправочник;
			Запись.КодВнешнегоСправочника = Стр.КодВнешнегоСправочника;
		КонецЕсли;
	КонецЦикла;		
	
	НаборЗаписейТПК.Записать();
	
	ПриЗаписиДанныхТПК(ТаблицаПереходныхКлючей, Предмет);
	
КонецПроцедуры

Процедура ПриЗаписиДанныхТПК(ТаблицаПереходныхКлючей, Предмет)
	
КонецПроцедуры

Процедура ПриЗаполненииСоставаДанных(Форма, СоставДанных, СоответствиеРеквизитов, МассивДоступныхТиповДляПодпроцессов, ТаблицаПодпроцессов, стрДанныеПредмета)
	
	МассивДобавляемых = Новый Массив;
	ПриФормированииМассиваДобавляемыхРеквизитовСоставаДанных(МассивДобавляемых);
	
	Для Каждого Стр Из МассивДобавляемых Цикл
		лм_БизнесПроцессыКлиентСерверПереопределяемый.ДобавитьСтрокуСоставаДанных(Форма, СоставДанных, СоответствиеРеквизитов[Стр.ИмяРеквизита], МассивДоступныхТиповДляПодпроцессов, ТаблицаПодпроцессов, стрДанныеПредмета, Стр.ДополнительныеПараметры);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриФормированииМассиваДобавляемыхРеквизитовСоставаДанных(МассивДобавляемых)
	
КонецПроцедуры

Процедура ПереносПрисоединенныхФайловВЗаписьСправочникаНСИ(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных)
	
	Попытка
		Если Не ЗначениеЗаполнено(БизнесПроцесс.Предмет) Тогда
			Возврат;
		КонецЕсли;
		
		ТипПрисоединенныйФайл    = Тип("СправочникСсылка.лм_БизнесПроцессПрисоединенныеФайлы");		
		МассивРеквизитовТипаФайл = Новый Массив;		
		СоответствиеРеквизитов   = Новый Соответствие;
		ТаблицаСсылокНаФайлы     = Новый ТаблицаЗначений;
		ИмяКолонки               = "ФайлСсылка";
		ТаблицаСсылокНаФайлы.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.лм_БизнесПроцессПрисоединенныеФайлы"));
		
		Для Каждого Реквизит Из СтруктураДанных.Реквизиты Цикл
			Если Реквизит.ТипЗначения.СодержитТип(ТипПрисоединенныйФайл) Тогда
				МассивРеквизитовТипаФайл.Добавить(Реквизит);
			КонецЕсли;
			СоответствиеРеквизитов.Вставить(Реквизит.Идентификатор, Реквизит);
		КонецЦикла;
		
		Для Каждого ФайловыйРеквизит Из МассивРеквизитовТипаФайл Цикл
			Если Не ЗначениеЗаполнено(ФайловыйРеквизит.ОсновнойИдентификатор) Тогда
				ЗначениеРеквизита = ДанныеПроцесса[ФайловыйРеквизит.ИмяПоля];
				Если ТипЗнч(ЗначениеРеквизита) = ТипПрисоединенныйФайл
					 И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда					 
					СтрТЗ            = ТаблицаСсылокНаФайлы.Добавить();
					СтрТЗ.ФайлСсылка = ЗначениеРеквизита;
				КонецЕсли;
			Иначе
				РеквизитРодитель = СоответствиеРеквизитов[ФайловыйРеквизит.ОсновнойИдентификатор];
				ТаблицаСФайлами  = ДанныеПроцесса[РеквизитРодитель.ИмяПоля];
				Для Каждого стСтрокаТаблицы Из ТаблицаСФайлами Цикл
					ЗначениеРеквизита = стСтрокаТаблицы[ФайловыйРеквизит.ИмяПоля];
					Если ТипЗнч(ЗначениеРеквизита) = ТипПрисоединенныйФайл
						 И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда					 
						СтрТЗ            = ТаблицаСсылокНаФайлы.Добавить();
						СтрТЗ.ФайлСсылка = ЗначениеРеквизита;
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСсылокНаФайлы.Свернуть(ИмяКолонки);
		
		Для Каждого СтрТЗ Из ТаблицаСсылокНаФайлы Цикл
			стрДанныеФайла                                      = РаботаСФайлами.ДанныеФайла(СтрТЗ.ФайлСсылка);
			стрДанныеНовогоФайла                                = СформироватьСтруктуруДанныхФайла();
			стрДанныеНовогоФайла.Автор                          = ПользователиКлиентСервер.ТекущийПользователь();
			стрДанныеНовогоФайла.ВладелецФайлов                 = БизнесПроцесс.Предмет;
			стрДанныеНовогоФайла.ИмяБезРасширения               = стрДанныеФайла.Наименование;
			стрДанныеНовогоФайла.РасширениеБезТочки             = стрДанныеФайла.Расширение;
			стрДанныеНовогоФайла.АдресФайлаВоВременномХранилище = стрДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			РаботаСФайлами.ДобавитьФайл(стрДанныеНовогоФайла, стрДанныеФайла.СсылкаНаДвоичныеДанныеФайла);			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция СформироватьСтруктуруДанныхФайла()
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Автор");
	ДанныеФайла.Вставить("ВладелецФайлов");
	ДанныеФайла.Вставить("ИмяБезРасширения");
	ДанныеФайла.Вставить("РасширениеБезТочки");
	ДанныеФайла.Вставить("ГруппаФайлов");
	ДанныеФайла.Вставить("АдресФайлаВоВременномХранилище");
	ДанныеФайла.Вставить("Описание");
	ДанныеФайла.Вставить("ВремяИзмененияУниверсальное");
	
	Возврат ДанныеФайла;
	
КонецФункции

Процедура КастомизацияДляСправочникаНСИ(Форма, РасширеннаяНастройкаНСИ)
	
	// РасширеннаяНастройкаНСИ.ОтображатьВВидеТаблицы
	
	ОтображатьВВидеТаблицы                  = ПолучитьЗначениеРасширеннойНастройки("ОтображатьВВидеТаблицы",                  РасширеннаяНастройкаНСИ.Реквизиты);	
	РазрешитьЗапускСвязанныхПодпроцессов    = ПолучитьЗначениеРасширеннойНастройки("РазрешитьЗапускСвязанныхПодпроцессов",    РасширеннаяНастройкаНСИ.Реквизиты); 	
	РазрешитьПросмотрПроцессовТекущейЗаписи = ПолучитьЗначениеРасширеннойНастройки("РазрешитьПросмотрПроцессовТекущейЗаписи", РасширеннаяНастройкаНСИ.Реквизиты); 
		
	ЭлементыФормы                = Форма.Элементы;
	ГруппаУниверсальныеСтруктуры = ЭлементыФормы.ГруппаУниверсальныеСтруктуры;	
	
	ГруппаСтраницы                   = ЭлементыФормы.Добавить("лм_СтраницыСправочникНСИ",         Тип("ГруппаФормы"), ГруппаУниверсальныеСтруктуры);
	ГруппаСтраницы.Вид               = ВидГруппыФормы.Страницы;
	ГруппаСтраницаОсновное           = ЭлементыФормы.Добавить("лм_ОсновнаяСтраницаСправочникНСИ", Тип("ГруппаФормы"), ГруппаСтраницы);
	ГруппаСтраницаОсновное.Вид       = ВидГруппыФормы.Страница; 
	ГруппаСтраницаОсновное.Заголовок = "Основные данные";
	
	МассивУниверсальныхСтруктур = ПолучитьИзВременногоХранилища(Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры()]);
	УниверсальнаяСтруктура      = МассивУниверсальныхСтруктур[0];
		
	Если ОтображатьВВидеТаблицы = Истина Тогда
		ИмяТаблицыДанных = лм_БизнесПроцессыКлиентСерверПереопределяемый.ИмяТаблицыДанных();
		ДобавляемыеРеквизиты = Новый Массив();
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("АдресДанныхПредмета", Новый описаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицыДанных, Новый ОписаниеТипов("ТаблицаЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизита", Новый ОписаниеТипов("Строка"), ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Наименование", Новый ОписаниеТипов("Строка"), ИмяТаблицыДанных));
		ТипЗначения = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
		ТипЗначения = Новый ОписаниеТипов(ТипЗначения, "Строка, Число, Дата, Булево");
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение", ТипЗначения, ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НовоеЗначение", ТипЗначения, ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"), ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Видимость", Новый ОписаниеТипов("Булево"), ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Доступность", Новый ОписаниеТипов("Булево"), ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТолькоПросмотр", Новый ОписаниеТипов("Булево"), ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьОбработчикВыбора", Новый ОписаниеТипов("Булево"), ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("АвтоОтметкаНезаполненного", Новый ОписаниеТипов("Булево"), ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Метка", Новый ОписаниеТипов("Строка"), ИмяТаблицыДанных));		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтатусБПИндексКартинки", Новый ОписаниеТипов("Число"), ИмяТаблицыДанных));			
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Порядок", Новый ОписаниеТипов("Число"), ИмяТаблицыДанных));			
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип("Строка"));
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.Атрибуты"));
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Классификаторы"));
		ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Поле", ТипЗначения, ИмяТаблицыДанных));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВидДанных", Новый ОписаниеТипов("Строка"), ИмяТаблицыДанных));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ТаблицаДанных = ЭлементыФормы.Добавить(ИмяТаблицыДанных, Тип("ТаблицаФормы"));
		ТаблицаДанных.ПутьКДанным = ИмяТаблицыДанных;
		ТаблицаДанных.ИзменятьСоставСтрок = Ложь;
		ТаблицаДанных.ИзменятьПорядокСтрок = Ложь;
		ТаблицаДанных.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ТаблицаДанных.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_ПриАктивизацииСтрокиТаблицы");
		ТаблицаДанных.УстановитьДействие("Выбор", "Подключаемый_Выбор");
		
		КолонкаТаблицы = ЭлементыФормы.Добавить(ИмяТаблицыДанных + "Наименование", Тип("ПолеФормы"), ТаблицаДанных);
		КолонкаТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыДанных + ".Наименование";
		КолонкаТаблицы.Заголовок = "Представление";
		КолонкаТаблицы.ТолькоПросмотр = Истина;
		КолонкаТаблицы = ЭлементыФормы.Добавить(ИмяТаблицыДанных + "ТекущееЗначение", Тип("ПолеФормы"), ТаблицаДанных);
		КолонкаТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыДанных + ".ТекущееЗначение";
		КолонкаТаблицы.Заголовок = "Значение";
		КолонкаТаблицы.ТолькоПросмотр = Истина;
		КолонкаТаблицы.Видимость = ЗначениеЗаполнено(Форма.Объект.Предмет);
		КолонкаТаблицы = ЭлементыФормы.Добавить(ИмяТаблицыДанных + "НовоеЗначение", Тип("ПолеФормы"), ТаблицаДанных);
		КолонкаТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыДанных + ".НовоеЗначение";
		КолонкаТаблицы.Заголовок = "Новое значение";		
		КолонкаТаблицы.СвязьПоТипу = Новый СвязьПоТипу("Элементы." + ИмяТаблицыДанных + ".ТекущиеДанные.ТипЗначения");
				
		МассивСвязей = Новый Массив();
		МассивСвязей.Добавить(
			Новый СвязьПараметраВыбора(
				"Отбор.Владелец", 
				"Элементы." + ИмяТаблицыДанных + ".ТекущиеДанные.Поле")
			);
		КолонкаТаблицы.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		КолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизита");
		КолонкаТаблицы.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		
		Если РазрешитьЗапускСвязанныхПодпроцессов Тогда
			КолонкаТаблицы = ЭлементыФормы.Добавить(ИмяТаблицыДанных + "СтатусБП", Тип("ПолеФормы"), ТаблицаДанных);
			КолонкаТаблицы.ПутьКДанным = ИмяТаблицыДанных + ".СтатусБПИндексКартинки";
			КолонкаТаблицы.Вид = ВидПоляФормы.ПолеКартинки;
			КолонкаТаблицы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КолонкаТаблицы.КартинкаЗначений = БиблиотекаКартинок.КоллекцияЗадачиИБизнесПроцессы;
		КонецЕсли;		
		
		стрДанныеПредмета = Новый Структура;
		Если ЗначениеЗаполнено(Форма.Объект.Предмет) Тогда
			Если Не Форма.Объект.Выполнена Тогда
				стрДанныеПредмета = ПолучитьСтруктуруДанныхПредмета(Форма.Объект.Предмет);
				Форма.АдресДанныхПредмета = ПоместитьВоВременноеХранилище(стрДанныеПредмета, Форма.УникальныйИдентификатор);
			Иначе
				стрДанныеПредмета = лм_БизнесПроцессыВызовСервераПереопределяемый.ПолучитьСтруктуруДанныхПредметаИзПараметров(Форма.Объект.Ссылка);
			КонецЕсли;
		КонецЕсли;
				
		РеквизитыФормы                      = Форма.ПолучитьРеквизиты();
		СоставДанных                        = Форма[ИмяТаблицыДанных];
		ОписаниеТиповСтруктура              = Новый ОписаниеТипов("Структура");				
		МассивДоступныхТиповДляПодпроцессов = лм_БизнесПроцессыВызовСервераПереопределяемый.СформироватьМассивДоступныхТиповДляПодпроцессов();
		ТаблицаПодпроцессов                 = Форма[лм_БизнесПроцессыКлиентСерверПереопределяемый.ИмяТаблицыПодпроцессов()];
		СоответствиеРеквизитов              = Новый Соответствие;
		СоответствиеСтрокТаблицыДанных      = Новый Соответствие;
		
		Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
			СоответствиеРеквизитов.Вставить(Реквизит.ИмяПоля, Реквизит);
			
			Если Реквизит.ТипЗначения = ОписаниеТиповСтруктура Тогда
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.ТипЗначения <> ОписаниеТиповСтруктура И ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.Элементы.Найти("лм_" + Реквизит.ИмяПоля) = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаСостава = лм_БизнесПроцессыКлиентСерверПереопределяемый.ДобавитьСтрокуСоставаДанных(Форма, СоставДанных, Реквизит, МассивДоступныхТиповДляПодпроцессов, ТаблицаПодпроцессов, стрДанныеПредмета);
			СоответствиеСтрокТаблицыДанных.Вставить(СтрокаСостава.ИмяРеквизита, СтрокаСостава);
		КонецЦикла; 
		
		лм_БизнесПроцессыКлиентСерверПереопределяемый.ДополнитьСоставДанныхПоНастройкамОтображения(Форма, СоответствиеСтрокТаблицыДанных, СоставДанных, СоответствиеРеквизитов, МассивДоступныхТиповДляПодпроцессов, ТаблицаПодпроцессов, стрДанныеПредмета);
		ПриЗаполненииСоставаДанных(Форма, СоставДанных, СоответствиеРеквизитов, МассивДоступныхТиповДляПодпроцессов, ТаблицаПодпроцессов, стрДанныеПредмета);
				
		ЭлементыФормы.Переместить(ТаблицаДанных, ГруппаСтраницаОсновное);
		ТаблицаДанных.ЧередованиеЦветовСтрок = Истина;
		
		// отметка незаполненного
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + "НовоеЗначение");
		ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + ".АвтоОтметкаНезаполненного");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + ".НовоеЗначение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		// доступность
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + "НовоеЗначение");
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + ".Доступность");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
				
		// отображение различающихся значений
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Предмет");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + ".ТекущееЗначение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + ".НовоеЗначение");
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + ".ТекущееЗначение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыДанных + ".НовоеЗначение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
		
	Иначе
		СвойстваГруппы               = Новый Структура;
		СвойстваГруппы.Вставить("ИмяГруппы",            "");
		СвойстваГруппы.Вставить("ВидГруппы",            ВидГруппыФормы.ОбычнаяГруппа);
		СвойстваГруппы.Вставить("ЗаголовокГруппы",      "");
		СвойстваГруппы.Вставить("РодительГруппы",       ГруппаУниверсальныеСтруктуры);
		СвойстваГруппы.Вставить("ОтображениеГруппы",    ОтображениеОбычнойГруппы.ОбычноеВыделение);
		СвойстваГруппы.Вставить("ГруппировкаЭлементов", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		СвойстваГруппы.Вставить("ОтображатьЗаголовок",  Истина);		
		СвойстваГруппы.Вставить("Поведение",            ПоведениеОбычнойГруппы.Свертываемая);
		
		СвойстваГруппы.ИмяГруппы       = "ГруппаРеквизиты";
		СвойстваГруппы.ЗаголовокГруппы = "Реквизиты";	
		ГруппаРеквизиты                = ЭлементыФормы.Найти(СвойстваГруппы.ИмяГруппы);	
		ДобавитьГруппуНаФорме(ГруппаРеквизиты, ЭлементыФормы, СвойстваГруппы); 
		
		СвойстваГруппы.ИмяГруппы       = "ГруппаКлассификаторы";
		СвойстваГруппы.ЗаголовокГруппы = "Классификаторы";	
		ГруппаКлассификаторы           = ЭлементыФормы.Найти(СвойстваГруппы.ИмяГруппы);	
		ДобавитьГруппуНаФорме(ГруппаКлассификаторы, ЭлементыФормы, СвойстваГруппы); 
			
		МассивКлассификаторов = Новый Массив;
		МассивРеквизитов      = Новый Массив;
		Для Каждого Элемент Из ГруппаУниверсальныеСтруктуры.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
				ОбработатьЭлемент(Элемент, Форма, МассивКлассификаторов, МассивРеквизитов);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из МассивКлассификаторов Цикл
			ЭлементыФормы.Переместить(Элемент, ГруппаКлассификаторы);
			//Элемент.КнопкаВыпадающегоСписка = Ложь;
			//Элемент.КнопкаСпискаВыбора = Истина;
		КонецЦикла;
		
		Для Каждого Элемент Из МассивРеквизитов Цикл
			ЭлементыФормы.Переместить(Элемент, ГруппаРеквизиты);
		КонецЦикла;
		
		ЭлементыФормы.Переместить(ГруппаКлассификаторы, ГруппаСтраницаОсновное);
		ЭлементыФормы.Переместить(ГруппаРеквизиты,      ГруппаСтраницаОсновное);
	КонецЕсли;
	
	МассивПеремещаемых = Новый Массив;
	Для Каждого Элемент Из ГруппаУниверсальныеСтруктуры.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы")  Тогда
			МассивПеремещаемых.Добавить(Элемент);
			Элемент.ЧередованиеЦветовСтрок = Истина;
			Элемент.ИзменятьПорядокСтрок = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	ПрефиксСвязанного = "лм_Связанный_";
	Для Каждого Элемент Из МассивПеремещаемых Цикл
		ГруппаНоваяСтраница           = ЭлементыФормы.Добавить("лм_ГруппаСтраница" + Элемент.Имя, Тип("ГруппаФормы"), ГруппаСтраницы);
		ГруппаНоваяСтраница.Вид       = ВидГруппыФормы.Страница; 
		ГруппаНоваяСтраница.Заголовок = Элемент.Заголовок;
		ЭлементыФормы.Переместить(Элемент, ГруппаНоваяСтраница);
	КонецЦикла;	
	
	МассивОбработчиков = лм_БизнесПроцессыКлиентСерверПереопределяемый.ОбработчикиПолейТаблиц();
	Для Каждого Элемент Из МассивПеремещаемых Цикл
		Элемент.УстановитьДействие("ПриОкончанииРедактирования",  "Подключаемый_ПриОкончанииРедактированияСтрокиТаблицы");
		Элемент.УстановитьДействие("ПередУдалением",              "Подключаемый_ПередУдалениемСтрокиТаблицы");
		Элемент.УстановитьДействие("ПриАктивизацииСтроки",        "Подключаемый_ПриАктивизацииСтрокиТаблицы");
		Элемент.УстановитьДействие("ПриНачалеРедактирования",     "Подключаемый_ПриНачалеРедактированияСтрокиТаблицы");
		Для Каждого ЭлементКолонка Из Элемент.ПодчиненныеЭлементы Цикл
			Если СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "_Ссылка") Тогда
				ЭлементКолонка.Видимость = Ложь;
			КонецЕсли;
			Если СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "_Предзаполнение") Тогда
				ЭлементКолонка.Видимость = Ложь;
			КонецЕсли;
			Если СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "_Выбран") И СтрНачинаетсяС(ЭлементКолонка.Родитель.Имя, ПрефиксСвязанного) Тогда
				Если ЗначениеЗаполнено(Форма.Объект.Предмет) Тогда
					ЭлементКолонка.Видимость = Ложь;
				КонецЕсли;
				ЭлементКолонка.Вид = ВидПоляФормы.ПолеФлажка;
				ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизита");
				Продолжить;
			КонецЕсли;
			ЭлементКолонка.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");	
			ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизита");
			Отбор        = Новый Структура("ИмяТаблицы,ИмяПоля", Элемент.Имя, ЭлементКолонка.Имя);
			СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(МассивОбработчиков, Отбор);
			Если СтрокиОтбора.Количество() <> 0 Тогда				
				ЭлементКолонка.КнопкаВыбора         = Истина;
				ЭлементКолонка.РедактированиеТекста = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	// Подготовим список реквизитов таблиц, для которых потребуется отображение текущих и новых значений
	МассивПодчиненных = Новый Массив;
	Если ЗначениеЗаполнено(Форма.Объект.Предмет) Тогда
		Для Каждого Элемент Из МассивПеремещаемых Цикл
			Если СтрНачинаетсяС(Элемент.Имя, ПрефиксСвязанного) Тогда
				Для Каждого ЭлементКолонка Из Элемент.ПодчиненныеЭлементы Цикл
					МассивПодчиненных.Добавить(ЭлементКолонка);	
				КонецЦикла;
			КонецЕсли;
			Если СтрСравнить(Элемент.Имя, "лм_ТаблицаПереходныхКлючей") = 0 Тогда
				Для Каждого ЭлементКолонка Из Элемент.ПодчиненныеЭлементы Цикл
					Если (    СтрСравнить(ЭлементКолонка.Имя, Элемент.Имя + "ВнешнийСправочник") = 0
						  Или СтрСравнить(ЭлементКолонка.Имя, Элемент.Имя + "КодВнешнегоСправочника") = 0
						  Или СтрСравнить(ЭлементКолонка.Имя, Элемент.Имя + "Выбран") = 0) Тогда
						Продолжить;
					КонецЕсли;
					МассивПодчиненных.Добавить(ЭлементКолонка);	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивПодчиненных Цикл		
		ДобавляемыеРеквизиты  = Новый Массив();
		МассивПодстрок        = СтрРазделить(Элемент.ПутьКДанным, ".");
		ИмяТаблицы            = МассивПодстрок[0];
		ИмяРеквизита          = МассивПодстрок[1];
		ИмяКолонки            = ИмяРеквизита + "_Текущий";
		ИмяСправочника        = Сред(ИмяТаблицы, СтрДлина(ПрефиксСвязанного) + 1);
		СвязаннаяТаблица      = Форма[ИмяТаблицы].Выгрузить();
		Колонка               = СвязаннаяТаблица.Колонки[ИмяРеквизита];
		ТипРеквизита          = Колонка.ТипЗначения;                                     
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонки, ТипРеквизита, ИмяТаблицы));			
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Если ИмяРеквизита = ИмяСправочника + "_Ссылка" Тогда
			Элемент.Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = ИмяСправочника + "_Выбран" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = ИмяСправочника + "_Предзаполнение" Тогда
			Элемент.Видимость = Ложь;
			Продолжить;
		КонецЕсли;

		ЭлементТаблица                = Форма.Элементы.Найти(Элемент.Родитель.Имя);
		КолонкаТаблицы                = ЭлементыФормы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ЭлементТаблица);
		КолонкаТаблицы.Вид            = ВидПоляФормы.ПолеВвода;
		КолонкаТаблицы.ПутьКДанным    = ИмяТаблицы + "." + ИмяКолонки;
		КолонкаТаблицы.Заголовок      = Элемент.Заголовок + " (текущее значение)";
		КолонкаТаблицы.ТолькоПросмотр = Истина;
		Элемент.Заголовок             = Элемент.Заголовок + " (новое значение)";
		ГруппаКолонокТаблицы          = ЭлементыФормы.Добавить("ГруппаКолонок_" + ИмяРеквизита, Тип("ГруппаФормы"), ЭлементТаблица);
		ЭлементыФормы.Переместить(КолонкаТаблицы, ГруппаКолонокТаблицы);		
		ЭлементыФормы.Переместить(Элемент, ГруппаКолонокТаблицы);
		
		// отображение различающихся значений
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КолонкаТаблицы.ПутьКДанным);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.ПутьКДанным);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	КонецЦикла;
	
	// Настроим отображение таблицы переходных ключей
	// Проверим, что есть соответствующий реквизит формы
	сткОтбор = Новый Структура("Имя",	"лм_ТаблицаПереходныхКлючей");
	мсвСтроки = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(РеквизитыФормы, сткОтбор);
	Если мсвСтроки.Количество() > 0 Тогда 
		// Закроем от изменения ключевые поля
		Форма.Элементы["лм_ТаблицаПереходныхКлючей" +                 "Выбран"].ТолькоПросмотр	= Истина;
		Форма.Элементы["лм_ТаблицаПереходныхКлючей" +      "ВнешнийСправочник"].ТолькоПросмотр	= Истина;
		Форма.Элементы["лм_ТаблицаПереходныхКлючей" + "КодВнешнегоСправочника"].ТолькоПросмотр	= Истина;
		
		// Запретим изменение состава строк
		Форма.Элементы.лм_ТаблицаПереходныхКлючей.ИзменятьСоставСтрок	= Ложь;
	КонецЕсли;
			
	Если ЗначениеЗаполнено(Форма.Объект.Предмет) Тогда
		ЗаполнитьТекущиеЗначенияСвязанныхПоДаннымПредмета(Форма.Объект.Предмет, РеквизитыФормы, Форма);
		
		ЗаполнитьТекущиеЗначенияТаблицыПереходныхКлючей(Форма.Объект.Предмет, РеквизитыФормы, Форма);
	//ИначеЕсли
	КонецЕсли;

	// Настроим отображение таблицы связей
	// Проверим, что есть соответствующий реквизит формы
	сткОтбор = Новый Структура("Имя",	"лм_ТаблицаСвязей");
	мсвСтроки = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(РеквизитыФормы, сткОтбор);
	Если мсвСтроки.Количество() > 0 Тогда 
		// Закроем от изменения нередактируемые поля
		Форма.Элементы["лм_ТаблицаСвязей" +  "КодЭлемента"].ТолькоПросмотр	= Истина;
		Форма.Элементы["лм_ТаблицаСвязей" +  "Связи_СтатусЗаписи"].ТолькоПросмотр	= Истина;
		Форма.Элементы["лм_ТаблицаСвязей" +  "Связи_Выбран"].ТолькоПросмотр	= Истина;
		// Установим ограничение на выбор связи
		Форма.Элементы["лм_ТаблицаСвязей" + "НаименованиеСвязи"].РежимВыбораИзСписка = Истина;
		УстановитьСписокВидовСвязей(Форма.Объект.ШаблонБизнесПроцесса, Форма.Элементы["лм_ТаблицаСвязей" + "НаименованиеСвязи"].СписокВыбора);
		// закроем от изменения ключевые поля существующих записей
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("лм_ТаблицаСвязейНаименованиеСвязи");
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("лм_ТаблицаСвязейЭлементМассиваНСИ");
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("лм_ТаблицаСвязей.Связи_Выбран");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;	
	
	// РасширеннаяНастройкаНСИ.РазрешитьПросмотрПроцессовТекущейЗаписи
	
	Если РазрешитьПросмотрПроцессовТекущейЗаписи Тогда
		СформироватьТаблицуПроцессовТекущейЗаписи(Форма, ГруппаСтраницы, УниверсальнаяСтруктура);	
	КонецЕсли;
	
	// РасширеннаяНастройкаНСИ.ИспользоватьНормализацию
	
	ИспользоватьНормализацию = ПолучитьЗначениеРасширеннойНастройки("ИспользоватьНормализацию", РасширеннаяНастройкаНСИ.Реквизиты); 
		
	Если ИспользоватьНормализацию = Истина Тогда
		КомандыФормы = Форма.Команды;
		КомандаНормализовать = КомандыФормы.Добавить("ВыполнитьНормализацию");
		КомандаНормализовать.Заголовок = "Нормализовать";
		КомандаНормализовать.Картинка = БиблиотекаКартинок.НормализоватьОтобранные;
		КомандаНормализовать.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КомандаНормализовать.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		
		КнопкаНормализовать = ЭлементыФормы.Добавить("ВыполнитьНормализацию", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
		КнопкаНормализовать.ИмяКоманды = "ВыполнитьНормализацию";
	КонецЕсли;
	
	ГруппаДатаВыполнения = ЭлементыФормы.Найти("ГруппаВыполненоДата");
	ГруппаШапка = ЭлементыФормы.Найти("ГруппыШапки");
	ЭлементыФормы.Переместить(ГруппаДатаВыполнения, ГруппаШапка);
	
	ГруппаРезультат = ЭлементыФормы.Найти("ГруппаРезультат");
	ГруппаРезультат.Видимость = Ложь;
	ЗакладкаЗадача = ЭлементыФормы.Найти("Главное");
	ЗакладкаЗадача.Видимость = Ложь;
	
	Если Форма.ПредметСтрокой = "не задан" Тогда
		ЭлементыФормы.Предмет.Видимость = Ложь;
	КонецЕсли;
	
	// РасширеннаяНастройкаНСИ.ИспользоватьКопированиеЗаявки
		
	ИспользоватьКопированиеЗаявки = ПолучитьЗначениеРасширеннойНастройки("ИспользоватьКопированиеЗаявки", РасширеннаяНастройкаНСИ.Реквизиты); 
	
	Если ИспользоватьКопированиеЗаявки Тогда
		КомандыФормы = Форма.Команды;
		КомандаСкопироватьЗаявку	= КомандыФормы.Добавить("СкопироватьЗаявку");
		КомандаСкопироватьЗаявку.Заголовок		= "Скопировать заявку";
		КомандаСкопироватьЗаявку.Картинка		= БиблиотекаКартинок.СкопироватьЭлементСписка;
		КомандаСкопироватьЗаявку.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		КомандаСкопироватьЗаявку.Действие		= "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		
		Элемент_СкопироватьЗаявку = ЭлементыФормы.Добавить("СкопироватьЗаявку", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
		Элемент_СкопироватьЗаявку.ИмяКоманды = "СкопироватьЗаявку";
	КонецЕсли;
		
	РазрешитьИзменениеПредмета = ПолучитьЗначениеРасширеннойНастройки("РазрешитьИзменениеПредмета", РасширеннаяНастройкаНСИ.Реквизиты); 
		
	Если РазрешитьИзменениеПредмета Тогда
		НастроитьОтображениеПредметаЗадачи(Форма);
	КонецЕсли;
	
	УстановитьВариантСортировкиАтрибутов(Форма);
	
КонецПроцедуры

Процедура СформироватьТаблицуПроцессовТекущейЗаписи(Форма, ГруппаСтраницы, УниверсальнаяСтруктура)
	
	ЭлементыФормы        = Форма.Элементы;
	ДобавляемыеРеквизиты = Новый Массив;
	ИмяТаблицыПроцессов = "лм_ТаблицаПроцессовТекущейЗаписи";
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицыПроцессов, Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Процесс", Новый ОписаниеТипов("БизнесПроцессСсылка.лм_БизнесПроцесс"), ИмяТаблицыПроцессов));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ТаблицаПроцессов = ЭлементыФормы.Добавить(ИмяТаблицыПроцессов, Тип("ТаблицаФормы"));
	ТаблицаПроцессов.ПутьКДанным = ИмяТаблицыПроцессов;
	ТаблицаПроцессов.ИзменятьСоставСтрок = Ложь;
	ТаблицаПроцессов.ИзменятьПорядокСтрок = Ложь;
		
	КолонкаТаблицы = ЭлементыФормы.Добавить(ИмяТаблицыПроцессов + "Процесс", Тип("ПолеФормы"), ТаблицаПроцессов);
	КолонкаТаблицы.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаТаблицы.ПутьКДанным = ИмяТаблицыПроцессов + ".Процесс";
	КолонкаТаблицы.Заголовок = "Бизнес-процесс";
	КолонкаТаблицы.РедактированиеТекста = Ложь;
	КолонкаТаблицы.КнопкаВыбора = Ложь;
	КолонкаТаблицы.КнопкаВыпадающегоСписка = Ложь;
	КолонкаТаблицы.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	
	ГруппаНоваяСтраница           = ЭлементыФормы.Добавить("лм_ГруппаСтраницаПроцессыТекущейЗаписи", Тип("ГруппаФормы"), ГруппаСтраницы);
	ГруппаНоваяСтраница.Вид       = ВидГруппыФормы.Страница; 
	ГруппаНоваяСтраница.Заголовок = "Бизнес-процессы текущей записи";
	
	ЭлементыФормы.Переместить(ТаблицаПроцессов, ГруппаНоваяСтраница);
	
	ТЗПроцессы = Новый ТаблицаЗначений;
	ТЗПроцессы.Колонки.Добавить("Процесс", Новый ОписаниеТипов("БизнесПроцессСсылка.лм_БизнесПроцесс"));
	
	Если ЗначениеЗаполнено(Форма.Объект.Предмет) Тогда
	
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	лм_БизнесПроцесс.Ссылка КАК Процесс
		               |ИЗ
		               |	БизнесПроцесс.лм_БизнесПроцесс КАК лм_БизнесПроцесс
		               |ГДЕ
		               |	лм_БизнесПроцесс.Предмет = &Предмет
		               |	И лм_БизнесПроцесс.Ссылка <> &ТекущийПроцесс
		               |	И лм_БизнесПроцесс.Завершен = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Предмет", Форма.Объект.Предмет);
		Запрос.УстановитьПараметр("ТекущийПроцесс", Форма.Объект.БизнесПроцесс);
		
		ТЗПроцессы = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ИдентификаторТекущегоБП = Форма.Объект.БизнесПроцесс.УникальныйИдентификатор();
	Для Каждого Стр Из Форма.лм_ТаблицаПереходныхКлючей Цикл
		ИменаКолонокТПК  = "ВнешнийСправочник,КодВнешнегоСправочника";
		Отбор            = Новый Структура(ИменаКолонокТПК, Стр.ВнешнийСправочник, Стр.КодВнешнегоСправочника);
		МассивРеквизитов = СтрРазделить(ИменаКолонокТПК, ",", Ложь);
		Запрос           = лм_УниверсальныеСтруктурыДанных.СгенерироватьЗапросЭлементовТаблицыУниверсальнойСтруктуры(УниверсальнаяСтруктура, МассивРеквизитов, Отбор, "ТаблицаПереходныхКлючей");	
		УстановитьПривилегированныйРежим(Истина);
		Результат        = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();	
			Пока Выборка.Следующий() Цикл
				Если Выборка.ИдентификаторЭлемента = ИдентификаторТекущегоБП Тогда
					Продолжить;
				КонецЕсли;
				
				БПССылка      = БизнесПроцессы.лм_БизнесПроцесс.ПолучитьСсылку(Выборка.ИдентификаторЭлемента);
				Если БПССылка.Завершен Тогда
					Продолжить;
				КонецЕсли;
				
				СтрТЗ         = ТЗПроцессы.Добавить();				
				СтрТЗ.Процесс = БПССылка;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
	ТЗПроцессы.Свернуть("Процесс");
	Форма[ИмяТаблицыПроцессов].Загрузить(ТЗПроцессы);		
		
КонецПроцедуры

Процедура НастроитьОтображениеПредметаЗадачи(Форма)
	
	ГруппаДанныеБП                   = Форма.Элементы.Найти("ДанныеБизнесПроцесса");		
	ЭлементПредмет                   = Форма.Элементы.Предмет;
	ЭлементПредмет.Видимость         = Ложь;	
	
	ЭлементПредметСсылка             = Форма.Элементы.Вставить("ПредметСсылка", Тип("ПолеФормы"), ГруппаДанныеБП, ЭлементПредмет);
	ЭлементПредметСсылка.ПутьКДанным = "Объект.Предмет";
	ЭлементПредметСсылка.Вид         = ВидПоляФормы.ПолеВвода;
	ЭлементПредметСсылка.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизита");
	
	ОбъектШаблон = Форма.Объект.ШаблонБизнесПроцесса.ПолучитьОбъект();
	
	ОписаниеТиповПредмет = Новый ОписаниеТипов;
	
	Для Каждого Предмет Из ОбъектШаблон.Предметы Цикл
		ИмяОбъектаМД      = Предмет.ТипПредмета.ПолноеИмя;
		МассивПодстрок    = СтрРазделить(ИмяОбъектаМД, ".", Ложь);			
		ТипПредмета       = МассивПодстрок[0] + "Ссылка." + МассивПодстрок[1];
		ОписаниеТиповПредмет = Новый ОписаниеТипов(ОписаниеТиповПредмет, ТипПредмета); 
	КонецЦикла;	
	
	ЭлементПредметСсылка.ОграничениеТипа = ОписаниеТиповПредмет;
	
КонецПроцедуры

Процедура ЗаполнитьТекущиеЗначенияСвязанныхПоДаннымПредмета(Предмет, РеквизитыФормы, Форма)
	
	//МетаОбъект = Предмет.Метаданные();		
	//СтрокиСвязейСправочника = УправлениеНСИ.ПолучитьСвязиСправочникаНСИ(МетаОбъект.ПолноеИмя());		
	//
	//Для Каждого СтрокаСвязи Из СтрокиСвязейСправочника Цикл			
	//	ИмяТаблицы = "";
	//	ДанныеСвязанного = ПолучитьДанныеСвязанного(СтрокаСвязи, Предмет, ИмяТаблицы);
	//	ИмяСправочника   = Сред(ИмяТаблицы, 11);
	//	ИмяРекТаблицы    = "лм_" + ИмяТаблицы;
	//	
	//	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
	//		Если ИмяРекТаблицы = РеквизитФормы.Имя Тогда
	//			ТаблицаФормы = Форма[ИмяРекТаблицы];				
	//			Для Каждого Стр Из ТаблицаФормы Цикл					
	//				ИмяРекСсылка = ИмяСправочника + "_Ссылка";
	//				Отбор        = Новый Структура(ИмяРекСсылка, Стр[ИмяРекСсылка]);
	//				СтрокиОтбора = ДанныеСвязанного.НайтиСтроки(Отбор);
	//				
	//				Если СтрокиОтбора.Количество() <> 0 Тогда
	//					Для Каждого Колонка Из ДанныеСвязанного.Колонки Цикл
	//						Если СтрЗаканчиваетсяНа(Колонка.Имя, "_Классификатор") Тогда 
	//							Попытка
	//								тзКлассификаторы = СтрокиОтбора[0][Колонка.Имя];									
	//								Для каждого Классификатор Из тзКлассификаторы Цикл
	//									ИмяРекКлассификатора = ИмяСправочника + "_Классификатор_" + Строка(Классификатор.Классификатор.Код);
	//									Стр[Колонка.Имя + "_" + Строка(Классификатор.Классификатор.Код) + "_Текущий"] = Классификатор.ЭлементКлассификатора;
	//								КонецЦикла; 
	//							Исключение
	//							КонецПопытки;
	//							Продолжить;
	//						КонецЕсли;
	//						
	//						Попытка
	//							Стр[Колонка.Имя + "_Текущий"] = СтрокиОтбора[0][Колонка.Имя];	
	//						Исключение
	//						КонецПопытки;
	//					КонецЦикла;
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЦикла;		
	//КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТекущиеЗначенияТаблицыПереходныхКлючей(Предмет, РеквизитыФормы, Форма)
	
	//// Проверим, что есть соответствующий реквизит формы
	//сткОтбор = Новый Структура("Имя",	"лм_ТаблицаПереходныхКлючей");
	//мсвСтроки = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(РеквизитыФормы, сткОтбор);
	//Если мсвСтроки.Количество() = 0 Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//мсвТПК = Интеграция.LID(Предмет);
	//Если мсвТПК = Неопределено Тогда
	//	мсвТПК = Новый Массив;
	//КонецЕсли;
	//
	//ТаблицаФормы = Форма.лм_ТаблицаПереходныхКлючей;
	//Для каждого стрПереходныйКлюч Из ТаблицаФормы Цикл
	//	сткОтбор		= Новый Структура("ВнешнийСправочник, КодВнешнегоСправочника", стрПереходныйКлюч.ВнешнийСправочник, стрПереходныйКлюч.КодВнешнегоСправочника);
	//	мсвСтроки		= лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(мсвТПК, сткОтбор);
	//	
	//	Если мсвСтроки.Количество() > 0 Тогда
	//		сткПереходныйКлюч = мсвСтроки[0];
	//		Для Каждого кзПереходныйКлюч Из сткПереходныйКлюч Цикл
	//			Если (    СтрСравнить(кзПереходныйКлюч.Ключ,                 "Выбран") = 0
	//				  Или СтрСравнить(кзПереходныйКлюч.Ключ,      "ВнешнийСправочник") = 0
	//				  Или СтрСравнить(кзПереходныйКлюч.Ключ, "КодВнешнегоСправочника") = 0) Тогда
	//				// Не заполняем для ключевых полей
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			Попытка
	//				// Попытка, если структура изменилась после старта процесса
	//				стрПереходныйКлюч[кзПереходныйКлюч.Ключ + "_Текущий"] = кзПереходныйКлюч.Значение;
	//			Исключение
	//				// Нет такого поля. Структура была изменена.
	//			КонецПопытки;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЭлемент(Элемент, Форма, МассивКлассификаторов, МассивРеквизитов)
		
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода И ТипЗнч(Форма[Элемент.Имя]) = Тип("СправочникСсылка.ЭлементыКлассификаторов") Тогда
		МассивКлассификаторов.Добавить(Элемент);
	ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеВвода И ТипЗнч(Форма[Элемент.Имя]) <> Тип("СправочникСсылка.ЭлементыКлассификаторов") Тогда
		МассивРеквизитов.Добавить(Элемент);
	КонецЕсли;
		
КонецПроцедуры
	
Процедура ДобавитьГруппуНаФорме(ГруппаНаФорме, ЭлементыФормы, СвойстваГруппы)
	
	Если ГруппаНаФорме = Неопределено Тогда
		ГруппаНаФорме = ЭлементыФормы.Добавить(СвойстваГруппы.ИмяГруппы, Тип("ГруппаФормы"), СвойстваГруппы.РодительГруппы);
		ГруппаНаФорме.Вид = СвойстваГруппы.ВидГруппы;
		ГруппаНаФорме.Отображение = СвойстваГруппы.ОтображениеГруппы;
		ГруппаНаФорме.Группировка = СвойстваГруппы.ГруппировкаЭлементов;
		ГруппаНаФорме.Заголовок = СвойстваГруппы.ЗаголовокГруппы;
		ГруппаНаФорме.ОтображатьЗаголовок = СвойстваГруппы.ОтображатьЗаголовок;
		
		Если СвойстваГруппы.Свойство("Отображение") Тогда
			ГруппаНаФорме.Отображение = СвойстваГруппы.Отображение;
		КонецЕсли;
		Если СвойстваГруппы.Свойство("Поведение") Тогда
			ГруппаНаФорме.Поведение = СвойстваГруппы.Поведение;
		КонецЕсли;
		Если СвойстваГруппы.Свойство("ОтображениеУправления") Тогда
			ГруппаНаФорме.ОтображениеУправления = СвойстваГруппы.ОтображениеУправления;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьЭлементНаФорме(ЭлементыФормы, ИмяЭлемента, ВидЭлемента, ПутьКДанным)

	ЭлементНаФорме = ЭлементыФормы.Добавить(ИмяЭлемента, Тип("ПолеФормы"));
	ЭлементНаФорме.Вид = ВидЭлемента; 
	ЭлементНаФорме.ПутьКданным = ПутьКДанным; 
	Возврат ЭлементНаФорме;

КонецФункции

Функция СформироватьТаблицуОсновныхДанныхПроцесса(Предмет, УниверсальнаяСтруктура, ДанныеСтруктуры)
	
	СоставДанных = Новый ТаблицаЗначений;
	
	СоставДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	СоставДанных.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), "Представление");
	СоставДанных.Колонки.Добавить("ТекущееЗначение",, "Значение");
	СоставДанных.Колонки.Добавить("Значение",, "Новое значение");
	СоставДанных.Колонки.Добавить("Видимость", Новый ОписаниеТипов("Булево"));
	СоставДанных.Колонки.Добавить("Доступность", Новый ОписаниеТипов("Булево"));
	СоставДанных.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	СоставДанных.Колонки.Добавить("АвтоОтметкаНезаполненного", Новый ОписаниеТипов("Булево"));
	
	ПредметБП = Предмет.Предмет;
	стрДанныеПредмета = Новый Структура;
	Если ЗначениеЗаполнено(ПредметБП) Тогда
		Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если Не Предмет.Выполнена Тогда
				стрДанныеПредмета = ПолучитьСтруктуруДанныхПредмета(ПредметБП);
			Иначе
				стрДанныеПредмета = лм_БизнесПроцессыВызовСервераПереопределяемый.ПолучитьСтруктуруДанныхПредметаИзПараметров(Предмет);
			КонецЕсли;
		Иначе
			стрДанныеПредмета = ПолучитьСтруктуруДанныхПредмета(ПредметБП);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		ИмяРеквизита = Реквизит.ИмяПоля;
		Если Не Реквизит.ТипЗначения.СодержитТип(Тип("Структура")) И Не ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
			ИмяРеквизитаСПрефиксом	= "лм_" + ИмяРеквизита;
			СтрТЗ					= СоставДанных.Добавить();
			СтрТЗ.Представление		= Реквизит.Синоним;
			СтрТЗ.Значение			= ?(ДанныеСтруктуры.Свойство(ИмяРеквизита), ДанныеСтруктуры[ИмяРеквизита], Неопределено);
			СтрТЗ.ИмяРеквизита		= ИмяРеквизитаСПрефиксом;
			СтрТЗ.ТекущееЗначение	= ?(стрДанныеПредмета.Свойство(ИмяРеквизитаСПрефиксом), стрДанныеПредмета[ИмяРеквизитаСПрефиксом], Неопределено);
			СтрТЗ.Видимость			= Истина;
			СтрТЗ.Доступность		= Истина;
			СтрТЗ.ТолькоПросмотр	= Ложь;             
			СтрТЗ.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОписаниеОбъекта", Предмет);
	Для Каждого СтрокаРеквизита Из СоставДанных Цикл
		Параметры.Вставить(СтрокаРеквизита.ИмяРеквизита, СтрокаРеквизита.Значение);
	КонецЦикла;
	СоответствиеЗависимых = лм_УниверсальныеСтруктурыДанных.СформироватьСоответствиеЗависимыхРеквизитов(УниверсальнаяСтруктура, Ложь);
	ДанныеЗависимостей = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ДанныеЗависимостейРеквизитовУниверсальнойСтруктуры(СоответствиеЗависимых, Параметры);
	Для Каждого ДанныеЗависимости Из ДанныеЗависимостей Цикл
		НайденныеСтроки = СоставДанных.НайтиСтроки(Новый Структура("ИмяРеквизита", ДанныеЗависимости.Ключ));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ДанныеЗависимости.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ТаблицаОтображения = лм_БизнесПроцессы.СформироватьТаблицуОтображенияРеквизитовТочкиДействия(Предмет.ИдентификаторТочки, Предмет.БизнесПроцесс.НомерВерсии, УниверсальнаяСтруктура);
		лм_БизнесПроцессыКлиентСерверПереопределяемый.УстановитьОтображениеСоставаДанных(СоставДанных, ТаблицаОтображения);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Видимость", Истина);
	СоставКолонок = Новый Массив();
	СоставКолонок.Добавить("Представление");
	Если ЗначениеЗаполнено(ПредметБП) Тогда
		СоставКолонок.Добавить("ТекущееЗначение");
	КонецЕсли;
	СоставКолонок.Добавить("Значение");
	Колонки = СтрСоединить(СоставКолонок, ", ");
	ТаблицаРезультат = СоставДанных.Скопировать(ПараметрыОтбора, Колонки);
	
	Возврат ТаблицаРезультат;
		
КонецФункции

Функция ПреобразоватьТаблицуЗначенийВHTMLСтроку(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ШиринаКолонки = Строка(Цел(100 / ТаблицаЗначений.Колонки.Количество()));
	HTMLСтрока = "<table cellpadding=0 cellspasing=0 style=""border:1px solid #333333;background-color:#FFFFFF;border-collapse:collapse;width:100%;"">";
	
	HTMLСтрока = HTMLСтрока + "<tr>";
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл 
		HTMLСтрока = HTMLСтрока + "<td style=""padding:3px 10px;border:1px solid #333333;background-color:#EEEEEE;width:" + ШиринаКолонки + "%;text-align:center;""><b>" + Колонка.Заголовок + "</b></td>"; 		
	КонецЦикла;
	HTMLСтрока = HTMLСтрока + "</tr>";
	
	ОтображатьРазличные = Ложь;
	Если ТаблицаЗначений.Колонки.Найти("ТекущееЗначение") <> Неопределено
			И ТаблицаЗначений.Колонки.Найти("Значение") <> Неопределено Тогда
		ОтображатьРазличные = Истина;
	КонецЕсли;
	
	Для Каждого СтрТЗ Из ТаблицаЗначений Цикл
		HTMLСтрока = HTMLСтрока + "<tr>";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ЦветТекста = "#000000";
			Если ОтображатьРазличные = Истина Тогда
				ОбаНеЗаполнены = Не ЗначениеЗаполнено(СтрТЗ.ТекущееЗначение) И Не ЗначениеЗаполнено(СтрТЗ.Значение);
			КонецЕсли;
			
			Если ОтображатьРазличные = Истина 
					И СтрТЗ.ТекущееЗначение <> СтрТЗ.Значение И ОбаНеЗаполнены = Ложь Тогда
				ЦветТекста = "#FF0000";
			КонецЕсли;
			СтильЯчейки = "padding:3px 10px;border:1px solid #333333;color:" + ЦветТекста + ";";
			HTMLСтрока = HTMLСтрока + "<td style=""" + СтильЯчейки + """>" + Строка(СтрТЗ[Колонка.Имя]) + "</td>";
		КонецЦикла;
		HTMLСтрока = HTMLСтрока + "</tr>";
	КонецЦикла;
	
	HTMLСтрока = HTMLСтрока + "</table>";
	
	Возврат HTMLСтрока;
	
КонецФункции

Процедура УстановитьОграниченияТиповАтрибутов(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	РеквизитыПоИмени = Новый Структура();
	Для Каждого Реквизит Из РеквизитыФормы Цикл
		РеквизитыПоИмени.Вставить(Реквизит.Имя, Реквизит);
	КонецЦикла;
	
	МеткиРеквизитов = Новый Структура();
	УстановитьПривилегированныйРежим(Истина);
	МассивСтруктур = лм_УниверсальныеСтруктурыДанных.ПолучитьСтруктурыВладельца(Форма.Объект.БизнесПроцесс.Шаблон);
	УстановитьПривилегированныйРежим(Ложь);
	Для Каждого ИдентификаторСтруктуры Из МассивСтруктур Цикл
		МассивСтруктур         = ПолучитьИзВременногоХранилища(Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры()]);
		УниверсальнаяСтруктура = МассивСтруктур[0];
		Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
			ИмяРеквизита = "лм_" + Реквизит.ИмяПоля;
			Если СтрНачинаетсяС(Реквизит.Метка, УправлениеНСИКлиентСервер.ВидДанныхДополнительноеСвойство()) Тогда
				Элемент = ЭлементыФормы.Найти(ИмяРеквизита);
				Если Элемент <> Неопределено
						И РеквизитыПоИмени.Свойство(ИмяРеквизита) Тогда
					Реквизит = РеквизитыПоИмени[ИмяРеквизита];
					Элемент.ОграничениеТипа = Новый ОписаниеТипов(Реквизит.ТипЗначения,, "СправочникСсылка.ИдентификаторыОбъектовМетаданных");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗадачиТекущегоПользователя(БизнесПроцесс) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителяЗадачиПоИсполнителю.Ссылка КАК Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&Пользователь, ) КАК ЗадачаИсполнителяЗадачиПоИсполнителю
	               |ГДЕ
	               |	ЗадачаИсполнителяЗадачиПоИсполнителю.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	ОтборЗаданий = Новый Структура();
	ОтборЗаданий.Вставить("Наименование", Строка(БизнесПроцесс.УникальныйИдентификатор()));
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	Пока МассивЗаданий.Количество() > 0 Цикл
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
			Прервать;
		КонецПопытки;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
			Прервать;
		КонецЕсли;
		
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Возврат Результат;
	
КонецФункции

Процедура УстановитьСписокВидовСвязей(ШаблонБизнесПроцесса, СписокВидовСвязей)
	
	МассивПредметов   = Новый Массив;
	
	Для Каждого Стр Из ШаблонБизнесПроцесса.Предметы Цикл
		МассивПредметов.Добавить(Стр.ТипПредмета);		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСвязейСправочниковНСИ.ВидСвязи КАК ВидСвязи
	               |ИЗ
	               |	РегистрСведений.НастройкиСвязейСправочниковНСИ КАК НастройкиСвязейСправочниковНСИ
	               |ГДЕ
	               |	НастройкиСвязейСправочниковНСИ.Справочник1 В (&МассивПредметов)";
	
	Запрос.УстановитьПараметр("МассивПредметов", МассивПредметов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокВидовСвязей.Добавить(Выборка.ВидСвязи);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеРасширеннойНастройки(ИмяНастройки, МассивНастроек)
	
	ЗначениеНастройки = Ложь;
	Отбор = Новый Структура("Имя", ИмяНастройки);
	СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(МассивНастроек, Отбор);
	Если СтрокиОтбора.Количество() > 0 Тогда
		ЗначениеНастройки = СтрокиОтбора[0].Значение;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

Процедура УстановитьВариантСортировкиАтрибутов(Форма)
	
	//ИмяРеквизита     = лм_БизнесПроцессыКлиентСерверПереопределяемый.ИмяРеквизитаВариантСортировкиАтрибутовСправочникаНСИ();
	//МассивРеквизитов = Новый Массив;
	//РеквизитВариант  = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"));
	//МассивРеквизитов.Добавить(РеквизитВариант);	
	//Форма.ИзменитьРеквизиты(МассивРеквизитов);
	//	
	//ИдентификаторСправочникаНСИ = Неопределено;
	//Для Каждого Предмет Из Форма.Объект.ШаблонБизнесПроцесса.Предметы Цикл
	//	ИдентификаторСправочникаНСИ = Предмет.ТипПредмета;	
	//КонецЦикла;
	//
	//Если ИдентификаторСправочникаНСИ <> Неопределено Тогда
	//	СправочникНСИОбъект = УправлениеНСИ.ПолучитьСправочникНСИПоИдентификатору(ИдентификаторСправочникаНСИ);
	//	Если СправочникНСИОбъект.ОтображениеАтрибутов = Перечисления.ОтображениеАтрибутов.ПоГруппамАтрибутов Тогда
	//		Форма[ИмяРеквизита] = "Порядок";	
	//	Иначе
	//		Форма[ИмяРеквизита] = "НомерПоПорядку";	
	//	КонецЕсли;
	//КонецЕсли;
		
КонецПроцедуры

Процедура ОтправитьСвязьПоИК(ОбъектФормыЗадача) Экспорт
	
	//ТекстИсключения = "Ошибка. Не удается отправить данные в интеграционную компоненту";
	//ПредметСсылка = ОбъектФормыЗадача.Предмет;
	//Если НЕ ЗначениеЗаполнено(ПредметСсылка) Тогда
	//	ВызватьИсключение ТекстИсключения + " - не заполнен предмет";
	//КонецЕсли;

	//ИдентификаторСтруктуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектФормыЗадача.БизнесПроцесс, "Шаблон").УникальныйИдентификатор();
	//УстановитьПривилегированныйРежим(Истина);
	//СтруктураДанных = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
	//ДанныеПроцесса = лм_УниверсальныеСтруктурыДанных.ПолучитьЗначенияУниверсальнойСтруктуры(ОбъектФормыЗадача.БизнесПроцесс, СтруктураДанных);
	//УстановитьПривилегированныйРежим(Ложь);
	//	
	//ИдентификаторПредмета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПредметСсылка));
	//ВнешниеСправочники = Новый Массив();
	//текExtCatalogID = "";
	//
	//Если ДанныеПроцесса.ТаблицаПереходныхКлючей.Количество() Тогда
	//	
	//	КоличествоНовых = 0;
	//	Для Каждого ПереходныйКлюч Из ДанныеПроцесса.ТаблицаПереходныхКлючей Цикл
	//		Если НЕ ПереходныйКлюч.Выбран Тогда
	//			КоличествоНовых   = КоличествоНовых + 1;
	//			ВнешнийСправочник = ПереходныйКлюч.ВнешнийСправочник;
	//			lid               = ПереходныйКлюч.КодВнешнегоСправочника;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если НЕ КоличествоНовых = 1 Тогда
	//		ВызватьИсключение ТекстИсключения + " - по таблице переходных ключей в бизнес-процессе не был выбран внешний справочник";
	//	КонецЕсли;	
	//	
	//	ExtCatalog = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнешнийСправочник, "Код, Наименование");
	//			
	//	ВнешниеСправочники.Добавить(ВнешнийСправочник);
	//   	НЗ = РегистрыСведений.ИнтеграционныеКомпонентыВнешнегоСправочника.СоздатьНаборЗаписей();
	//	НЗ.Отбор.ВнешнийСправочник.Установить(ВнешнийСправочник);
	//	НЗ.Прочитать();
	//	
	//	// ИК получаем из параметров ТПК из БП. Исходим из того - один внешн.спр. одна ИК. 
	//	// Если внешн.спр. привязан к нескольким ИК, как обработать? Пока отправляем в одну ИК.	
	//	Если НЗ.Количество() = 1 Тогда
	//		ссылкаИнтеграционнаяКомпонента = НЗ[0].ИнтеграционнаяКомпонента;
	//	Иначе
	//		ВызватьИсключение ТекстИсключения + " - не найдена (или найдено более одной) ИК для внешнего справочника: " + ВнешнийСправочник;
	//	КонецЕсли;
	//Иначе
	//	ВызватьИсключение ТекстИсключения + " - в таблице переходных ключей в бизнес-процессе не заполнен переходной ключ";
	//КонецЕсли;
	//		
	//сткИнтеграционнаяКомпонента = Интеграция.ПараметрыПодключения(ссылкаИнтеграционнаяКомпонента);
	//Прокси = Интеграция.WSПроксиИК(сткИнтеграционнаяКомпонента); 
	//
	//текСеансОбмена		= Интеграция.СеансОбмена(сткИнтеграционнаяКомпонента);
	//текНомерСообщения	= текСеансОбмена.Код;
	//текСписокДанных = Новый Массив();
	//текСписокДанных.Добавить(ПредметСсылка);
	//
	//Сообщение = Интеграция.Message_Объект(текНомерСообщения, текСписокДанных, ВнешниеСправочники, Прокси);
	//
	//ЗаписьСообщения = Сообщение.Items.Item[0];
	//ЗаписьСообщения.refLIDs.Очистить();
	//
	//refLID = Интеграция.ОбъектXDTO("LIDType", Прокси);	
	//
	//refLID.ExtCatalog = Интеграция.ОбъектXDTO("ExtCatalog.Key", Прокси);
	//refLID.ExtCatalog.id   = ExtCatalog.Код;
	//refLID.ExtCatalog.name = ExtCatalog.Наименование;
	//
	//refLID.lid             = lid;
	//refLID.description     = "";
	//refLID.master     	   = Истина;
	//
	//ЗаписьСообщения.refLIDs.Добавить(refLID);
	//
	//Попытка
	//	Сообщение.Parameters = "ЗагружатьТолькоСвязи";
	//Исключение
	//	ВызватьИсключение ТекстИсключения + " - в структуре сообщения не найден атрибут ""Parameters""";
	//КонецПопытки;
	//
	//ОшибкаПриОбмене = Ложь;
	//Попытка
	//	РезультатОбмена = Прокси.Registration(Сообщение);
	//	
	//	ОшибкаПриОбмене	= (РезультатОбмена.error = Истина) Или (РезультатОбмена.statusCode < 200 Или 300 <= РезультатОбмена.statusCode);		
	//	Если ОшибкаПриОбмене Тогда
	//		
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка отправки сообщения: ""%1""'"), РезультатОбмена.description);
	//		
	//		Интеграция.ЗафиксироватьСеансОбмена(Сообщение.MessageID, ТекстСообщения, ОшибкаПриОбмене, Истина, РезультатОбмена);
	//		ВызватьИсключение ТекстИсключения + " - ошибка отправки сообщения: statusCode = " + РезультатОбмена.statusCode;
	//	КонецЕсли;
	//	
	//	ТекстСообщения = НСтр("ru = 'Обмен прошел успешно'");
	//	Интеграция.ЗафиксироватьСеансОбмена(Сообщение.MessageID, ТекстСообщения, ОшибкаПриОбмене, Истина, РезультатОбмена);
	//	
	//Исключение
	//	
	//	текИнформацияОбОшибке	= ИнформацияОбОшибке();
	//	текПодробнаяИнформация	= ПодробноеПредставлениеОшибки(текИнформацияОбОшибке);
	//	ТекстСообщения = НСтр("ru = 'Ошибка отправки сообщения'") + ": " + текПодробнаяИнформация;
	//	
	//	Если НЕ ОшибкаПриОбмене Тогда 
	//		Интеграция.ЗафиксироватьСеансОбмена(Сообщение.MessageID, ТекстСообщения, Истина, Истина, РезультатОбмена);	
	//	КонецЕсли;
	//	
	//	ВызватьИсключение ТекстИсключения + текПодробнаяИнформация;
	//	
	//КонецПопытки;
	
КонецПроцедуры

#КонецОбласти