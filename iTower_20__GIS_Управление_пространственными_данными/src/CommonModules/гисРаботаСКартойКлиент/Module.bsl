////////////////////////////////////////////////////////////////////////////////
// Клиентский модуль для работы с картой.
// Основное назначение:
//  - вызов функций js, чтобы был один модуль для взаимодействия с js.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывает js-функцию получения текущего экстента карты.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента".
//
// Возвращаемое значение:
//	Строка - текущий экстент карты.
//		
Функция КартаЭкстентПолучить(Форма) Экспорт
	Возврат ВызватьФункцию(Форма, "getMapExtent_1C");
КонецФункции

// Вызывает js-функцию установки экстента карты.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Экстент		-	Строка - экстент карты, который требуется установить.
//
Процедура КартаЭкстентУстановить(Форма, Экстент) Экспорт
	ВызватьФункцию(Форма, "zoomToExtent_1C", Экстент);
КонецПроцедуры

// Вызывает js-функцию установки параметров инициализации для карты.
//
// Параметры:
//  Форма			-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  КлючКосмоснимки	-	Строка - Ключ для базовых слоев "Космоснимки";
//  КлючЯндекс		-	Булево - признак использования базовых слоев "Яндекс";
//  КлючArcgis		-	Булево - признак использования базовых слоев "ArcGIS".
//
Процедура КартаПараметрыИнициализацииУстановить(Форма, КлючКосмоснимки, КлючЯндекс, КлючArcgis) Экспорт
	Параметры = Новый Структура("kosmosnimkiApiKey,yandexPermitted,arcgisPermitted", КлючКосмоснимки, КлючЯндекс, КлючArcgis);
	ВызватьФункцию(Форма, "setInitParams", гисРаботаСJson.ЗаписатьНативно(Параметры));
КонецПроцедуры

// Вызывает js-функцию добавления объектов на карту.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты - добавляется на карту один этот объект;
//					Массив/СписокЗначений, элементами являются СправочникСсылка.гисОбъектыКарты - добавляются на карту
//						все переданные объекты;
//  ДеревоСлоев -	Строка - внутреннее представление дерева слоев.
//
// Возвращаемое значение:
//	- Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой				- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		Ид					- Строка - идентификатор слоя на карте;
//		Показатель			- СправочникСсылка.гисПоказатели - показатель объекта слоя.
//		КоличествоНаКарте	- Число - количество объектов слоя, отображенных на карте.
//		
Функция ОбъектыДобавитьНаКарту(Форма, ОбъектКарты, ДеревоСлоев) Экспорт
	// TODO возможно, сделать один серверный вызов
	МассивСлоев = ТочечныеОбъектыДобавитьНаКарту(Форма, ОбъектКарты, ДеревоСлоев);
	МассивСлоевКонтурных = КонтурныеОбъектыДобавитьНаКарту(Форма, ОбъектКарты, ДеревоСлоев);
	Для Каждого Слой Из МассивСлоевКонтурных Цикл
		МассивСлоев.Добавить(Слой);
	КонецЦикла;
	Возврат МассивСлоев;
КонецФункции

// Вызывает js-функцию удаления объектов с карты.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	Неопределено - тогда удаляются ВСЕ объекты с карты;
//					СправочникСсылка.гисОбъектыКарты - удаляется с карты один этот объект;
//					Массив/СписокЗначений, элементами являются предыдущие типы - удаляются с карты все переданные объекты;
//	ИмяОбъектаМетаданных	- 	Строка - имя объекта метаданных, по которому все объекты типа удалятся с карты.
// 
// Возвращаемое значение:
//	- Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой				- СправочникСсылка.гисСлоиКарты - слой, который был выключен;
//		Ид					- Строка - идентификатор слоя на карте;
//		КоличествоНаКарте	- Число - количество объектов слоя, отображенных на карте.
//
Функция ОбъектыУдалитьСКарты(Форма, ОбъектКарты = Неопределено, ИмяОбъектаМетаданных = Неопределено) Экспорт
	// TODO возможно, сделать один серверный вызов
	МассивСлоев = ТочечныеОбъектыУдалитьСКарты(Форма, ОбъектКарты);
	МассивСлоевКонтурных = КонтурныеОбъектыУдалитьСКарты(Форма, ОбъектКарты, ИмяОбъектаМетаданных);
	Для Каждого Слой Из МассивСлоевКонтурных Цикл
		МассивСлоев.Добавить(Слой);
	КонецЦикла;
	Возврат МассивСлоев;
КонецФункции

#Область ТочечныеОбъекты

// Вызывает js-функцию добавления точечных объектов на карту.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты - добавляется на карту один этот объект;
//					Массив/СписокЗначений, элементами являются СправочникСсылка.гисОбъектыКарты - добавляются на карту
//						все переданные объекты;
//  ДеревоСлоев -	Строка - внутреннее представление дерева слоев.
//
// Возвращаемое значение:
//	- Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой				- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		Ид					- Строка - идентификатор слоя на карте;
//		Показатель			- СправочникСсылка.гисПоказатели - показатель объекта слоя.
//		КоличествоНаКарте	- Число - количество объектов слоя, отображенных на карте.
//
Функция ТочечныеОбъектыДобавитьНаКарту(Форма, ОбъектКарты, ДеревоСлоев) Экспорт
	МассивСлоев = Новый Массив;
	МассивКартинок = Новый Массив;
	ОтображаемыеНаКартеОбъекты = гисРаботаСКартойСервер.ТочечныеОбъектыДобавитьНаКартуСформироватьJson(ОбъектКарты, , ДеревоСлоев, МассивСлоев, МассивКартинок);
	
	ПубликацияКартинокТочечныхОбъектов(Форма, МассивКартинок);
	ВызватьФункцию(Форма, "addPoints_1C", ОтображаемыеНаКартеОбъекты);
	СлоиКартыПодготовитьДанныеДляОтображенияГалокДобавление(Форма, МассивСлоев);
	
	Возврат МассивСлоев;
КонецФункции

// Вызывает js-функцию удаления точечных объектов с карты.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	Неопределено - тогда удаляются ВСЕ точечные объекты с карты;
//					СправочникСсылка.гисОбъектыКарты - удаляется с карты один этот объект;
//					Массив/СписокЗначений, элементами являются СправочникСсылка.гисОбъектыКарты - удаляются с карты
//						все переданные объекты.
// 
// Возвращаемое значение:
//	- Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой				- СправочникСсылка.гисСлоиКарты - слой, который был выключен;
//		Ид					- Строка - идентификатор слоя на карте;
//		КоличествоНаКарте	- Число - количество объектов слоя, отображенных на карте.
//
Функция ТочечныеОбъектыУдалитьСКарты(Форма, ОбъектКарты = Неопределено) Экспорт
	МассивСлоев = Новый Массив;
	ВызватьФункцию(Форма, "removePoints_1C", гисРаботаСКартойСервер.ТочечныеОбъектыУдалитьСКартыСформироватьJson(ОбъектКарты, , МассивСлоев));
	
	СлоиКартыПодготовитьДанныеДляОтображенияГалокУдаление(Форма, МассивСлоев);
	
	Возврат МассивСлоев;
КонецФункции

// Выполняет позиционирование по координатам.
//
// Параметры:
//  Форма	 -	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Широта	 - 	Число - широта точки позиционирования;
//  Долгота	 - 	Число - долгота точки позиционирования.
//
Процедура ТочечныеОбъектыСпозиционироваться(Форма, Широта, Долгота) Экспорт
	Если ЗначениеЗаполнено(Широта) Или ЗначениеЗаполнено(Долгота) Тогда
		Json = Новый Структура("lat,lon", Широта, Долгота);
		ВызватьФункцию(Форма, "setCenter_1C", гисРаботаСJson.ЗаписатьНативно(Json));
	КонецЕсли;
КонецПроцедуры

// Выполняет показ анимации в точке.
//
// Параметры:
//  Форма	 -	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Широта	 - 	Число - широта точки для анимации;
//  Долгота	 - 	Число - долгота точки для анимации.
//
Процедура ТочечныеОбъектыАнимацияВТочке(Форма, Широта, Долгота) Экспорт
	Если ЗначениеЗаполнено(Широта) Или ЗначениеЗаполнено(Долгота) Тогда
		Json = Новый Структура("lat,lon", Широта, Долгота);
		ВызватьФункцию(Форма, "SetArrowPointer_1C", гисРаботаСJson.ЗаписатьНативно(Json));
	КонецЕсли;
КонецПроцедуры

// Выполняет приближение к точке.
//
// Параметры:
//  Форма	 -	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Широта	 - 	Число - широта точки для приближения;
//  Долгота	 - 	Число - долгота точки для приближения.
//
Процедура ТочечныеОбъектыПриблизить(Форма, Широта, Долгота) Экспорт
	Если ЗначениеЗаполнено(Широта) Или ЗначениеЗаполнено(Долгота) Тогда
		Json = Новый Структура("lat,lon", Широта, Долгота);
		ВызватьФункцию(Форма, "extentOnFeature_1C", гисРаботаСJson.ЗаписатьНативно(Json));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены координаты!");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КонтурныеОбъекты

// Вызывает js-функцию добавления контурных объектов на карту.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты - добавляется на карту один этот объект;
//					СправочникСсылка.гисКадастровыеЗемельныеУчастки - добавляется на карту один этот объект;
//					Массив/СписокЗначений, элементами являются предыдущие типы - добавляются на карту все переданные объекты;
//  ДеревоСлоев -	Строка - внутреннее представление дерева слоев.
// 
// Возвращаемое значение:
//	Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой				- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		Ид					- Строка - идентификатор слоя на карте;
//		Показатель			- СправочникСсылка.гисПоказатели - показатель объекта слоя;
//		КоличествоНаКарте	- Число - количество объектов слоя, отображенных на карте.
//
Функция КонтурныеОбъектыДобавитьНаКарту(Форма, ОбъектКарты, ДеревоСлоев) Экспорт
	МассивСлоев = Новый Массив;
	ВызватьФункцию(Форма, "addFeaturesByJson_1C", гисРаботаСКартойСервер.КонтурныеДобавитьНаКартуСформироватьJson(ОбъектКарты, , ДеревоСлоев, МассивСлоев));
	
	СлоиКартыПодготовитьДанныеДляОтображенияГалокДобавление(Форма, МассивСлоев);
	
	Возврат МассивСлоев;
КонецФункции

// Вызывает js-функцию удаления контурных объектов с карты.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	Неопределено - тогда удаляются ВСЕ контурные объекты с карты;
//					СправочникСсылка.гисОбъектыКарты - удаляется с карты один этот объект;
//					СправочникСсылка.гисКадастровыеЗемельныеУчастки - удаляется с карты один этот объект;
//					Массив/СписокЗначений, элементами являются предыдущие типы - удаляются с карты все переданные объекты;
//	ИмяОбъектаМетаданных	- 	Строка - имя объекта метаданных, по которому все объекты типа удалятся с карты.
// 
// Возвращаемое значение:
//	Массив - элементы типа Структура, каждый элемент содержит поля:
//		Слой				- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		Ид					- Строка - идентификатор слоя на карте;
//		КоличествоНаКарте	- Число - количество объектов слоя, отображенных на карте.
//	
Функция КонтурныеОбъектыУдалитьСКарты(Форма, ОбъектКарты = Неопределено, ИмяОбъектаМетаданных = Неопределено) Экспорт
	МассивСлоев = Новый Массив;
	ВызватьФункцию(Форма, "removeFeatures_1C", гисРаботаСКартойСервер.КонтурныеУдалитьСКартыСформироватьJson(ОбъектКарты, ИмяОбъектаМетаданных, МассивСлоев));
	
	СлоиКартыПодготовитьДанныеДляОтображенияГалокУдаление(Форма, МассивСлоев);
	
	Возврат МассивСлоев;
КонецФункции

// Включает/выключает обратное позиционирование с карты.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Режим	 - Булево	 - Истина - выполнять обратное позиционирование с карты;
//						 - Ложь - НЕ выполнять обратное позиционирование с карты.
//
Процедура КонтурныеОбъектыПозиционироваться(Форма, Режим) Экспорт
	ВызватьФункцию(Форма, "setPositioning_1C", Режим);
КонецПроцедуры

// Выполяет позиционирование по контурному объекту.
//
// Параметры:
//  Форма		 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты - позиционирование делается по переданному объекту.
//
Процедура КонтурныеОбъектыСпозиционироваться(Форма, ОбъектКарты) Экспорт
	Геометрия = гисРаботаСКартойСервер.КонтурныеПолучитьГеометрию(ОбъектКарты);
	Если ЗначениеЗаполнено(Геометрия) Тогда
		ВызватьФункцию(Форма, "centerOnFeature_1C", Геометрия);
	КонецЕсли;
КонецПроцедуры

// Выполяет приближение к контурному объекту.
//
// Параметры:
//  Форма		 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты - приближение делается к переданному объекту.
//
Процедура КонтурныеОбъектыПриблизить(Форма, ОбъектКарты) Экспорт
	Геометрия = гисРаботаСКартойСервер.КонтурныеПолучитьГеометрию(ОбъектКарты);
	Если ЗначениеЗаполнено(Геометрия) Тогда
		ВызватьФункцию(Форма, "extentOnFeature_1C", Геометрия);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена геометрия!");
	КонецЕсли;
КонецПроцедуры

// Включает редактор на карте и перадает ему позицию текущего объекта.
// Доступный для редактирования тип геометрии в редакторе сокращается до типа геометрии объекта (линия или полигон).
//
// Параметры:
//  Форма		 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты - реактируемый объект.
//
Процедура КонтурныеОбъектыВключитьРедактор(Форма, ОбъектКарты) Экспорт
	Геометрия = гисРаботаСКартойСервер.КонтурныеПолучитьГеометрию(ОбъектКарты);
	Если ЗначениеЗаполнено(Геометрия) Тогда
		Объекты = Новый Массив(1);
		Объекты[0] = Геометрия;
		Json = Новый Структура("type,features", "Polygon", Объекты);
		ВызватьФункцию(Форма, "editOn_1C", гисРаботаСJson.ЗаписатьНативно(Json));
	КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область Слои

// Вызывает js-функцию изменения базового слоя на карте.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - Строка - название базового слоя, который нужно установить.
//
Процедура СлоиБазовыйСлойИзменить(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "setBaseLayer_1C", Слой);
КонецПроцедуры

// Вызывает js-функцию изменения непрозрачности базового слоя на карте.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Непрозрачность	 - Число - от 0 до 100, значение непрозрачности в процентах, которое нужно установить базовому слою.
//
Процедура СлоиБазовыйСлойНепрозрачностьИзменить(Форма, Непрозрачность) Экспорт
	ВызватьФункцию(Форма, "setBaseLayerOpacity_1C", Непрозрачность);
КонецПроцедуры


// Вызывает js-функцию добавления слоя на карту.
// В зависимости от слоя определяет нужную функцию и собирает нужные параметры.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно добавить;
//  ДеревоСлоев -	Строка - внутреннее представление дерева слоев.
//
// Возвращаемое значение:
//	Неопределено - если была ошибка;
//	Массив элементов типа Структура, каждый элемент содержит поля:
//		Слой	- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		СлойИд	- Строка - идентификатор слоя на карте;
//		КоличествоВсего - Число - количество объектов в слое;
//		КоличествоНаКарте - Число - количество объектов слоя, отображенных на карте.
//
Функция СлоиДобавитьНаКарту(Форма, Слой, ДеревоСлоев) Экспорт
	Структура = гисРаботаСКартойСервер.СлоиДобавитьНаКартуПолучитьПараметры(Слой, ДеревоСлоев);
	Если Структура.Свойство("Ошибка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Структура.Ошибка);
	Иначе
		ПубликацияКартинокТочечныхОбъектов(Форма, Структура.Картинки);
		ВызватьФункцию(Форма, Структура.ИмяМетода, Структура.Параметры);
		
		СлоиКартыПодготовитьДанныеДляОтображенияГалокДобавление(Форма, Структура.Слои);
		
		Возврат Структура.Слои;
	КонецЕсли;
КонецФункции

// Вызывает js-функцию удаления слоя с карты.
// В зависимости от слоя определяет нужную функцию и собирает нужные параметры.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно удалить.
//
Процедура СлоиУдалитьСКарты(Форма, Слой) Экспорт
	Структура = гисРаботаСКартойСервер.СлоиУдалитьСКартыПолучитьПараметры(Слой);
	Если Структура.Свойство("Ошибка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Структура.Ошибка);
	Иначе
		ВызватьФункцию(Форма, Структура.ИмяМетода, Структура.Параметры);
		
		СлоиКартыПодготовитьДанныеДляОтображенияГалокУдаление(Форма, Структура.Слои);
	КонецЕсли;
КонецПроцедуры

// Вызывает js-функцию получения количества объектов в слое.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - Строка - идентификатор слоя, количество объектов которого нужно узнать.
//
// Возвращаемое значение:
//	- Число - количество отображенных объектов.
Функция СлоиПолучитьКоличествоОбъектов(Форма, Слой) Экспорт
	ЧислоОбъектов = ВызватьФункцию(Форма, "getLayerFeaturesCount_1C", Слой);
	Если ЧислоОбъектов = Неопределено Тогда
		ЧислоОбъектов = 0;
	КонецЕсли;
	Возврат ЧислоОбъектов;
КонецФункции

// Вызывает js-функцию приближения к слою на карте.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно удалить.
//
Процедура СлоиПриблизить(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "extentOnLayer_1C", гисРаботаСКартойСервер.СлоиПолучитьИмяСлояВJs(Слой));
КонецПроцедуры


// Вызывает js-функцию добавления kml на карту.
// Тип слоя при этом должен быть "Из файла", формат - "KML".
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно добавить.
//
Процедура СлоиKmlДобавитьНаКарту(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "addKmlLayer_1C", гисРаботаСКартойСервер.СлоиKmlДобавитьНаКартуСформироватьJson(Слой));
КонецПроцедуры

// Вызывает js-функцию удаления kml с карты.
// Тип слоя при этом должен быть "Из файла", формат - "KML".
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно удалить.
//
Процедура СлоиKmlУдалитьСКарты(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "removeKmlLayer_1C", гисРаботаСКартойСервер.СлоиKmlУдалитьСКартыСформироватьJson(Слой));
КонецПроцедуры

// Вызывает js-функцию добавления слоя wms с карты.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно добавить.
//
Процедура СлоиWmsДобавитьНаКарту(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "addWmsLayer_1C", гисРаботаСКартойСервер.СлоиWmsДобавитьНаКартуСформироватьJson(Слой));
КонецПроцедуры

// Вызывает js-функцию удаления слоя wms с карты.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно удалить.
//
Процедура СлоиWmsУдалитьСКарты(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "removeWmsLayer_1C", гисРаботаСКартойСервер.СлоиWmsУдалитьСКартыСформироватьJson(Слой));
КонецПроцедуры

// Вызывает js-функцию показа слоя карты по наименованию.
// Тип слоя при этом должен быть "Росреестр".
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно показать.
//
Процедура СлоиПоНаименованиюПоказать(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "setLayerVisible_1C", гисРаботаСКартойСервер.СлоиПоНаименованиюВидимостьСформироватьJson(Слой, Истина));
КонецПроцедуры

// Вызывает js-функцию скрытия слоя карты по наименованию.
// Тип слоя при этом должен быть "Росреестр".
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, который нужно скрыть.
//
Процедура СлоиПоНаименованиюСкрыть(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "setLayerVisible_1C", гисРаботаСКартойСервер.СлоиПоНаименованиюВидимостьСформироватьJson(Слой, Ложь));
КонецПроцедуры

// Вызывает js-функцию изменения непрозрачности слоя.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой	 - СправочникСсылка.гисСлоиКарты - слой, для которого изменяется непрозрачность;
//  Непрозрачность - Число - значение непрозрачности от 0 до 100.
//
Процедура СлоиКартыИзменитьНепрозрачность(Форма, Слой, Непрозрачность) Экспорт
	ВызватьФункцию(Форма, "setLayerOpacity_1C", гисРаботаСКартойСервер.СлоиНепрозрачностьСформироватьJson(Слой, Непрозрачность));
КонецПроцедуры

#КонецОбласти

#Область Тематика

// Вызывает js-функцию добавления легенды показателя по слою на карту.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой 		-	СправочникСсылка.гисСлоиКарты - слой, по которому нужна легенда;
//  Показатель	-	СправочникСсылка.гисПоказатели - показатель, по которому нужна легенда.
//
Процедура ТематикаЛегендаДобавить(Форма, Слой, Показатель) Экспорт
	ВызватьФункцию(Форма, "addLegendEntries_1C", гисРаботаСКартойСервер.ТематикаЛегендаДобавитьСформироватьJson(Слой, Показатель));
КонецПроцедуры

// Вызывает js-функцию удаления легенды по слою с карты.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Слой 		-	СправочникСсылка.гисСлоиКарты - слой, по которому нужно удалить легенду.
//
Процедура ТематикаЛегендаУдалить(Форма, Слой) Экспорт
	ВызватьФункцию(Форма, "removeLegendEntries_1C", гисРаботаСКартойСервер.ТематикаЛегендаУдалитьСформироватьJson(Слой));
КонецПроцедуры

#КонецОбласти

#Область Публикация

// Актуализация ресурсов карты.
Процедура АктуализироватьРесурсы(ПараметрыАктуализации)
	ОписаниеОповещения = Новый ОписаниеОповещения("АктуализироватьРесурсыПослеУдаленияКаталога", ЭтотОбъект, ПараметрыАктуализации);
	НачатьУдалениеФайлов(ОписаниеОповещения, ПараметрыАктуализации.ВременныйКаталог);
КонецПроцедуры

// Продолжение процедуры АктуализироватьРесурсы.
Процедура АктуализироватьРесурсыПослеУдаленияКаталога(ПараметрыАктуализации) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("АктуализироватьРесурсыПослеСозданияКаталога", ЭтотОбъект, ПараметрыАктуализации);
	НачатьСозданиеКаталога(ОписаниеОповещения, ПараметрыАктуализации.ВременныйКаталог);
КонецПроцедуры

// Продолжение процедуры АктуализироватьРесурсы.
Процедура АктуализироватьРесурсыПослеСозданияКаталога(ИмяКаталога, ПараметрыАктуализации) Экспорт
	ВерсияПодсистемы = гисОбщегоНазначенияСервер.ПолучитьВерсиюПодсистемыГИС();
	
	ФайлJSON = Новый ЗаписьJSON();
	Файл = Новый ЗаписьТекста(ПараметрыАктуализации.ИнформацияОРесурсах);
	Файл.Записать("{""Версия"":""" + ВерсияПодсистемы + """}");
	Файл.Закрыть();
	
	ФайлРесурсов = ПараметрыАктуализации.ВременныйКаталог + "MapCPS.zip";
	РесурсыКарты = гисРаботаСКартойСервер.ПубликацияПолучитьМакетКарты();
	РесурсыКарты.Записать(ФайлРесурсов);
	
	ЧтениеZIP = Новый ЧтениеZipФайла(ФайлРесурсов);
	ЧтениеZIP.ИзвлечьВсе(ПараметрыАктуализации.ВременныйКаталог);
	ЧтениеZIP.Закрыть();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АктуализироватьРесурсыПослеУдаленияФайла", ЭтотОбъект, ПараметрыАктуализации);
	НачатьУдалениеФайлов(ОписаниеОповещения, ФайлРесурсов);
КонецПроцедуры

// Продолжение процедуры АктуализироватьРесурсы.
Процедура АктуализироватьРесурсыПослеУдаленияФайла(ПараметрыАктуализации) Экспорт
	Оповестить("КартыРесурсыАктуализированы", ПараметрыАктуализации.Карта);
КонецПроцедуры

// Публикация ресурсов карты.
//
// Параметры:
//  Карта	 - Строка - реквизит обработки с видом отображения "ПолеHtmlДокумента".
//
Процедура ПубликацияПриОткрытии() Экспорт
	ИдентификаторИБ = гисОбщегоНазначенияСервер.ПолучитьИдентификаторИнформационнойБазы();
	
	// разделение хранения ресурсов для каждого экземпляра информационной базы
	ВременныйКаталог = КаталогВременныхФайлов() + ИдентификаторИБ + "\MapSources\";
	ИнформацияОРесурсах = ВременныйКаталог + "info.json";
	Карта = ВременныйКаталог + "index.html";
	
	ПараметрыАктуализации = Новый Структура("ВременныйКаталог,ИнформацияОРесурсах,Карта", ВременныйКаталог, ИнформацияОРесурсах, Карта);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПубликацияПриОткрытииПослеПроверкиКаталога", ЭтотОбъект, ПараметрыАктуализации);
	
	ФайловаяСистема = Новый Файл(ВременныйКаталог);
	ФайловаяСистема.НачатьПроверкуСуществования(ОписаниеОповещения); 
	ФайловаяСистема = Неопределено;
КонецПроцедуры

// Продолжение процедуры ПубликацияПриОткрытии.
Процедура ПубликацияПриОткрытииПослеПроверкиКаталога(Существует, ПараметрыАктуализации) Экспорт
	Если Существует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПубликацияПриОткрытииПослеПроверкиФайла", ЭтотОбъект, ПараметрыАктуализации);
		
		ФайловаяСистема = Новый Файл(ПараметрыАктуализации.ИнформацияОРесурсах);
		ФайловаяСистема.НачатьПроверкуСуществования(ОписаниеОповещения);
		ФайловаяСистема = Неопределено;
	Иначе
		АктуализироватьРесурсы(ПараметрыАктуализации);
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры ПубликацияПриОткрытии.
Процедура ПубликацияПриОткрытииПослеПроверкиФайла(Существует, ПараметрыАктуализации) Экспорт
	Если Существует Тогда
		Файл = Новый ЧтениеТекста(ПараметрыАктуализации.ИнформацияОРесурсах);
		СтруктураРесурсов = гисРаботаСJson.ПрочитатьНативно(Файл.Прочитать());
		Файл.Закрыть();
		Файл = Неопределено;
		
		ВерсияПодсистемы = гисОбщегоНазначенияСервер.ПолучитьВерсиюПодсистемыГИС();
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПодсистемы, СтруктураРесурсов.Версия) = 0 Тогда
			Оповестить("КартыРесурсыАктуализированы", ПараметрыАктуализации.Карта);
		Иначе
			АктуализироватьРесурсы(ПараметрыАктуализации);
		КонецЕсли;
	Иначе
		АктуализироватьРесурсы(ПараметрыАктуализации);
	КонецЕсли;
КонецПроцедуры


// Выполняет публикацию отсутствующих картинок
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  МассивКартинок	 - Перечень путей используемых изображений.
//
Процедура ПубликацияКартинокТочечныхОбъектов(Форма, МассивКартинок = Неопределено)
	Если НЕ ЗначениеЗаполнено(МассивКартинок) ИЛИ МассивКартинок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПутьККарте = СтрРазделить(Форма.Карта, "\");
	ИмяФайла = ПутьККарте[ПутьККарте.ВГраница()];
	КорневойКаталогПубликации = СтрЗаменить(Форма.Карта, ИмяФайла, "") + "images\";
	
	КартинкиНеОпубликованные = Новый Массив();
	Для Каждого Картинка Из МассивКартинок Цикл
		ФайловаяСистема = Новый Файл(КорневойКаталогПубликации + Картинка.ПутьКФайлу);
		Если НЕ ФайловаяСистема.Существует() Тогда
			КартинкиНеОпубликованные.Добавить(Картинка);
		КонецЕсли;
	КонецЦикла;

	Если КартинкиНеОпубликованные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	гисРаботаСКартойСервер.ТочечныеОбъектыКартинкиДополнитьСодержимое(КартинкиНеОпубликованные);
	Для Каждого Картинка Из КартинкиНеОпубликованные Цикл
		Если ЗначениеЗаполнено(Картинка.Содержимое) Тогда
			КартинкаДвоичныеДанные = Base64Значение(Картинка.Содержимое);
			КартинкаДвоичныеДанные.Записать(КорневойКаталогПубликации + Картинка.ПутьКФайлу); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Редактор

// Включает редактор на карте и перадает ему геометрию объектов карты для редактирования.
// Доступный для редактирования типы геометрии: точка, линия, полигон.
//
// Параметры:
//  Форма	 	-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента"; 
//  ОбъектКарты -	СправочникСсылка.гисОбъектыКарты 	- точечный или контурный объект карты;
//				- 	СправочникСсылка.гисСлоиКарты 		- слой контурных или точечных объектов;
//				- 	Массив/СписокЗначений, элементами являются предыдущие типы - добавляются на карту все переданные объекты.
//
Процедура ОбъектыКартыВключитьРедактирование(Форма, ОбъектКарты) Экспорт
	Если ЗначениеЗаполнено(ОбъектКарты) Тогда
		СтатусРедатоктора = ВызватьФункцию(Форма, "editCheck_1C");
		СтатусРедатоктора = гисРаботаСJson.ПрочитатьНативно(СтатусРедатоктора);
		ВключаемРедактор = ?(СтатусРедатоктора.on, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да);
		ПараметрыЗавершения =  Новый Структура("Форма,ОбъектКарты", Форма, ОбъектКарты);
		
		Если СтатусРедатоктора.on Тогда
			Если ( 0 < СтатусРедатоктора.mod ИЛИ 0 < СтатусРедатоктора.add ИЛИ 0 < СтатусРедатоктора.del ) Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбъектыКартыВключитьРедактированиеЗавершение", ЭтотОбъект, ПараметрыЗавершения);
				ПоказатьВопрос(ОписаниеОповещения, "В редакторе есть не сохраненные изменения, которые будет потеряны!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "Редактор геометрии", КодВозвратаДиалога.Нет);
				Возврат;
			Иначе
				ВключаемРедактор = КодВозвратаДиалога.Да;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектыКартыВключитьРедактированиеЗавершение(ВключаемРедактор, ПараметрыЗавершения);
	КонецЕсли
КонецПроцедуры

// Завершение включения редактора на карте и перадача ему геометрии объектов карты для редактирования.
// Доступный для редактирования типы геометрии: точка, линия, полигон.
//
// Параметры:
//  РезультатВопроса	-	КодВозвратаДиалога	-	Флаг "Да/Нет" включающий редактор каты или нет;
//  Параметры			-	Структура - содержит поля:
//		ОбъектКарты - СправочникСсылка - точечный или контурный объект карты;
//		Форма		- УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента".
//
Процедура ОбъектыКартыВключитьРедактированиеЗавершение(РезультатВопроса, Параметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Json = гисРаботаСКартойСервер.РедакторСформироватьJsonДляРедактированияОбъектов(Параметры.ОбъектКарты);
		Если Json <> Неопределено Тогда
			ВызватьФункцию(Параметры.Форма, "editOn_1C", Json);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выключает редактор на карте.
//
// Параметры:
//  Форма		 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента".
//
Процедура ОбъектыКартыВыключитьРедактор(Форма) Экспорт
	ВызватьФункцию(Форма, "editOff_1C", "@");
КонецПроцедуры

// Выполняет задание активного объекта по его коду.
//
// Параметры:
//  Форма		 	- 	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Идентификатор	-	Строка - идентификатор объекта.
//
Процедура ОбъектыКартыРедактореВыделить(Форма, Идентификатор) Экспорт
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ВызватьФункцию( Форма, "editCheck_1C", гисРаботаСJson.ЗаписатьНативно( Новый Структура( "select", Идентификатор ) ) );
	КонецЕсли;
КонецПроцедуры

// Сообщение редактору о том какие объекты сохранены.
//
// Параметры:
//  Форма		 		- УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  СохраненныеОбъекты	- Массив - идентификаторы сохраненных объектов или их описаний;
//  СохраненыВсеОбъекты - Булево - флаг сохранения всех объектов (передается при сохранении слоев из файлов);
//	НеСохраненныеОбъекты- Массив - идентификаторы объектов для сохранения.
//
Процедура ОбъектыКартыУстановитьОтметки(Форма, СохраненныеОбъекты = Неопределено, СохраненыВсеОбъекты = Неопределено, НеСохраненныеОбъекты = Неопределено) Экспорт
	Если ЗначениеЗаполнено(СохраненныеОбъекты) Тогда
		Если ЗначениеЗаполнено(НеСохраненныеОбъекты) и 0 < НеСохраненныеОбъекты.Количество() Тогда
			ИдексМассива = НеСохраненныеОбъекты.ВГраница();
			Пока 0 <= ИдексМассива Цикл
				СохраненныеОбъекты.Удалить(НеСохраненныеОбъекты[ИдексМассива]);
				ИдексМассива = ИдексМассива - 1;
			КонецЦикла;
		КонецЕсли;
		
		Если 0 < СохраненныеОбъекты.Количество() Тогда
			Если ТипЗнч(СохраненныеОбъекты[0]) = Тип("Число") ИЛИ ТипЗнч(СохраненныеОбъекты[0]) = Тип("Строка") ИЛИ СохраненныеОбъекты[0].Свойство("id") Тогда
				ИдентификаторыСохраненныхОбъектов = СохраненныеОбъекты;
			Иначе
				ИдентификаторыСохраненныхОбъектов = Новый Массив;
				Для Каждого СохраненныйОбъект Из СохраненныеОбъекты Цикл
					ИдентификаторыСохраненныхОбъектов.Добавить(СохраненныйОбъект.properties._id_);
				КонецЦикла;
			КонецЕсли;
			ВызватьФункцию(Форма, "editCheck_1C", гисРаботаСJson.ЗаписатьНативно(Новый Структура("save", ИдентификаторыСохраненныхОбъектов)));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СохраненыВсеОбъекты) И СохраненыВсеОбъекты Тогда
		ВызватьФункцию(Форма, "editCheck_1C", гисРаботаСJson.ЗаписатьНативно( Новый Структура("save", Истина) ) );
	КонецЕсли;
КонецПроцедуры

// Выполняет позиционирование по геометрии объекта карты.
//
// Параметры:
//  Форма		- 	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Геометрия 	-	Строка - геометрия в GeoJSON.
//
Процедура ОбъектыКартыСпозиционироватьсяПоГеометрии(Форма, Геометрия) Экспорт
	Если ЗначениеЗаполнено(Геометрия) Тогда
		ВызватьФункцию(Форма, "centerOnFeature_1C", Геометрия);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена геометрия!");
	КонецЕсли;
КонецПроцедуры

// Выполняет приближение к геометрии по объекта карты.
//
// Параметры:
//  Форма		 - 	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  Геометрия  -	Строка - геометрия в GeoJSON.
//
Процедура ОбъектыКартыПриблизитьПоГеометрии(Форма, Геометрия) Экспорт
	Если ЗначениеЗаполнено(Геометрия) Тогда
		ВызватьФункцию(Форма, "extentOnFeature_1C", Геометрия);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена геометрия!");
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область Росреестр

// Вызывает js-функцию подсветки по кадастровому номеру.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//	КадастровыйНомер - Строка - кадастровый номер, по которому нужно подсветить объект.
//
Процедура РосреестрПодсветкаПоКадастровомуНомеру(Форма, КадастровыйНомер) Экспорт
	ВызватьФункцию(Форма, "highlightCadastreByNum_1C", КадастровыйНомер);
КонецПроцедуры

// Вызывает js-функцию удаления подсветки по кадастровому номеру.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента".
//
Процедура РосреестрПодсветкаУбрать(Форма) Экспорт
	ВызватьФункцию(Форма, "clearCadastreHighlighting_1C");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет вызов js-функции на форме карты с передачей необходимых параметров.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//  НазваниеФункции	 - Строка - название функции js, которую нужно вызвать;
//  ПараметрJS		 - Строка - json, в который помещены необходимые параметры для функции js.
//
// Возвращаемое значение:
//	Неопределено или любое значение, которое возвращают js-скрипты (Строка,Число,Булево).
Функция ВызватьФункцию(Форма, НазваниеФункции, ПараметрJS = "")
	Результат = Неопределено;
	
	ВызовФункции = НазваниеФункции + "(" + ?(ПараметрJS = "", "'{}'", "'" + ПараметрJS + "'") + ")";
	
	ВызовФункции = СтрЗаменить(ВызовФункции, """", """""");
	ВызовФункции = СтрЗаменить(ВызовФункции, "'", """");
	ВызовФункции = СтрЗаменить(ВызовФункции, Символы.ПС, " ");
	ВызовФункции = СтрЗаменить(ВызовФункции, Символы.Таб, "");
	ВызовФункции = СтрЗаменить(ВызовФункции, "    ", "");
	Попытка
		Выполнить("Результат = Форма.Элементы.Карта.document.defaultView." + ВызовФункции);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Читает значение скрытого поля - hidden в html.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения  "ПолеHtmlДокумента";
//  Имя		 - Строка	 -  название hidden'а, через который идет взаимодействие.
// 
// Возвращаемое значение:
//   - Строка - значение указанного hidden'а.
//
Функция ПолучитьЗначение(Форма, Имя) Экспорт
	Возврат Форма.Элементы.Карта.Document.getElementById(Имя).value;
КонецФункции

Функция ОчиститьЗначение(Форма, Имя) Экспорт
	Форма.Элементы.Карта.Document.getElementById(Имя).value = "";
КонецФункции


// По указанному массиву слоев получает количество отображенных объектов 
//  и вызывает отображение легенды, где нужно.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//	МассивСлоев - Массив элементов типа Структура, каждый элемент содержит поля:
//		Слой		- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		Ид			- Строка - идентификатор слоя на карте;
//		Показатель	- СправочникСсылка.гисПоказатели - показатель объекта слоя.
//		
Процедура СлоиКартыПодготовитьДанныеДляОтображенияГалокДобавление(Форма, МассивСлоев) 
	Для Каждого СтруктураСлоя Из МассивСлоев Цикл
		ЧислоОбъектов = СлоиПолучитьКоличествоОбъектов(Форма, СтруктураСлоя.Ид);
		СтруктураСлоя.Вставить("КоличествоНаКарте", ЧислоОбъектов);
		
		Если ЗначениеЗаполнено(СтруктураСлоя.Показатель) Тогда
			ТематикаЛегендаДобавить(Форма, СтруктураСлоя.Слой, СтруктураСлоя.Показатель);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// По указанному массиву слоев получает количество отображенных объектов 
// и вызывает отключение легенды, где нужно.
//
// Параметры:
//  Форма		-	УправляемаяФорма - форма, на которой есть реквизит "Карта" с видом отображения "ПолеHtmlДокумента";
//	МассивСлоев - Массив элементов типа Структура, каждый элемент содержит поля:
//		Слой		- СправочникСсылка.гисСлоиКарты - слой, который был включен;
//		Ид			- Строка - идентификатор слоя на карте.
//		
Процедура СлоиКартыПодготовитьДанныеДляОтображенияГалокУдаление(Форма, МассивСлоев) 
	Для Каждого СтруктураСлоя Из МассивСлоев Цикл
		ЧислоОбъектов = СлоиПолучитьКоличествоОбъектов(Форма, СтруктураСлоя.Ид);
		СтруктураСлоя.Вставить("КоличествоНаКарте", ЧислоОбъектов);
		
		Если ЧислоОбъектов = 0 Тогда
			ТематикаЛегендаУдалить(Форма, СтруктураСлоя.Слой);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
