
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Заполнение списков выбора элементов формы
	МасштабыЗаполнитьСписокВыбора();
	СправочникОбъектовУчетаЗаполнитьСписокВыбора();
	
	// Заполнение реквизитов предпросмотра
	ЗаполнитьПредпросмотр();
	
	// Обработка процедур элементов формы
	УстановитьВидимостьСправочникаОбъектовУчета();
	УстановитьВидимостьЭлементов();
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОткудаБратьЦвета = Параметры.ЗначениеКопирования.ПолучитьОбъект();
	ИначеЕсли Не Объект.Ссылка.Пустая() Тогда
		ОткудаБратьЦвета = РеквизитФормыВЗначение("Объект");
	Иначе
		// значения по умолчанию
		ГраницыЦвет = Новый Цвет(34, 126, 76);
		ЗаливкаЦвет = Новый Цвет(108, 217, 126);
		Возврат;
	КонецЕсли;
	ЗаливкаЦвет = ОткудаБратьЦвета.ЗаливкаЦвет.Получить();
	ГраницыЦвет = ОткудаБратьЦвета.ГраницыЦвет.Получить();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПредпросмотр();
	
	ПодписиОтображениеПриИзменении(Элементы.ПодписиОтображение);
	ВсплывающееСообщениеЗаполненоУстановитьТекст();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОчиститьНенужныеРеквизитыНаСервере(ТекущийОбъект);
	ТекущийОбъект.ЗаливкаЦвет = Новый ХранилищеЗначения(ЗаливкаЦвет);
	ТекущийОбъект.ГраницыЦвет = Новый ХранилищеЗначения(ГраницыЦвет);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипСлояПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормыПоСправочникуОбъектыКарты

&НаКлиенте
Процедура СправочникОбъектовУчетаПриИзменении(Элемент)
	УстановитьВидимостьСправочникаОбъектовУчета();
КонецПроцедуры

&НаКлиенте
Процедура СправочникОбъектовУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СправочникОбъектовУчетаЗаполнитьСписокВыбора();
КонецПроцедуры


&НаКлиенте
Процедура СправочникОбъектовУчетаВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = СправочникОбъектовУчетаВладелецПолучитьСписокТипов();
	
	Тип = Неопределено;
	Если СписокТипов.Количество() > 1 Тогда
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗавершениеВыбораТипаИзСписка", ЭтотОбъект), СписокТипов);
		Возврат;
	ИначеЕсли СписокТипов.Количество() = 1 Тогда
		Тип = СписокТипов[0].Значение;
	КонецЕсли;
	
	ОткрытиеФормыВыбораТипа(Тип);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораТипаИзСписка(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Тип = Неопределено;
	Если ВыбранноеЗначение <> Неопределено Тогда
		Тип = ВыбранноеЗначение.Значение;
	КонецЕсли;
	
	ОткрытиеФормыВыбораТипа(Тип);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыВыбораТипа(Тип)
	Если Тип = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник." + Тип + ".ФормаВыбора", Новый Структура("ТекущаяСтрока,РежимВыбора", Объект.СправочникОбъектовУчетаВладелец, Истина), , , , , 
		Новый ОписаниеОповещения("ЗавершениеВыбораВладельца", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораВладельца(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда 
		Объект.СправочникОбъектовУчетаВладелец = ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТипГеометрииПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
	
	ОбновитьПредпросмотр();
КонецПроцедуры


&НаКлиенте
Процедура ВсплывающееСообщениеЗаполненоНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Подпись,ТипСлояКарты,СлойКарты", Объект.ВсплывающееСообщение, Объект.ТипСлоя, Объект.Ссылка);
	Обработчик = Новый ОписаниеОповещения("ВсплывающееСообщениеЗаполненоНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.гисПоказатели.Форма.РедакторВсплывающегоСообщения", ПараметрыФормы, , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВсплывающееСообщениеЗаполненоНажатиеЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВозвращенноеЗначение <> Неопределено И ВозвращенноеЗначение <> КодВозвратаДиалога.Отмена Тогда
		Объект.ВсплывающееСообщение = ВозвращенноеЗначение;
		ВсплывающееСообщениеЗаполненоУстановитьТекст();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаливкаЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.гисФормаВыбораЦветаRGB", Новый Структура("Цвет", ЗаливкаЦвет), , , , , 
		Новый ОписаниеОповещения("ЗаливкаЦветНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаливкаЦветНачалоВыбораЗавершение(ВыбранныйЦвет, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЦвет <> Неопределено Тогда
		ЗаливкаЦвет = ВыбранныйЦвет;
		ОбновитьПредпросмотр();
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаливкаНепрозрачностьПриИзменении(Элемент)
	ОбновитьПредпросмотр();
КонецПроцедуры


&НаКлиенте
Процедура ГраницыЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.гисФормаВыбораЦветаRGB", Новый Структура("Цвет", ГраницыЦвет), , , , , 
		Новый ОписаниеОповещения("ГраницыЦветНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ГраницыЦветНачалоВыбораЗавершение(ВыбранныйЦвет, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЦвет <> Неопределено Тогда
		ГраницыЦвет = ВыбранныйЦвет;
		ОбновитьПредпросмотр();
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ГраницыНепрозрачностьПриИзменении(Элемент)
	ОбновитьПредпросмотр();
КонецПроцедуры

&НаКлиенте
Процедура ГраницыТолщинаПриИзменении(Элемент)
	ОбновитьПредпросмотр();
КонецПроцедуры


&НаКлиенте
Процедура ПодписиОтображениеПриИзменении(Элемент)
	Элементы.ПодписиМасштабОт.Доступность = Объект.ПодписьОтображать;
	Элементы.ПодписиМасштабДо.Доступность = Объект.ПодписьОтображать;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыИзФайла

&НаКлиенте
Процедура ИзФайлаЗагрузить(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если Объект.ФорматГеоданных = ПредопределенноеЗначение("Перечисление.гисФорматыГеоданных.KML") Тогда
		ДиалогВыбораФайла.Фильтр = "Файлы KML (*.kml)|*.kml";
	КонецЕсли;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИзФайлаЗагрузитьНачало", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ИзФайлаЗагрузитьНачало(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ВыбранныйФайл = ВыбранныеФайлы[0];
		
		Расширение = "";
		Массив = СтрРазделить(ВыбранныйФайл, ".");
		Если Массив.Количество() > 0 Тогда
			Расширение = Массив[Массив.Количество() - 1];
		КонецЕсли;
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ИзФайлаЗагрузитьЗавершение", ЭтотОбъект, Новый Структура("Расширение", Расширение)), , ВыбранныйФайл, Ложь, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ИзФайлаЗагрузитьЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если Результат Тогда
		ПолучитьТекстФайла(Адрес, ДополнительныеПараметры.Расширение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ИзФайлаВыгрузить(Команда)
	Если ЗначениеЗаполнено(Объект.ТекстФайла) Тогда
		Адрес = ПолучитьФайлНаСервере();
		
		Расширение = "";
		Если Объект.ФорматГеоданных = ПредопределенноеЗначение("Перечисление.гисФорматыГеоданных.KML") Тогда
			Расширение = ".kml";
		КонецЕсли;
		
		ПолучитьФайл(Адрес, Объект.Наименование + Расширение, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзФайлаИзменить(Команда)
	ОткрытьФорму("Справочник.гисСлоиКарты.Форма.ФормаРедактированияТекстаФайла", Новый Структура("ТекстФайла", Объект.ТекстФайла), , , , , 
		Новый ОписаниеОповещения("ИзФайлаИзменитьЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзФайлаИзменитьЗавершение(ИзмененнаяСтрока, ДополнительныеПараметры) Экспорт 
	Если ИзмененнаяСтрока <> Неопределено Тогда
		Объект.ТекстФайла = ИзмененнаяСтрока;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыWms

&НаКлиенте
Процедура ГисСерверИмяСлояНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ГисСерверАдрес) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен адрес ГИС-сервера!'"), , "Объект.ГисСерверАдрес");
		Возврат;
	КонецЕсли;
	
	Попытка
		ОтветГисСервера = гисГисСервер.WMSПолучитьОписание(Объект.ГисСерверАдрес);
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = Не удалось получить список слоев.'") + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ДоступныеСлои = Новый СписокЗначений;
	Для каждого Слой Из ОтветГисСервера.Слои Цикл
		ДоступныеСлои.Добавить(Слой.Имя);
	КонецЦикла;
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ГисСерверИмяСлояНачалоВыбораЗавершение", ЭтотОбъект),
		ДоступныеСлои, Элементы.ГисСерверИмяСлоя, ДоступныеСлои.НайтиПоЗначению(Объект.ГисСерверИмяСлоя));
КонецПроцедуры

&НаКлиенте
Процедура ГисСерверИмяСлояНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.ГисСерверИмяСлоя = ВыбранноеЗначение.Значение;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПредпросмотр()
	// Заполнение реквизитов предпросмотра из макетов
	ПредпросмотрТочка	= Перечисления.гисТипыГеометрии.ПолучитьМакет("ПредпросмотрТочка").ПолучитьТекст();
	ПредпросмотрЛиния	= Перечисления.гисТипыГеометрии.ПолучитьМакет("ПредпросмотрЛиния").ПолучитьТекст();
	ПредпросмотрПолигон	= Перечисления.гисТипыГеометрии.ПолучитьМакет("ПредпросмотрПолигон").ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр()
	// Выбор строки текста HTML
	Попытка
		СтрокаПредпросмотр = ЭтотОбъект["Предпросмотр" + Строка(Объект.ТипГеометрии)];
	Исключение
		СтрокаПредпросмотр = "";
	КонецПопытки;
	
	// Установка значений для визуализации предпросмотра:
	// - граница
	СтрокаПредпросмотр = СтрЗаменить(СтрокаПредпросмотр, "$ГраницыЦвет", гисОбщегоНазначенияКлиентСервер.ПеревестиЦветВHEX(ГраницыЦвет));
	СтрокаПредпросмотр = СтрЗаменить(СтрокаПредпросмотр, "$ГраницыНепрозрачность", Формат(Объект.ГраницыНепрозрачность * 0.01, "ЧРД='.'"));
	СтрокаПредпросмотр = СтрЗаменить(СтрокаПредпросмотр, "$ГраницыТолщина", Формат(Объект.ГраницыТолщина, "ЧРД='.'"));
	// - заливка
	СтрокаПредпросмотр = СтрЗаменить(СтрокаПредпросмотр, "$ЗаливкаЦвет", гисОбщегоНазначенияКлиентСервер.ПеревестиЦветВHEX(ЗаливкаЦвет));
	СтрокаПредпросмотр = СтрЗаменить(СтрокаПредпросмотр, "$ЗаливкаНепрозрачность", Формат(Объект.ЗаливкаНепрозрачность * 0.01, "ЧРД='.'"));
	
	// Передача сформированной строки в поле HTML
	Предпросмотр = СтрокаПредпросмотр;
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьЭлементов()
	Если Не ЗначениеЗаполнено(Объект.ТипСлоя) Тогда
		Элементы.ГруппаСтраницаОтображение.Видимость = Ложь;
		Элементы.СправочникОбъектовУчета.Видимость = Ложь;
		Элементы.ГруппаИзФайла.Видимость = Ложь;
		Элементы.ГруппаWMS.Видимость = Ложь;
	ИначеЕсли Объект.ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты Тогда
		Элементы.ГруппаСтраницаОтображение.Видимость = Истина;
		Элементы.СправочникОбъектовУчета.Видимость = Истина;
		Элементы.ГруппаИзФайла.Видимость = Ложь;
		Элементы.ГруппаWMS.Видимость = Ложь;
		
		Элементы.ТипГеометрии.Видимость = Истина;
		УстановитьВидимостьТипГеометрии();
	ИначеЕсли Объект.ТипСлоя = Перечисления.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки Тогда
		Элементы.ГруппаСтраницаОтображение.Видимость = Истина;
		Элементы.СправочникОбъектовУчета.Видимость = Истина;
		Элементы.ГруппаИзФайла.Видимость = Ложь;
		Элементы.ГруппаWMS.Видимость = Ложь;
		
		Элементы.ТипГеометрии.Видимость = Ложь;
		Если Объект.ТипГеометрии <> Перечисления.гисТипыГеометрии.Полигон Тогда
			Объект.ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон;
			Модифицированность = Истина;
		КонецЕсли;
		УстановитьВидимостьТипГеометрии();
	ИначеЕсли Объект.ТипСлоя = Перечисления.гисТипыСлоев.ИзФайла Тогда
		Элементы.ГруппаСтраницаОтображение.Видимость = Ложь;
		Элементы.СправочникОбъектовУчета.Видимость = Ложь;
		Элементы.ГруппаИзФайла.Видимость = Истина;
		Элементы.ГруппаWMS.Видимость = Ложь;
	ИначеЕсли Объект.ТипСлоя = Перечисления.гисТипыСлоев.Росреестр Тогда
		Элементы.ГруппаСтраницаОтображение.Видимость = Ложь;
		Элементы.СправочникОбъектовУчета.Видимость = Ложь;
		Элементы.ГруппаИзФайла.Видимость = Ложь;
		Элементы.ГруппаWMS.Видимость = Ложь;
	ИначеЕсли Объект.ТипСлоя = Перечисления.гисТипыСлоев.WMS Тогда
		Элементы.ГруппаСтраницаОтображение.Видимость = Ложь;
		Элементы.СправочникОбъектовУчета.Видимость = Ложь;
		Элементы.ГруппаИзФайла.Видимость = Ложь;
		Элементы.ГруппаWMS.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСправочникаОбъектовУчета()
	Если ЗначениеЗаполнено(Объект.СправочникОбъектовУчета) И Метаданные.Справочники[Объект.СправочникОбъектовУчета].Владельцы.Количество() > 0 Тогда
		// если у выбранного справочника есть владельцы
		ЕстьСправочники = Ложь;
		Для Каждого Владелец Из Метаданные.Справочники[Объект.СправочникОбъектовУчета].Владельцы Цикл
			Если Метаданные.Справочники.Содержит(Владелец) Тогда
				// проверяем, чтобы владелец справочника тоже был справочником
				ЕстьСправочники = Истина;
			КонецЕсли;
		КонецЦикла;
		Элементы.СправочникОбъектовУчетаВладелец.Видимость = ЕстьСправочники;
		
		// если выбранный ранее владелец подходит по типу - оставляем, иначе очищаем
		Если ЗначениеЗаполнено(Объект.СправочникОбъектовУчетаВладелец) Тогда
			Нашли = Ложь;
			Для Каждого Владелец Из Метаданные.Справочники[Объект.СправочникОбъектовУчета].Владельцы Цикл
				Попытка
					Если Тип("СправочникСсылка." + Владелец.Имя) = ТипЗнч(Объект.СправочникОбъектовУчетаВладелец) Тогда
						Нашли = Истина;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			Если Не Нашли Тогда
				Объект.СправочникОбъектовУчетаВладелец = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.СправочникОбъектовУчетаВладелец.Видимость = Ложь;
		Если ЗначениеЗаполнено(Объект.СправочникОбъектовУчетаВладелец) Тогда
			Объект.СправочникОбъектовУчетаВладелец = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТипГеометрии()
	Если Объект.ТипГеометрии = Перечисления.гисТипыГеометрии.Точка Тогда
		Элементы.Картинка.Видимость						= Истина;
		Элементы.Предпросмотр.Видимость					= Истина;
		Элементы.ГруппаЗаливка.Видимость				= Ложь;
		Элементы.ГруппаГраницы.Видимость				= Ложь;
		Элементы.ГруппаПодписи.Видимость				= Истина;
		Элементы.ВсплывающееСообщениеЗаполнено.Видимость= Истина;
	ИначеЕсли Объект.ТипГеометрии = Перечисления.гисТипыГеометрии.Линия Тогда
		Элементы.Картинка.Видимость						= Ложь;
		Элементы.Предпросмотр.Видимость					= Истина;
		Элементы.ГруппаЗаливка.Видимость				= Ложь;
		Элементы.ГруппаГраницы.Видимость				= Истина;
		Элементы.ГруппаПодписи.Видимость				= Истина;
		Элементы.ВсплывающееСообщениеЗаполнено.Видимость= Истина;
	ИначеЕсли Объект.ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон Тогда
		Элементы.Картинка.Видимость						= Ложь;
		Элементы.Предпросмотр.Видимость					= Истина;
		Элементы.ГруппаЗаливка.Видимость				= Истина;
		Элементы.ГруппаГраницы.Видимость				= Истина;
		Элементы.ГруппаПодписи.Видимость				= Истина;
		Элементы.ВсплывающееСообщениеЗаполнено.Видимость= Истина;
	Иначе
		Элементы.Картинка.Видимость						= Ложь;
		Элементы.Предпросмотр.Видимость					= Ложь;
		Элементы.ГруппаЗаливка.Видимость				= Ложь;
		Элементы.ГруппаГраницы.Видимость				= Ложь;
		Элементы.ГруппаПодписи.Видимость				= Ложь;
		Элементы.ВсплывающееСообщениеЗаполнено.Видимость= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьНенужныеРеквизитыНаСервере(ТекущийОбъект)
	Если ТекущийОбъект.ТипСлоя <> Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты 
		И ТекущийОбъект.ТипСлоя <> Перечисления.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки Тогда
		ТекущийОбъект.СправочникОбъектовУчета = "";
		ТекущийОбъект.СправочникОбъектовУчетаВладелец = Неопределено;
	КонецЕсли;
	
	Если ТекущийОбъект.ТипСлоя <> Перечисления.гисТипыСлоев.ПоСправочникуОбъектыКарты И ТекущийОбъект.ТипСлоя <> Перечисления.гисТипыСлоев.ПоСправочникуКадастровыеЗемельныеУчастки Тогда
		ТекущийОбъект.ТипГеометрии = Неопределено;
	КонецЕсли;
	
	Если ТекущийОбъект.ТипСлоя <> Перечисления.гисТипыСлоев.ИзФайла Тогда
		ТекущийОбъект.ФорматГеоданных = Неопределено;
		ТекущийОбъект.ТекстФайла = "";
	КонецЕсли;
	
	Если ТекущийОбъект.ТипСлоя <> Перечисления.гисТипыСлоев.WMS Тогда
		ТекущийОбъект.ГисСерверАдрес = "";
		ТекущийОбъект.ГисСерверИмяСлоя = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ТипГеометрии) Тогда
		ТекущийОбъект.Картинка = Неопределено;
		ЗаливкаЦвет = Неопределено;
		ТекущийОбъект.ЗаливкаНепрозрачность = 0;
		ГраницыЦвет = Неопределено;
		ТекущийОбъект.ГраницыНепрозрачность = 0;
		ТекущийОбъект.ГраницыТолщина = 0;
	ИначеЕсли ТекущийОбъект.ТипГеометрии = Перечисления.гисТипыГеометрии.Точка Тогда
		ЗаливкаЦвет = Неопределено;
		ТекущийОбъект.ЗаливкаНепрозрачность = 0;
		ГраницыЦвет = Неопределено;
		ТекущийОбъект.ГраницыНепрозрачность = 0;
		ТекущийОбъект.ГраницыТолщина = 0;
	ИначеЕсли ТекущийОбъект.ТипГеометрии = Перечисления.гисТипыГеометрии.Линия Тогда
		ТекущийОбъект.Картинка = Неопределено;
		ЗаливкаЦвет = Неопределено;
		ТекущийОбъект.ЗаливкаНепрозрачность = 0;
	ИначеЕсли ТекущийОбъект.ТипГеометрии = Перечисления.гисТипыГеометрии.Полигон Тогда
		ТекущийОбъект.Картинка = Неопределено;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура МасштабыЗаполнитьСписокВыбора()
	СписокМасштабов = гисОбщегоНазначенияКлиентСервер.МасштабДляПодписейПолучитьСписокВыбора();
	
	// Масштаб от
	Элементы.ПодписиМасштабОт.СписокВыбора.Очистить();
	Для каждого ЭлементСписка Из СписокМасштабов Цикл
		Элементы.ПодписиМасштабОт.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	// Масштаб до
	Элементы.ПодписиМасштабДо.СписокВыбора.Очистить();
	Для каждого ЭлементСписка Из СписокМасштабов Цикл
		Элементы.ПодписиМасштабДо.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СправочникОбъектовУчетаЗаполнитьСписокВыбора()
	Элементы.СправочникОбъектовУчета.СписокВыбора.Очистить();
	Для каждого Справочник из Метаданные.Справочники Цикл
		Элементы.СправочникОбъектовУчета.СписокВыбора.Добавить(Справочник.Имя, Справочник.Синоним);
	КонецЦикла;
	Элементы.СправочникОбъектовУчета.СписокВыбора.СортироватьПоПредставлению();
КонецПроцедуры

&НаСервере
Функция СправочникОбъектовУчетаВладелецПолучитьСписокТипов()
	СписокТипов = Новый СписокЗначений;
	Для Каждого Владелец Из Метаданные.Справочники[Объект.СправочникОбъектовУчета].Владельцы Цикл
		Если Метаданные.Справочники.Содержит(Владелец) Тогда
			СписокТипов.Добавить(Владелец.Имя, ?(ЗначениеЗаполнено(Владелец.Синоним), Владелец.Синоним, Владелец.Имя));
		конецЕсли;
	КонецЦикла;
	Возврат СписокТипов;
КонецФункции


&НаСервере
Процедура ПолучитьТекстФайла(Адрес, Расширение)
	ИмяФайлаНаСервере = КаталогВременныхФайлов() + "xml " + Формат(ТекущаяДата(), "ДФ=""гггг.ММ.дд ЧЧ-мм-сс""") + "." + Расширение;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ИмяФайлаНаСервере);
	Объект.ТекстФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	УдалитьФайлы(ИмяФайлаНаСервере);
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлНаСервере()
	Расширение = "";
	Если Объект.ФорматГеоданных = Перечисления.гисФорматыГеоданных.KML Тогда
		Расширение = ".kml";
	КонецЕсли;
	
	ИмяФайлаНаСервере = КаталогВременныхФайлов() + "xml " + Формат(ТекущаяДата(), "ДФ=""гггг.ММ.дд ЧЧ-мм-сс""") + Расширение;
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаНаСервере);
	ЗаписьТекста.Записать(Объект.ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаНаСервере);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
КонецФункции


&НаКлиенте
Процедура ВсплывающееСообщениеЗаполненоУстановитьТекст()
	ВсплывающееСообщениеЗаполнено = ?(ЗначениеЗаполнено(Объект.ВсплывающееСообщение), НСтр("ru = 'Заполнено'"), НСтр("ru = 'Не заполнено'"));
КонецПроцедуры

#КонецОбласти
