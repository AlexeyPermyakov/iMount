
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет объект данными, пришедшими из xml от росреестра.
//
// Параметры:
//  ДанныеXml				 - Строка - json, в котором хранится необходимая из пришедшей xml информация;
//  КадастровыйДокумент		 - ДокументСсылка.гисКадастровыеДокументы - документ, из которого пришел участок;
//  ПараметрыПереводаВWgs84	 - СправочникСсылка.гисПараметрыПереводаВWgs84 - параметры для перевода в с/к Wgs-84;
//  ПраваНаУчасток			 - ТаблицаЗначений - таблица прав на участок;
//	СлойКарты				 - СправочникСсылка.гисСлоиКарты - слой, к которому будет принадлежать участок.
//
Процедура ЗаполнитьПоДаннымXml(ДанныеXml, КадастровыйДокумент = Неопределено, ПараметрыПереводаВWgs84 = Неопределено, ПраваНаУчасток, СлойКарты = Неопределено) Экспорт
	Если КадастровыйДокумент <> Неопределено Тогда
		ЭтотОбъект.КадастровыйДокумент = КадастровыйДокумент;
	КонецЕсли;
	Если ПараметрыПереводаВWgs84 <> Неопределено Тогда
		ЭтотОбъект.ПараметрыПереводаВWgs84 = ПараметрыПереводаВWgs84;
	КонецЕсли;
	Если СлойКарты <> Неопределено Тогда
		ЭтотОбъект.Слой = СлойКарты;
	КонецЕсли;
	
	Массив = гисРаботаСКадастром.ЗемельныеУчасткиПолучитьМассивСвойствДата();
	
	Данные = гисРаботаСJson.ПрочитатьНативно(ДанныеXml, Массив);
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Наименование = Данные.КадастровыйНомер;
	КонецЕсли;
	
	КадастровыйНомер = Данные.КадастровыйНомер;
	Если ЗначениеЗаполнено(Данные.ВидУчасткаКод) Тогда
		ВидУчастка = Справочники.гисВидыКадастровыхУчастков.НайтиПоКоду(Данные.ВидУчасткаКод);
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.СтатусКод) Тогда
		Статус = Справочники.гисСтатусыКадастровыхУчастков.НайтиПоКоду(Данные.СтатусКод);
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ДатаПостановкиНаУчет) Тогда
		ДатаПостановкиНаУчет = Данные.ДатаПостановкиНаУчет;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ПредыдущийКадастровыйНомер) Тогда
		ПредыдущийКадастровыйНомер = Данные.ПредыдущийКадастровыйНомер;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.КатегорияЗемельКод) Тогда
		КатегорияЗемель = Справочники.гисКатегорииЗемель.НайтиПоКоду(Данные.КатегорияЗемельКод);
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ВидИспользованияКод) Тогда
		ВидИспользования = Справочники.гисВидыРазрешенногоИспользования.НайтиПоКоду(Данные.ВидИспользованияКод);
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ВидИспользованияПоДокументу) Тогда
		ВидИспользованияПоДокументу = Данные.ВидИспользованияПоДокументу;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Комментарий) Тогда
		Комментарий = Данные.Комментарий;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ОКАТО) Тогда
		ОКАТО = Данные.ОКАТО;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ОКТМО) Тогда
		ОКТМО = Данные.ОКТМО;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Площадь) Тогда
		Площадь = Данные.Площадь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.КадастроваяСтоимость) Тогда
		КадастроваяСтоимость = Данные.КадастроваяСтоимость;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Адрес) Тогда
		СтрокиКИ = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКадастровогоЗемельногоУчастка));
		Если СтрокиКИ.Количество() = 0 Тогда
			СтрокаКИ = КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКадастровогоЗемельногоУчастка;
		Иначе
			СтрокаКИ = СтрокиКИ[0];
		КонецЕсли;
		СтрокаКИ.Представление	= Данные.Адрес;
		СтрокаКИ.ЗначенияПолей	= Данные.АдресЗначенияПолей;
		СтрокаКИ.Значение		= Данные.АдресЗначение;
	КонецЕсли;
	
	Если Данные.Контуры.Количество() > 0 Тогда
		Контуры.Очистить();
		Для Каждого СтрокаКонтура Из Данные.Контуры Цикл
			НоваяСтрока = Контуры.Добавить();
			НоваяСтрока.КадастровыйНомер = СтрокаКонтура.КадастровыйНомер;
			НоваяСтрока.УчетныйНомер = СтрокаКонтура.ПорядковыйНомер;
			НоваяСтрока.ГеометрияКадастра = СтрокаКонтура.Геометрия;
		КонецЦикла;
	КонецЕсли;
	ГеометрияWgsСобратьОбщую();
	
	Если Данные.ПраваНаУчасток.Количество() > 0 Тогда
		СтараяТаблица = ПраваНаУчасток.Скопировать();
		Для Каждого СтрокаПрав Из Данные.ПраваНаУчасток Цикл
			СтрокиДляУдаления = ПраваНаУчасток.НайтиСтроки(Новый Структура("Период", СтрокаПрав.Период));
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				ПраваНаУчасток.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		КонецЦикла;
		Для Каждого СтрокаПрав Из Данные.ПраваНаУчасток Цикл
			ЧислительДробиДоли = Число(СтрокаПрав.ЧислительДробиДоли);
			ЗнаменательДробиДоли = Число(СтрокаПрав.ЗнаменательДробиДоли);
			
			СтрокаПрав.Вставить("Правообладатель", ПолучитьПравообладателя(СтрокаПрав));
			Строки = СтараяТаблица.НайтиСтроки(Новый Структура("ВидПрава,Правообладатель,Комментарий,Период,НомерГРП,ЧислительДробиДоли,ЗнаменательДробиДоли", 
				Справочники.гисВидыПравНаКадастровыйУчасток.НайтиПоКоду(СтрокаПрав.ВидПраваКод), СтрокаПрав.Правообладатель, СтрокаПрав.Комментарий, СтрокаПрав.Период, СтрокаПрав.НомерГРП, ЧислительДробиДоли, ЗнаменательДробиДоли));
			Если Строки.Количество() > 0 Тогда
				Для Каждого Строка Из Строки Цикл
					НоваяСтрока = ПраваНаУчасток.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;
			Иначе
				НоваяСтрока = ПраваНаУчасток.Добавить();
				НоваяСтрока.ВидПрава = Справочники.гисВидыПравНаКадастровыйУчасток.НайтиПоКоду(СтрокаПрав.ВидПраваКод);
				НоваяСтрока.Комментарий = СтрокаПрав.Комментарий;
				НоваяСтрока.Правообладатель = СтрокаПрав.Правообладатель;
				НоваяСтрока.Период = СтрокаПрав.Период;
				НоваяСтрока.НомерГРП = СтрокаПрав.НомерГРП;
				НоваяСтрока.ЧислительДробиДоли = СтрокаПрав.ЧислительДробиДоли;
				НоваяСтрока.ЗнаменательДробиДоли = СтрокаПрав.ЗнаменательДробиДоли;
				НоваяСтрока.ПлощадьДоли = СтрокаПрав.ПлощадьДоли;
				НоваяСтрока.Документы = СтрокаПрав.Документы;
			КонецЕсли;
		КонецЦикла;
		ПраваНаУчасток.Сортировать("Период");
	КонецЕсли;
КонецПроцедуры


// Формирует таблицу прав на участок.
// Используется в самой форме элемента, а также в документе гисКадастровыеДокументы.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица прав на кадастровый участок.
//
Функция ПолучитьТаблицуПраваНаУчасток() Экспорт
	ПраваНаУчасток = Новый ТаблицаЗначений;
	ПраваНаУчасток.Колонки.Добавить("Период");
	ПраваНаУчасток.Колонки.Добавить("НомерГРП");
	ПраваНаУчасток.Колонки.Добавить("ВидПрава");
	ПраваНаУчасток.Колонки.Добавить("Правообладатель");
	ПраваНаУчасток.Колонки.Добавить("ЧислительДробиДоли");
	ПраваНаУчасток.Колонки.Добавить("ЗнаменательДробиДоли");
	ПраваНаУчасток.Колонки.Добавить("ПлощадьДоли");
	ПраваНаУчасток.Колонки.Добавить("Комментарий");
	ПраваНаУчасток.Колонки.Добавить("Документы");
	ПраваНаУчасток.Колонки.Добавить("ДокументыПредставление");
	
	Если Ссылка.Пустая() Тогда
		Возврат ПраваНаУчасток;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.гисПраваНаКадастровыйУчасток ГДЕ КадастровыйУчасток = &КадастровыйУчасток УПОРЯДОЧИТЬ ПО НомерВТаблице");
	Запрос.УстановитьПараметр("КадастровыйУчасток", Ссылка);
	ВыборкаПравНаУчасток = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПравНаУчасток.Следующий() Цикл
		НоваяСтрока = ПраваНаУчасток.Добавить();
		НоваяСтрока.Период = ВыборкаПравНаУчасток.Период;
		НоваяСтрока.НомерГРП = ВыборкаПравНаУчасток.НомерГРП;
		НоваяСтрока.ВидПрава = ВыборкаПравНаУчасток.ВидПрава;
		НоваяСтрока.Правообладатель = ВыборкаПравНаУчасток.Правообладатель;
		НоваяСтрока.ЧислительДробиДоли = ВыборкаПравНаУчасток.ЧислительДробиДоли;
		НоваяСтрока.ЗнаменательДробиДоли = ВыборкаПравНаУчасток.ЗнаменательДробиДоли;
		НоваяСтрока.ПлощадьДоли = ВыборкаПравНаУчасток.ПлощадьДоли;
		НоваяСтрока.Комментарий = ВыборкаПравНаУчасток.Комментарий;
		НоваяСтрока.Документы = ВыборкаПравНаУчасток.Документы;
	КонецЦикла;
	
	Возврат ПраваНаУчасток;
КонецФункции

// Сохраняет таблицу прав на участок в регистр сведений.
//
// Параметры:
//  ПраваНаУчасток	 - ТаблицаЗначений - хранит права на кадастровый земельный участок, формат задается в функции 
//		ПолучитьТаблицуПраваНаУчасток().
//
Процедура СохранитьТаблицуПраваНаУчасток(ПраваНаУчасток) Экспорт
	НаборЗаписейПравНаУчасток = РегистрыСведений.гисПраваНаКадастровыйУчасток.СоздатьНаборЗаписей();
	НаборЗаписейПравНаУчасток.Отбор.КадастровыйУчасток.Установить(Ссылка);
	НаборЗаписейПравНаУчасток.Очистить();
	
	НомерВТаблице = 1;
	Для Каждого Строка Из ПраваНаУчасток Цикл
		Запись = НаборЗаписейПравНаУчасток.Добавить();
		Запись.Период = Строка.Период;
		Запись.НомерГРП = Строка.НомерГРП;
		Запись.КадастровыйУчасток = Ссылка;
		Запись.ВидПрава = Строка.ВидПрава;
		Запись.Правообладатель = Строка.Правообладатель;
		Запись.ЧислительДробиДоли = Строка.ЧислительДробиДоли;
		Запись.ЗнаменательДробиДоли = Строка.ЗнаменательДробиДоли;
		Запись.ПлощадьДоли = Строка.ПлощадьДоли;
		Запись.Комментарий = Строка.Комментарий;
		Запись.Документы = Строка.Документы;
		Запись.НомерВТаблице = НомерВТаблице;
		
		НомерВТаблице = НомерВТаблице + 1;
	КонецЦикла;
	
	Попытка
		НаборЗаписейПравНаУчасток.Записать();
	Исключение
		ВызватьИсключение "Ошибка при записи регистра сведений ""Права на кадастровый участок""" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ)
	Если ЗначениеЗаполнено(КадастровыйНомер) И Не ПометкаУдаления Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадастровыеЗемельныеУчастки.Ссылка
		|ИЗ
		|	Справочник.гисКадастровыеЗемельныеУчастки КАК КадастровыеЗемельныеУчастки
		|ГДЕ
		|	НЕ КадастровыеЗемельныеУчастки.ПометкаУдаления
		|	И КадастровыеЗемельныеУчастки.КадастровыйНомер = &КадастровыйНомер
		|	И КадастровыеЗемельныеУчастки.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("КадастровыйНомер", КадастровыйНомер);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		Если Таблица.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Земельный участок с таким кадастровым номером уже существует!'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Координаты текущего контура добавляются к суммарным координатам.
// При этом корректируется тип геометрии.
//
// Если текущий контур - линия(мультилиния), и суммарный - линия(мультилиния) - тогда тип мультилиния.
// Если текущий контур - полигон(мультиполигон), и суммарный - полигон(мультиполигон) - тогда тип мультиполигон.
// Если текущий контур - линия(мультилиния), и суммарный - полигон(мультиполигон) - ошибка, пробрасывается исключение.
// Если текущий контур - полигон(мультиполигон), и суммарный - линия(мультилиния) - ошибка, пробрасывается исключение.
Процедура ГеометрияWgsПреобразоватьВОбщую(coordinates, geometryType, ТипГеометрииКонтура, КоординатыКонтура)
	СообщениеОбОшибке =  "Все контуры должны быть одного типа: линии(мультилинии) или полигоны(мультиполигоны)!";
	
	Если НРег(ТипГеометрииКонтура) = НРег("LineString") Тогда
		Если НРег(geometryType) = НРег("Polygon") Тогда
			ВызватьИсключение СообщениеОбОшибке;
		ИначеЕсли НРег(geometryType) = НРег("MultiPolygon") Тогда
			ВызватьИсключение СообщениеОбОшибке;
		ИначеЕсли НРег(geometryType) = НРег("LineString") Тогда
			geometryType = "MultiLineString";
			Контур1 = coordinates;
			coordinates = Новый Массив;
			coordinates.Добавить(Контур1);
			coordinates.Добавить(КоординатыКонтура);
		ИначеЕсли НРег(geometryType) = НРег("MultiLineString") Тогда
			coordinates.Добавить(КоординатыКонтура);
		КонецЕсли;
	ИначеЕсли НРег(ТипГеометрииКонтура) = НРег("MultiLineString") Тогда
		Если НРег(geometryType) = НРег("Polygon") Тогда
			ВызватьИсключение СообщениеОбОшибке;
		ИначеЕсли НРег(geometryType) = НРег("MultiPolygon") Тогда
			ВызватьИсключение СообщениеОбОшибке;
		ИначеЕсли НРег(geometryType) = НРег("LineString") Тогда
			geometryType = "MultiLineString";
			Контур1 = coordinates;
			coordinates = Новый Массив;
			coordinates.Добавить(Контур1);
			Для Каждого Линия Из КоординатыКонтура Цикл
				coordinates.Добавить(Линия);
			КонецЦикла;
		ИначеЕсли НРег(geometryType) = НРег("MultiLineString") Тогда
			Для Каждого Линия Из КоординатыКонтура Цикл
				coordinates.Добавить(Линия);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли НРег(ТипГеометрииКонтура) = НРег("Polygon") Тогда
		Если НРег(geometryType) = НРег("Polygon") Тогда
			geometryType = "MultiPolygon";
			Контур1 = coordinates;
			coordinates = Новый Массив;
			coordinates.Добавить(Контур1);
			coordinates.Добавить(КоординатыКонтура);
		ИначеЕсли НРег(geometryType) = НРег("MultiPolygon") Тогда
			coordinates.Добавить(КоординатыКонтура);
		ИначеЕсли НРег(geometryType) = НРег("LineString") Тогда
			ВызватьИсключение СообщениеОбОшибке;
		ИначеЕсли НРег(geometryType) = НРег("MultiLineString") Тогда
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
	ИначеЕсли НРег(ТипГеометрииКонтура) = НРег("MultiPolygon") Тогда
		Если НРег(geometryType) = НРег("Polygon") Тогда
			geometryType = "MultiPolygon";
			Контур1 = coordinates;
			coordinates = Новый Массив;
			coordinates.Добавить(Контур1);
			Для Каждого Полигон Из КоординатыКонтура Цикл
				coordinates.Добавить(Полигон);
			КонецЦикла;
		ИначеЕсли НРег(geometryType) = НРег("MultiPolygon") Тогда
			Для Каждого Полигон Из КоординатыКонтура Цикл
				coordinates.Добавить(Полигон);
			КонецЦикла;
		ИначеЕсли НРег(geometryType) = НРег("LineString") Тогда
			ВызватьИсключение СообщениеОбОшибке;
		ИначеЕсли НРег(geometryType) = НРег("MultiLineString") Тогда
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ГеометрияWgsСобратьОбщую() Экспорт
	coordinates = Новый Массив;
	geometryType = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыПереводаВWgs84) Тогда
		Для Каждого СтрокаКонтуры Из Контуры Цикл
			Если Не ЗначениеЗаполнено(СтрокаКонтуры.ГеометрияКадастра) Тогда
				Продолжить;
			КонецЕсли;
			
			// TODO должен ли тут быть перевод всех?... или просто собирать геометрии WGS
			Если гисРаботаСПлощаднымиОбъектамиСервер.ГеометрияПеревестиИзМскВWgs84(СтрокаКонтуры.ГеометрияКадастра, ПараметрыПереводаВWgs84, СтрокаКонтуры.ГеометрияWgs, Наименование + ", контур в строке " + (СтрокаКонтуры.НомерСтроки + 1)) Тогда
				ГеоJson = гисРаботаСJson.ПрочитатьНативно(СтрокаКонтуры.ГеометрияWgs);
				
				ТипГеометрииКонтура = ГеоJson.geometry.type;
				КоординатыКонтура = ГеоJson.geometry.coordinates;
				
				Если Не ЗначениеЗаполнено(geometryType) Тогда
					// первый просто записываем
					geometryType = ТипГеометрииКонтура;
					coordinates = КоординатыКонтура;
					Продолжить;
				КонецЕсли;
				
				Попытка
					ГеометрияWgsПреобразоватьВОбщую(coordinates, geometryType, ТипГеометрииКонтура, КоординатыКонтура);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
					coordinates.Очистить();
					Прервать;
				КонецПопытки;
			Иначе
				ОбщегоНазначения.СообщитьПользователю(Наименование + ", контур из строки " + (СтрокаКонтуры.НомерСтроки + 1) + " не включен в общую геометрию!");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если coordinates.Количество() > 0 Тогда
		ГеометрияWgs = гисГисСервер.ПолучитьGeoJson(coordinates, geometryType);
	Иначе
		ГеометрияWgs = "";
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПравообладателя(СтрокаПрав)
	Правообладатель = "";
	
	ТипПравообладателя = СтрокаПрав.ПравообладательТип;
	Если ЗначениеЗаполнено(СтрокаПрав.ПравообладательТип) Тогда
		Если ТипПравообладателя = 1 Тогда	// организации
			ПравообладательИНН = СокрЛП(СтрокаПрав.ПравообладательИНН);
			ПравообладательНаименование = СокрЛП(СтрокаПрав.ПравообладательНаименование);
			
			Если ЗначениеЗаполнено(ПравообладательНаименование) Тогда
				Правообладатель = ПравообладательНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПравообладательИНН) Тогда
				Правообладатель = Правообладатель + ?(Правообладатель = "", "", ", ") + ПравообладательИНН;
			КонецЕсли;
		ИначеЕсли ТипПравообладателя = 2 Тогда	// физ лица
			ПравообладательНаименование = СокрЛП(СтрокаПрав.ПравообладательФамилия + " " + СтрокаПрав.ПравообладательИмя + " " + СтрокаПрав.ПравообладательОтчество); 
			ПравообладательИНН = СокрЛП(СтрокаПрав.ПравообладательИНН);
			ПравообладательСНИЛС = СокрЛП(СтрокаПрав.ПравообладательСНИЛС);
			
			Если ЗначениеЗаполнено(ПравообладательНаименование) Тогда
				Правообладатель = ПравообладательНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПравообладательИНН) Тогда
				Правообладатель = Правообладатель + ?(Правообладатель = "", "", ", ") + ПравообладательИНН;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПравообладательСНИЛС) Тогда
				Правообладатель = Правообладатель + ?(Правообладатель = "", "", ", ") + ПравообладательСНИЛС;
			КонецЕсли;
		ИначеЕсли ТипПравообладателя = 3 Тогда	// правительство
			ПравообладательНаименование = СокрЛП(СтрокаПрав.ПравообладательНаименование);
			Если ЗначениеЗаполнено(ПравообладательНаименование) Тогда
				Правообладатель = ПравообладательНаименование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Правообладатель;
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли