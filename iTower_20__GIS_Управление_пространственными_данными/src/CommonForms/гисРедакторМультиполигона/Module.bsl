#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Параметры.Геометрия) Тогда
		ЗагрузитьГеометрию(Параметры.Геометрия);
	КонецЕсли;
	
	ЕстьДырки = НомераДырок.Количество() > 0;
	ОтображатьДырки = ЕстьДырки;
	Элементы.ДыркиГруппа.Видимость = ЕстьДырки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтображатьДыркиПриИзменении(Элемент)
	Элементы.ДыркиГруппа.Видимость = ОтображатьДырки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНомераПолигонов

&НаКлиенте
Процедура НомераПолигоновПриАктивизацииСтроки(Элемент)
	Если Элементы.НомераПолигонов.ТекущиеДанные = Неопределено Тогда
		Элементы.ОсновнойКонтур.ОтборСтрок = Неопределено;
		Элементы.Дырки.ОтборСтрок = Неопределено;
	Иначе
		Если Не ЗначениеЗаполнено(Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки) Тогда
			Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки = ПолучитьСледующийКлючПолигонов();
			Элементы.НомераПолигонов.ТекущиеДанные.НомерСтроки = НомераПолигонов.Количество();
		КонецЕсли;
		
		УсловиеОтбора = Новый ФиксированнаяСтруктура("НомерПолигона", Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки);
		Элементы.ОсновнойКонтур.ОтборСтрок = УсловиеОтбора;
		Элементы.НомераДырок.ОтборСтрок = УсловиеОтбора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомераПолигоновПередУдалением(Элемент, Отказ)
	НомерПолигона = Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки;
	
	Счетчик = 0;
	КоличествоКоординат = ОсновнойКонтур.Количество();
	Пока Счетчик < КоличествоКоординат Цикл
		Если ОсновнойКонтур[Счетчик].НомерПолигона = НомерПолигона Тогда
			ОсновнойКонтур.Удалить(Счетчик);
			Счетчик = Счетчик - 1;
			КоличествоКоординат = КоличествоКоординат - 1;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Счетчик = 0;
	КоличествоНомеровДырок = НомераДырок.Количество();
	Пока Счетчик < КоличествоНомеровДырок Цикл
		Если НомераДырок[Счетчик].НомерПолигона = НомерПолигона Тогда
			УдалитьКоординатыДырки(НомерПолигона, НомераДырок[Счетчик].КлючСтроки);
			
			НомераДырок.Удалить(Счетчик);
			Счетчик = Счетчик - 1;
			КоличествоНомеровДырок = КоличествоНомеровДырок - 1;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НомераПолигоновПослеУдаления(Элемент)
	ОбновитьНомераПолигонов();
	ОбновитьНомераДырок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновнойКонтур

&НаКлиенте
Процедура ОсновнойКонтурПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ОсновнойКонтур.ТекущиеДанные.НомерПолигона = Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКонтурПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если НомераПолигонов.Количество() = 0 Или Элементы.НомераПолигонов.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНомераПолигонов

&НаКлиенте
Процедура НомераДырокПриАктивизацииСтроки(Элемент)
	Если Элементы.НомераПолигонов.ТекущиеДанные = Неопределено И Элементы.НомераДырок.ТекущиеДанные = Неопределено Тогда
		Элементы.Дырки.ОтборСтрок = Неопределено;
	Иначе
		Если Элементы.НомераДырок.ТекущиеДанные = Неопределено Тогда
			Элементы.Дырки.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерПолигона", Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки);
		Иначе
			Если Не ЗначениеЗаполнено(Элементы.НомераДырок.ТекущиеДанные.КлючСтроки) Тогда
				Элементы.НомераДырок.ТекущиеДанные.КлючСтроки = ПолучитьСледующийКлючДырок();
				Элементы.НомераДырок.ТекущиеДанные.НомерСтроки = ПолучитьСледующийНомерСтрокиДырок();
				Элементы.НомераДырок.ТекущиеДанные.НомерПолигона = Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки;
			КонецЕсли;
			
			Элементы.Дырки.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерПолигона,НомерДырки",
				Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки,Элементы.НомераДырок.ТекущиеДанные.КлючСтроки);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомераДырокПередУдалением(Элемент, Отказ)
	УдалитьКоординатыДырки(Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки, Элементы.НомераДырок.ТекущиеДанные.КлючСтроки);
КонецПроцедуры

&НаКлиенте
Процедура НомераДырокПослеУдаления(Элемент)
	ОбновитьНомераДырок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДырки

&НаКлиенте
Процедура ДыркиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Дырки.ТекущиеДанные.НомерПолигона = Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки;
		Элементы.Дырки.ТекущиеДанные.НомерДырки = Элементы.НомераДырок.ТекущиеДанные.КлючСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДыркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если НомераДырок.Количество() = 0 Или Элементы.НомераДырок.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	ЭтотОбъект.Закрыть(ГеометрияВJson());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает геометрию, введенную на форме, в формате GeoJson.
// Геометрия будет типа MultiPolygon.
// 
// Возвращаемое значение:
//   - Строка - геометрия в формате GeoJson.
//
&НаСервере
Функция ГеометрияВJson()
	Если НомераПолигонов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Мультиполигон = Новый Массив;
	Для каждого НомерПолигона Из НомераПолигонов Цикл
		Полигон = Новый Массив;
		
		СтрокиОсновногоКонтура = ОсновнойКонтур.НайтиСтроки(Новый Структура("НомерПолигона", НомерПолигона.КлючСтроки));
		КонтурКоординаты = Новый Массив;
		Для каждого Строка Из СтрокиОсновногоКонтура Цикл
			Координаты = Новый Массив;
			Координаты.Добавить(Строка.Долгота);
			Координаты.Добавить(Строка.Широта);
			КонтурКоординаты.Добавить(Координаты);
		КонецЦикла;
		Полигон.Добавить(КонтурКоординаты);
		
		НомераДырокПолигона = НомераДырок.НайтиСтроки(Новый Структура("НомерПолигона", НомерПолигона.КлючСтроки));
		Для каждого НомерДырки Из НомераДырокПолигона Цикл
			ДыркиПолигона = Дырки.НайтиСтроки(Новый Структура("НомерПолигона,НомерДырки", НомерПолигона.КлючСтроки, НомерДырки.КлючСтроки));
			КонтурКоординаты = Новый Массив;
			Для каждого Строка Из ДыркиПолигона Цикл
				Координаты = Новый Массив;
				Координаты.Добавить(Строка.Долгота);
				Координаты.Добавить(Строка.Широта);
				КонтурКоординаты.Добавить(Координаты);
			КонецЦикла;
			Полигон.Добавить(КонтурКоординаты);
		КонецЦикла;
		
		Мультиполигон.Добавить(Полигон);
	КонецЦикла;
	
	Возврат гисГисСервер.ПолучитьGeoJson(Мультиполигон, "MultiPolygon");
КонецФункции

// Загружает на форму геометрию типа MultiPolygon сохраненную в формате GeoJson.
// Если тип другой - выдает сообщение об ошибке.
//
// Параметры:
//  ГеометрияСтрока	 - Строка - геометрия в формате GeoJson.
//
&НаСервере
Процедура ЗагрузитьГеометрию(ГеометрияСтрока)
	Геометрия = гисРаботаСJson.ПрочитатьНативно(ГеометрияСтрока);
	
	geometry = Геометрия.geometry;
	Если geometry.type <> "MultiPolygon" Тогда
		ОбщегоНазначения.СообщитьПользователю("Ошибка при загрузке геометрии!");
		Возврат;
	КонецЕсли;
	
	МассивПолигонов = geometry.coordinates;
	
	Для НомерПолигона = 0 По МассивПолигонов.Количество() - 1 Цикл
		НомерПолигонаВИнтерфейсе = НомерПолигона + 1;
		
		НоваяСтрока = НомераПолигонов.Добавить();
		НоваяСтрока.НомерСтроки = НомерПолигонаВИнтерфейсе;
		НоваяСтрока.КлючСтроки = НомерПолигонаВИнтерфейсе;
		
		ТекущийПолигон = МассивПолигонов[НомерПолигона];
		Если ТекущийПолигон.Количество() > 0 Тогда
			Для Каждого Координаты Из ТекущийПолигон[0] Цикл
				НоваяСтрока = ОсновнойКонтур.Добавить();
				НоваяСтрока.Долгота = Координаты[0];
				НоваяСтрока.Широта = Координаты[1];
				НоваяСтрока.НомерПолигона = НомерПолигонаВИнтерфейсе;
			КонецЦикла;
		КонецЕсли;
		
		Для НомерДырки = 1 По ТекущийПолигон.Количество() - 1 Цикл
			НоваяСтрока = НомераДырок.Добавить();
			НоваяСтрока.НомерПолигона = НомерПолигонаВИнтерфейсе;
			НоваяСтрока.НомерСтроки = НомерДырки;
			НоваяСтрока.КлючСтроки = НомерДырки;
			
			Для Каждого Координаты Из ТекущийПолигон[НомерДырки] Цикл
				НоваяСтрока = Дырки.Добавить();
				НоваяСтрока.НомерПолигона = НомерПолигонаВИнтерфейсе;
				НоваяСтрока.НомерДырки = НомерДырки;
				НоваяСтрока.Долгота = Координаты[0];
				НоваяСтрока.Широта = Координаты[1];
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 
КонецПроцедуры


// В таблице НомераПолигонов проставляем заново номера контуров.
//
&НаКлиенте
Процедура ОбновитьНомераПолигонов()
	НомерСтроки = 1;
	Для каждого Строка Из НомераПолигонов Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
КонецПроцедуры

// Возвращает следующий ключ строки для табличной части НомераПолигонов.
// 
// Возвращаемое значение:
//   - Число - Ключ строки для следующей дырки.
//
&НаКлиенте
Функция ПолучитьСледующийКлючПолигонов()
	МаксимальныйКлюч = 0;
	Для каждого Строка Из НомераПолигонов Цикл
		Если Строка.КлючСтроки > МаксимальныйКлюч Тогда
			МаксимальныйКлюч = Строка.КлючСтроки;
		КонецЕсли; 
	КонецЦикла;
	Возврат МаксимальныйКлюч + 1;
КонецФункции


// В таблице НомераДырок проставляем заново номера контуров.
//
&НаКлиенте
Процедура ОбновитьНомераДырок()
	НомераСтрок = Новый Массив;
	Для каждого Строка Из НомераПолигонов Цикл
		НомераСтрок.Вставить(Строка.КлючСтроки, 0);
	КонецЦикла;
	Для каждого Строка Из НомераДырок Цикл
		НомераСтрок[Строка.НомерПолигона] = НомераСтрок[Строка.НомерПолигона] + 1;
		Строка.НомерСтроки = НомераСтрок[Строка.НомерПолигона];
	КонецЦикла; 
КонецПроцедуры

// Возвращает следующий ключ строки для табличной части НомераДырок.
// 
// Возвращаемое значение:
//   - Число - Ключ строки для следующей дырки.
//
&НаКлиенте
Функция ПолучитьСледующийКлючДырок()
	НомерПолигона = Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки;
	НомераДырокПолигона = НомераДырок.НайтиСтроки(Новый Структура("НомерПолигона", НомерПолигона));
	МаксимальныйКлюч = 0;
	Для каждого Строка Из НомераДырокПолигона Цикл
		Если Строка.КлючСтроки > МаксимальныйКлюч Тогда
			МаксимальныйКлюч = Строка.КлючСтроки;
		КонецЕсли; 
	КонецЦикла;
	Возврат МаксимальныйКлюч + 1;
КонецФункции

// Возвращает ключ строки для следующей строки НомераДырок.
// 
// Возвращаемое значение:
//   - Число - ключ строки для следующей строки НомераДырок.
//
&НаКлиенте
Функция ПолучитьСледующийНомерСтрокиДырок()
	НомерПолигона = Элементы.НомераПолигонов.ТекущиеДанные.КлючСтроки;
	НомераДырокПолигона = НомераДырок.НайтиСтроки(Новый Структура("НомерПолигона", НомерПолигона));
	Возврат НомераДырокПолигона.Количество() + 1;
КонецФункции

// Удаляет указанную дырку указанного полигона.
//
// Параметры:
//  НомерПолигона	 - Число - ключ строки таблицы НомераПолигонов - полигон, у которого нужно удалить дырку.
//  НомерДырки		 - Число - ключ строки таблицы НомераДырок - дырка, которую нужно удалить.
//
&НаКлиенте
Процедура УдалитьКоординатыДырки(НомерПолигона, НомерДырки)
	Счетчик = 0;
	КоличествоКоординат = Дырки.Количество();
	Пока Счетчик < КоличествоКоординат Цикл
		Если Дырки[Счетчик].НомерПолигона = НомерПолигона И Дырки[Счетчик].НомерДырки = НомерДырки Тогда
			Дырки.Удалить(Счетчик);
			Счетчик = Счетчик - 1;
			КоличествоКоординат = КоличествоКоординат - 1;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
