

#Область ПрограммныйИнтерфейс

Функция ПолучитьПредставлениеТипаСтрокой(ОписаниеТипа) Экспорт
	
	СтрокаПредставления = Строка(ОписаниеТипа);
		
	Возврат СтрокаПредставления;
	
КонецФункции

Функция ИмяТаблицыЗависимостей() Экспорт
	
	ИмяТаблицыЗависимостей = "лм_ЗависимостиРеквизитов";
	
	Возврат ИмяТаблицыЗависимостей;
	
КонецФункции

Функция ИмяРеквизитаАдресаСоответствияЗависимостей() Экспорт
	
	ИмяРеквизитаАдресаСоответствияЗависимостей = "лм_АдресСоответствияЗависимостей";
	
	Возврат ИмяРеквизитаАдресаСоответствияЗависимостей;
	
КонецФункции

Функция ИмяРеквизитаСоответствияРеквизитов() Экспорт
	
	ИмяРеквизитаАдресаСоответствияРеквизитов = "лм_АдресСоответствияРеквизитов";
	
	Возврат ИмяРеквизитаАдресаСоответствияРеквизитов;
	
КонецФункции

Функция ИмяРеквизитаПредзаполненныхДанных() Экспорт
	
	Возврат "лм_АдресПредзаполненныхДанных";
	
КонецФункции

Функция ИмяРеквизитаАдресаУниверсальнойСтруктуры() Экспорт
	
	ИмяРеквизитаАдресаУниверсальнойСтруктуры = "лм_АдресУниверсальнойСтруктуры";
	
	Возврат ИмяРеквизитаАдресаУниверсальнойСтруктуры;
	
КонецФункции

Функция ИмяРеквизитаЭлементРазмещения() Экспорт
	
	ИмяРеквизитаЭлементРазмещения = "лм_ИмяЭлементаДляРазмещения";
	
	Возврат ИмяРеквизитаЭлементРазмещения;
	
КонецФункции

Функция ИмяРеквизитаДанныеСтруктурыИнициализированы() Экспорт
	
	ИмяРеквизитаДанныеСтруктурыИнициализированы = "лм_ДанныеСтруктурыИнициализированы";
	
	Возврат ИмяРеквизитаДанныеСтруктурыИнициализированы;
	
КонецФункции

Функция ИмяРеквизитаИмяГруппыУниверсальнойСтруктуры() Экспорт
	
	ИмяРеквизитаИмяГруппыУниверсальнойСтруктуры = "лм_ИмяГруппыУниверсальнойСтруктуры";
	
	Возврат ИмяРеквизитаИмяГруппыУниверсальнойСтруктуры;
	
КонецФункции

Функция ИмяРеквизитаИмяСтраницыУниверсальнойСтруктуры() Экспорт
	
	ИмяРеквизитаИмяСтраницыУниверсальнойСтруктуры = "лм_ИмяСтраницыУниверсальнойСтруктуры";
	
	Возврат ИмяРеквизитаИмяСтраницыУниверсальнойСтруктуры;
	
КонецФункции

Функция ИмяТаблицыРеквизитов() Экспорт
	
	ИмяТаблицы = "лм_УниверсальнаяСтруктура";
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ИмяТаблицыСвойствРеквизитов() Экспорт
	
	ИмяТаблицы = "лм_СвойстваРеквизитов";
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ИмяТаблицыЗависимостейСвойствРеквизитов() Экспорт
	
	ИмяТаблицыЗависимостей = "лм_ЗависимостиСвойствРеквизитов";
	
	Возврат ИмяТаблицыЗависимостей;
		
КонецФункции

Функция ИмяСпискаСтруктур() Экспорт
	
	ИмяСпискаСтруктур = "лм_СписокСтруктур";
	
	Возврат ИмяСпискаСтруктур;
	
КонецФункции

Функция СформироватьСтруктуруСвойстваРеквизита() Экспорт
	
	СтруктураСвойства = Новый Структура("ИмяПоля,Синоним,ТипЗначения,Идентификатор,МногострочноеПолеВвода,ВыводитьВВидеГиперссылки,Подсказка,Комментарий,ФорматСвойства,ЗаполнятьОбязательно,Динамический,Нередактируемый,Метка,ВидСправочника");	
	
	Возврат СтруктураСвойства;	
	
КонецФункции

Функция СформироватьСтруктуруЗависимостиРеквизита() Экспорт
	
	СтруктураЗависимости = Новый Структура("Представление,Условие,Значение,Реквизит,Идентификатор,ТипЗначения,ЗависимоеСвойство,РежимВыбора");
	
	Возврат СтруктураЗависимости;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПоДаннымСтруктуры(УниверсальнаяСтруктура, Форма) Экспорт
			
	Реквизиты   = УниверсальнаяСтруктура.Реквизиты;
	Зависимости = УниверсальнаяСтруктура.ЗависимостиРеквизитов;
	
	Форма.лмИдентификаторСтруктуры = УниверсальнаяСтруктура.ИдентификаторСтруктуры;
	Форма.лмВладелецСтруктуры      = УниверсальнаяСтруктура.ВладелецСтруктуры;
	Форма.лмИмяСтруктуры           = УниверсальнаяСтруктура.Имя;
	
	Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыСвойствРеквизитов()].Очистить();
	Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыРеквизитов()].Очистить();
	Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыЗависимостейСвойствРеквизитов()].Очистить();
	Форма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыЗависимостей()].Очистить();
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
			ИмяТЗ = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыСвойствРеквизитов();
		Иначе
			ИмяТЗ = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыРеквизитов();	
		КонецЕсли;						
		Стр = Форма[ИмяТЗ].Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Реквизит);
		Стр.ПредставлениеТипаЗначения = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ПолучитьПредставлениеТипаЗначения(Реквизит.ТипЗначения, Реквизит.ВидСправочника);
	КонецЦикла;
	
	Для Каждого Зависимость Из Зависимости Цикл
		Если ЗначениеЗаполнено(Зависимость.ОсновнойИдентификатор) Тогда
			ИмяТЗ = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыЗависимостейСвойствРеквизитов();	
		Иначе
			ИмяТЗ = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяТаблицыЗависимостей();
		КонецЕсли;
		Стр = Форма[ИмяТЗ].Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Зависимость);
	КонецЦикла;		
		
КонецПроцедуры

Функция ПодготовитьДанныеСтруктуры() Экспорт
	
	ДанныеСтруктуры = Новый Структура;
	ДанныеСтруктуры.Вставить("Имя", "");
	ДанныеСтруктуры.Вставить("Наименование", "");
	ДанныеСтруктуры.Вставить("ХешСумма", "");
	ДанныеСтруктуры.Вставить("ИдентификаторСтруктуры");
	ДанныеСтруктуры.Вставить("ВладелецСтруктуры");
	ДанныеСтруктуры.Вставить("Реквизиты", Новый Массив);
	ДанныеСтруктуры.Вставить("ЗависимостиРеквизитов", Новый Массив);
	
	Возврат ДанныеСтруктуры; 	
	
КонецФункции

Функция НайтиСтрокиТаблицыОбъекта(ИсходныйМассив, Отбор) Экспорт
	
	МассивРезультат = Новый Массив;
	
	Если ИсходныйМассив.Количество() = 0 Тогда
		Возврат МассивРезультат;
	КонецЕсли;
	
	МассивКлючейОтбора = Новый Массив;
	
	Для Каждого КлючИЗначение Из Отбор Цикл
		МассивКлючейОтбора.Добавить(КлючИЗначение.Ключ);	
	КонецЦикла;
	
	Для Каждого Стр Из ИсходныйМассив Цикл
		Подходит = Истина;
		Для Каждого Ключ Из МассивКлючейОтбора Цикл
			Если Стр[Ключ] <> Отбор[Ключ] Тогда
				Подходит = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Подходит Тогда
			МассивРезультат.Добавить(Стр);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

Процедура ВывестиДанныеСтруктуры(ИдентификаторСтруктуры, Форма, ВладелецСтруктуры = Неопределено, ОтложеннаяИнициализация = Ложь, ИдентификаторКопируемойСтруктуры = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Назначение", "ФормаНастроекСтруктуры");
	
	Если ИдентификаторКопируемойСтруктуры <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ИдентификаторКопируемойСтруктуры", ИдентификаторКопируемойСтруктуры);
	КонецЕсли;
	
	Если ОтложеннаяИнициализация Тогда
		АдресСтруктуры                 = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторСтруктуры);
		ИмяРеквизитаАдреса             = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаУниверсальнойСтруктуры();
		Форма[ИмяРеквизитаАдреса]      = АдресСтруктуры;
		Форма.лмИдентификаторСтруктуры = ИдентификаторСтруктуры;
		Форма.лмВладелецСтруктуры      = ВладелецСтруктуры;		
		лм_УниверсальныеСтруктурыДанныхВызовСервера.СформироватьДанныеСтруктурыВФоне(ИдентификаторСтруктуры, АдресСтруктуры, ВладелецСтруктуры, ДополнительныеПараметры)
	Иначе	
		УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанныхВызовСервера.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры, ДополнительныеПараметры);
		Если ВладелецСтруктуры <> Неопределено Тогда
			УниверсальнаяСтруктура.ВладелецСтруктуры = ВладелецСтруктуры;
		КонецЕсли;
		лм_УниверсальныеСтруктурыДанныхКлиентСервер.ЗаполнитьРеквизитыПоДаннымСтруктуры(УниверсальнаяСтруктура, Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЗависимостейРеквизитовУниверсальнойСтруктуры(СоответствиеЗависимых, Параметры) Экспорт
	
	ДанныеЗависимостей = Новый Соответствие();
	ШаблонДанныхРеквизита = Новый ФиксированнаяСтруктура("Доступность, Видимость, АвтоОтметкаНезаполненного", Истина, Истина, Ложь);
	
	Для Каждого КлючИЗначение Из СоответствиеЗависимых Цикл		
		
		ОписаниеЗависимогоРеквизита = КлючИЗначение.Значение;
		ОбрабатываемыйЭлемент       = ОписаниеЗависимогоРеквизита.ИмяРеквизита;
		
		Если ОписаниеЗависимогоРеквизита.УсловиеВидимости <> Неопределено Тогда
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеВидимости.ЗначенияПараметров);
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеВидимости.КодУсловия);
			
			ДанныеРеквизита = ДанныеЗависимостей.Получить(ОбрабатываемыйЭлемент);
			Если ДанныеРеквизита = Неопределено Тогда
				ДанныеРеквизита = Новый Структура(ШаблонДанныхРеквизита);
			КонецЕсли;
			ДанныеРеквизита.Видимость = Результат;
			ДанныеЗависимостей.Вставить(ОбрабатываемыйЭлемент, ДанныеРеквизита);
		КонецЕсли;
		Если ОписаниеЗависимогоРеквизита.УсловиеДоступности <> Неопределено Тогда
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеДоступности.ЗначенияПараметров);
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеДоступности.КодУсловия);
			
			ДанныеРеквизита = ДанныеЗависимостей.Получить(ОбрабатываемыйЭлемент);
			Если ДанныеРеквизита = Неопределено Тогда
				ДанныеРеквизита = Новый Структура(ШаблонДанныхРеквизита);
			КонецЕсли;
			ДанныеРеквизита.Доступность = Результат;
			ДанныеЗависимостей.Вставить(ОбрабатываемыйЭлемент, ДанныеРеквизита);
		КонецЕсли;
		Если ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения <> Неопределено Тогда
			Если Не ОписаниеЗависимогоРеквизита.ЗаполнятьОбязательно Тогда
				Продолжить;
			КонецЕсли;
			
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения.ЗначенияПараметров);
			
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения.КодУсловия);
			
			ДанныеРеквизита = ДанныеЗависимостей.Получить(ОбрабатываемыйЭлемент);
			Если ДанныеРеквизита = Неопределено Тогда
				ДанныеРеквизита = Новый Структура(ШаблонДанныхРеквизита);
			КонецЕсли;
			ДанныеРеквизита.АвтоОтметкаНезаполненного = Результат;
			ДанныеЗависимостей.Вставить(ОбрабатываемыйЭлемент, ДанныеРеквизита);
		Иначе
			ДанныеРеквизита = ДанныеЗависимостей.Получить(ОбрабатываемыйЭлемент);
			Если ДанныеРеквизита = Неопределено Тогда
				ДанныеРеквизита = Новый Структура(ШаблонДанныхРеквизита);
			КонецЕсли;
			ДанныеРеквизита.АвтоОтметкаНезаполненного = ОписаниеЗависимогоРеквизита.ЗаполнятьОбязательно;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ДанныеЗависимостей;
	
КонецФункции

Функция ПолучитьПредставлениеТипаЗначения(ОписаниеТипаЗначения, ВидСправочника) Экспорт
	
	Результат = "";
	МассивТипов = ОписаниеТипаЗначения.Типы();
	
	Для Каждого Тип Из МассивТипов Цикл
		Если Тип = Тип("СправочникСсылка.лм_ВидыУниверсальныхСправочников") Тогда
			ПредставлениеТипа = Строка(ВидСправочника) + " (универсальный справочник)";
		Иначе
			ПредставлениеТипа = Строка(Тип);
		КонецЕсли;
		
		Результат = Результат + ?(ЗначениеЗаполнено(Результат), ", ", "") + ПредставлениеТипа;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеЗависимостей(Форма, СоответствиеЗависимых) Экспорт
	
	Попытка
		ОписаниеОбъекта = Форма.Объект;
	Исключение
		ОписаниеОбъекта = Неопределено;
	КонецПопытки;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
	ДанныеЗависимостей = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ДанныеЗависимостейРеквизитовУниверсальнойСтруктуры(СоответствиеЗависимых, Параметры);
	
	Возврат ДанныеЗависимостей;
	
КонецФункции

Функция ИмяРеквизитаПутьКДаннымРеквизитаВладельца() Экспорт
	
	ИмяСпискаСтруктур = "лм_ПутьКДаннымРеквизитаВладельца";
	
	Возврат ИмяСпискаСтруктур;
		
КонецФункции

Функция ИмяРеквизитаИдентификаторЭлементаУниверсальнойСтруктуры() Экспорт
	
	ИмяРеквизита = "лм_ИдентификаторЭлементаУниверсальнойСтруктуры";
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция ПолучитьЗначениеПоПути(Форма, ПутьКДанным) Экспорт
	
	МассивПодстрок = СтрРазделить(ПутьКДанным, ".", Ложь);
	
	Результат = Неопределено;
	
	Для Каждого Стр Из МассивПодстрок Цикл
		Если Результат = Неопределено Тогда
			Результат = Форма[Стр];	
		Иначе
			Результат = Результат[Стр];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти
