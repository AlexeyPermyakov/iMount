////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки GIS (GIS).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Возвращает имя подсистемы, которое хранится в регистре сведений ВерсииПодсистем.
// 
// ВозвращаемоеЗначение:
//	 Строка - имя подсистемы.
Функция ПолучитьИмяПодсистемы() Экспорт
	
	Возврат "GIS";
	
КонецФункции

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = ПолучитьИмяПодсистемы();
	Описание.Версия = "1.0.6.3";
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "гисОбновлениеИнформационнойБазы.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "гисОбновлениеИнформационнойБазы.ВыполнитьПервоначальноеЗаполнениеСправочников";
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
	
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.1.1";
	//Обработчик.Процедура = ".";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	//ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
	//	"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы");
	//
	//Для каждого Обработчик Из ОбработчикиСобытия Цикл
	//	Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Обработчик.Модуль.ПередОбновлениемИнформационнойБазы();
	//КонецЦикла;
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
	ХранилищеОбщихНастроек.Сохранить("ОбновлениеИБ", "ПоследняяВерсияОтображенияИзмененийСистемыГИС", ПредыдущаяВерсия);
	ХранилищеОбщихНастроек.Сохранить("ОбновлениеИБ", "ТекущаяВерсияОтображенияИзмененийСистемыГИС", ТекущаяВерсия);
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Макет) Экспорт
	
	ОписаниеОбновлений = ПолучитьОбщийМакет("гисОписаниеИзмененийСистемы");
	ОблатьОтступ = ОписаниеОбновлений.ПолучитьОбласть("Отступ");
	
	ПредыдущаяВерсия = ХранилищеОбщихНастроек.Загрузить("ОбновлениеИБ", "ПоследняяВерсияОтображенияИзмененийСистемыГИС");
	ТекущаяВерсия = ХранилищеОбщихНастроек.Загрузить("ОбновлениеИБ", "ТекущаяВерсияОтображенияИзмененийСистемыГИС");
	
	Если Метаданные.Имя <> ПолучитьИмяПодсистемы() Тогда
		Макет.Вывести(ОблатьОтступ);
		
		ОблатьШапка = ОписаниеОбновлений.ПолучитьОбласть("Шапка");
		Макет.Вывести(ОблатьШапка);
		
		ОблатьОбновлениеМодуля = ОписаниеОбновлений.ПолучитьОбласть("ОбновлениеМодуля");
		ОблатьОбновлениеМодуля.Параметры.Версия = ТекущаяВерсия;
		Макет.Вывести(ОблатьОбновлениеМодуля);
	КонецЕсли;
	
	// накопим, для каких версий нужно брать описание (в порядке убывания)
	МассивВерсий = Новый Массив;
	Для Каждого Область Из ОписаниеОбновлений.Области Цикл
		Если Найти(Область.Имя, "Версия") > 0 Тогда
			Версия = СтрЗаменить(СтрЗаменить(Область.Имя, "Версия", ""), "_", ".");
			БольшеПредыдущей = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Версия, ПредыдущаяВерсия) > 0;
			МеньшеРавноТекущей = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсия, Версия) >= 0;
			
			Если БольшеПредыдущей И МеньшеРавноТекущей Тогда
				ВерсияВставлена = Ложь;
				Для Номер = 0 По МассивВерсий.Количество() - 1 Цикл
					Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Версия, МассивВерсий[Номер]) > 0 Тогда
						МассивВерсий.Добавить(Версия);
						ВерсияВставлена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ВерсияВставлена Тогда
					МассивВерсий.Добавить(Версия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Макет.Вывести(ОблатьОтступ);
	
	Для Каждого Версия Из МассивВерсий Цикл
		ОбластьШапка = ОписаниеОбновлений.ПолучитьОбласть("Шапка" + СтрЗаменить(Версия, ".", "_"));
		Макет.Вывести(ОбластьШапка);
		
		ОбластьВерсия = ОписаниеОбновлений.ПолучитьОбласть("Версия" + СтрЗаменить(Версия, ".", "_"));
		Макет.Вывести(ОбластьВерсия);
	КонецЦикла;
	
КонецПроцедуры


// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры 

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	// Справочник "Земельные участки"
	ВидКИ = Справочники.ВидыКонтактнойИнформации.СправочникгисКадастровыеЗемельныеУчастки.ПолучитьОбъект();
	ВидКИ.Используется = Истина;
	ВидКИ.Записать();
	// почтовый адрес справочника "Земельные участки"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКадастровогоЗемельногоУчастка;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ВыполнитьПервоначальноеЗаполнениеСправочников() Экспорт
	
	Справочники.гисВидыРазрешенногоИспользования.ПервоначальноеЗаполнениеСправочника();
	
КонецПроцедуры

#КонецОбласти
