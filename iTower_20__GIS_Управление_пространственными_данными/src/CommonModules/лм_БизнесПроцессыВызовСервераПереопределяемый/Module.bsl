
#Область ПрограммныйИнтерфейс

Функция ПроверкаПравилНормализацииКлассификационныхГруппировок(Задача, Данные, Сообщения) Экспорт
	
	Результат = лм_БизнесПроцессыПереопределяемый.ПроверкаПравилНормализацииКлассификационныхГруппировок(Задача, Данные, Сообщения);
		
	Возврат Результат;
	
КонецФункции

Функция ПроверкаПравилНормализацииКлассификационныхГруппировокСвязанных(Задача, Данные, Сообщения, Ссылка) Экспорт
	
	Результат = лм_БизнесПроцессыПереопределяемый.ПроверкаПравилНормализацииКлассификационныхГруппировокСвязанных(Задача, Данные, Сообщения, Ссылка);
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхПредмета(Предмет) Экспорт
	
	Возврат лм_БизнесПроцессыПереопределяемый.ПолучитьСтруктуруДанныхПредмета(Предмет);
	
КонецФункции

Функция ЗадачиТекущегоПользователя(БизнесПроцесс) Экспорт
	
	Возврат лм_БизнесПроцессыПереопределяемый.ЗадачиТекущегоПользователя(БизнесПроцесс);
	
КонецФункции

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

Функция ПредметСтрокой(СсылкаНаПредмет) Экспорт
	
	Возврат ОбщегоНазначения.ПредметСтрокой(СсылкаНаПредмет);
	
КонецФункции

Процедура ПриЗаполненииДанныхСправочникаНСИ(ДанныеСправочникаНСИ, Предмет, СтруктураДанных) Экспорт
	лм_БизнесПроцессыПереопределяемый.ПриЗаполненииДанныхСправочникаНСИ(ДанныеСправочникаНСИ, Предмет, СтруктураДанных);
КонецПроцедуры

Функция ПолучитьСписокШаблоновДляЗапускаПодпроцесса(ТипЗначения) Экспорт
	
	СписокРезультат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_ШаблоныБизнесПроцессов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.лм_ШаблоныБизнесПроцессов КАК лм_ШаблоныБизнесПроцессов
	               |		ПО лм_ШаблоныБизнесПроцессовПредметы.Ссылка = лм_ШаблоныБизнесПроцессов.Ссылка
	               |ГДЕ
	               |	лм_ШаблоныБизнесПроцессов.Статус = ЗНАЧЕНИЕ(Перечисление.лм_СтатусыШаблонов.Активен)
	               |	И лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета = &ТипПредмета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	лм_ШаблоныБизнесПроцессов.Ссылка";
	
	ТипПредмета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗначения);
	Запрос.УстановитьПараметр("ТипПредмета", ТипПредмета); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокРезультат.Добавить(Выборка.Ссылка);	
	КонецЦикла;
	
	Возврат СписокРезультат;
			
КонецФункции

Функция СоздатьБизнесПроцессПоШаблону(Шаблон) Экспорт
	
	Возврат лм_БизнесПроцессы.СоздатьБизнесПроцессПоШаблону(Шаблон);
	
КонецФункции

Функция ПолучитьСсылкуПоКоду(ИмяОбъекта, Код) Экспорт
	
	МассивПодстрок = СтрРазделить(ИмяОбъекта, ".", Ложь);
	
	Если МассивПодстрок[0] = "Справочники" Тогда
		МенеджерОбъекта = Справочники;	
	ИначеЕсли МассивПодстрок[0] = "ПланыВидовХарактеристик" Тогда
		МенеджерОбъекта = ПланыВидовХарактеристик;
	КонецЕсли;
		
	Результат = МенеджерОбъекта[МассивПодстрок[1]].НайтиПоКоду(Код);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРеквизитыПоКоду(ИмяОбъекта, Код, Реквизиты) Экспорт
	
	СсылкаОбъекта = ПолучитьСсылкуПоКоду(ИмяОбъекта, Код);
	Результат     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаОбъекта, Реквизиты);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьМассивДоступныхТиповДляПодпроцессов() Экспорт
	
	МассивРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета КАК ТипПредмета
	               |ИЗ
	               |	Справочник.лм_ШаблоныБизнесПроцессов КАК лм_ШаблоныБизнесПроцессов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
	               |		ПО лм_ШаблоныБизнесПроцессов.Ссылка = лм_ШаблоныБизнесПроцессовПредметы.Ссылка
	               |ГДЕ
	               |	лм_ШаблоныБизнесПроцессов.Статус = ЗНАЧЕНИЕ(Перечисление.лм_СтатусыШаблонов.Активен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТипПредмета = Выборка.ТипПредмета.ПолноеИмя;
		МассивПодстрок = СтрРазделить(СтрокаТипПредмета, ".", Ложь);			
		ТипПредмета = Тип(МассивПодстрок[0] + "Ссылка." + МассивПодстрок[1]);
		МассивРезультат.Добавить(ТипПредмета);
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхПредметаИзПараметров(Задача) Экспорт
	
	Результат   = Новый Структура;	
	ПараметрыБП = лм_БизнесПроцессы.ПолучитьОбщиеПараметрыБизнесПроцесса(Задача.БизнесПроцесс);
	
	Если ТипЗнч(ПараметрыБП) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПараметрыБП.Свойство("ДанныеПредметовЗадачMDM") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеПредметов     = ПараметрыБП.ДанныеПредметовЗадачMDM;	
	ИдентификаторЗадачи = Задача.УникальныйИдентификатор();
	
	Если ДанныеПредметов[ИдентификаторЗадачи] <> Неопределено Тогда
		Возврат ДанныеПредметов[ИдентификаторЗадачи];		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуПорядкаАтрибутовПоКлассификатору(КГ, ВариантСортировки) Экспорт
	
	//Атрибуты = РаботаСАтрибутамиВызовСервера.ТЗАтрибутовОбъектаСУровнемНаследования(КГ, ВариантСортировки);
	//
	//Возврат Атрибуты.ВыгрузитьКолонку("Атрибут");
	
КонецФункции

#КонецОбласти