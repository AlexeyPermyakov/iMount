&НаКлиенте
Перем ОткрытаФормаВыбораИсполнителя;  // Признак того, что исполнитель выбирается из формы, а не быстрым вводом.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("ДанныеЭлемента") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		ДополнитьФормуНастройкамиПочтовыхОповещений();			
	КонецЕсли;
	
	ДанныеЭлемента = Параметры.ДанныеЭлемента;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЭлемента);
	
	КлючСохраненияПоложенияОкна = Строка(Пользователи.ТекущийПользователь().УникальныйИдентификатор()) + "_" + Строка(ТипЭлемента);
	
	Для Каждого ГруппаСвойствПоТипу Из Элементы.СвойстваПоТипуТочки.ПодчиненныеЭлементы Цикл
		ГруппаСвойствПоТипу.Видимость = Ложь;
	КонецЦикла;
	
	Если ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаВыбора Тогда
		Элементы.СвойстваТочкиВыбора.Видимость = Истина;
		
	ИначеЕсли ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаДействия Тогда
		// НачалоЗамераПроизводительности
НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
// Конец НачалоЗамераПроизводительности
		Элементы.СвойстваТочкиДействия.Видимость = Истина;
		Элементы.Групповая.Доступность = (ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"));
		ЗаполнитьТаблицуНастройкиОтображенияРеквизитов(Параметры.ДанныеЭлемента);	
		ЗаполнитьРасширенныеНастройки(Параметры.ДанныеЭлемента.РасширенныеНастройки);
		Элементы.РасширенныеНастройки.Видимость = ?(ТаблицаРасширенныхНастроек.Количество() = 0, Ложь, Истина);
		Элементы.ГруппаРасширенныеНастройки.Видимость = ?(лм_БизнесПроцессыКлиентСервер.РасширенныеНастройкиФормТочекДействия().Количество() > 1, Истина, Ложь);
		Если Параметры.ДанныеЭлемента.ВремяВыполнения <> Неопределено Тогда
			ВремяВыполненияЧасы   = Цел(Параметры.ДанныеЭлемента.ВремяВыполнения/60);
			ВремяВыполненияМинуты = Параметры.ДанныеЭлемента.ВремяВыполнения - ВремяВыполненияЧасы * 60;
		КонецЕсли;
		// ЗавершениеЗамераПроизводительности
ОценкаПроизводительности.ЗакончитьЗамерВремени("Бизнес-процесс.ОткрытиеФормыТочкиДействия", НачалоЗамера);
// Конец ЗавершениеЗамераПроизводительности		
	ИначеЕсли ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаЗавершения Тогда
		Элементы.СвойстваТочкиЗавершения.Видимость = Истина;
		
	ИначеЕсли ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаОбработки Тогда
		Элементы.СвойстваТочкиОбработки.Видимость = Истина;
		ЗаполнитьСписокДоступныхДействий();
		АдресСоответствияНастроекДействий = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ЗаполнитьДействияОбработки(ДанныеЭлемента.ДействияОбработки);
		ЗаполнитьТаблицуПараметров("ПараметрыТочкиОбработки", ДанныеЭлемента.ПараметрыОбработки);
		ЗаполнитьТаблицуПараметров("ПараметрыШаблонаБП", ДанныеЭлемента.ПараметрыШаблона);
		ТипыПредметов.ЗагрузитьЗначения(ДанныеЭлемента.ТипыПредметов);
		ПараметрыОбъекты.ЗагрузитьЗначения(ДанныеЭлемента.ПараметрыОбъекты);
		
	ИначеЕсли ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаПодпроцесса Тогда
		Элементы.СвойстваТочкиПодпроцесса.Видимость = Истина;
		
	ИначеЕсли ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаРазделения Тогда
		Элементы.СвойстваТочкиРазделения.Видимость = Истина;
		
	ИначеЕсли ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаСлияния Тогда
		Элементы.СвойстваТочкиСлияния.Видимость = Истина;
		
	ИначеЕсли ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаСтарта Тогда
		Элементы.СвойстваТочкиСтарта.Видимость = Истина;
		
	ИначеЕсли ТипЭлемента = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаУсловия Тогда
		Элементы.СвойстваТочкиУсловия.Видимость = Истина;
		СформироватьНастройкиУсловия(ДанныеЭлемента.ДанныеУсловия);
		
	ИначеЕсли ТипЭлемента = "Линия" Тогда
		Элементы.СвойстваЛинии.Видимость = Истина;
		Если ДанныеЭлемента.ЭтоДействие Тогда
			СписокВыбора = Элементы.ИконкаДействия.СписокВыбора;
			Для Каждого ОбъектМетаданных Из Метаданные.ОбщиеКартинки Цикл
				СписокВыбора.Добавить(
					ОбъектМетаданных.Имя,
					ОбъектМетаданных.Синоним,
					,
					БиблиотекаКартинок[ОбъектМетаданных.Имя]);
			КонецЦикла;
			Элементы.НаименованиеЛинии.АвтоОтметкаНезаполненного = Истина;	
		Иначе
			Элементы.ИконкаДействия.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

	ТипЭлементаСтрокой = Строка(ТипЭлемента);
	Если НЕ ПустаяСтрока(НаименованиеЭлемента) Тогда
		Заголовок = НаименованиеЭлемента + " (" + ТипЭлементаСтрокой  + ")";
	Иначе
		Заголовок = ТипЭлементаСтрокой;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы
	
&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Если ОткрытаФормаВыбораИсполнителя = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(Исполнитель) Тогда 
		
		Если ИспользуетсяСОбъектамиАдресации(Исполнитель) Тогда 
			
			КонтекстВыбора = "ИсполнительПриИзменении";
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", Исполнитель);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
			
			Возврат;
			
		КонецЕсли;
		
		Элементы.Групповая.Доступность = Истина;
	Иначе
		Групповая = Ложь;
		Элементы.Групповая.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Исполнитель) <> Тип("Строка") Тогда
		ЗначениеАвтоподстановки = "";
	КонецЕсли;
	
КонецПроцедуры		

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйИсполнитель = ?(ЗначениеЗаполнено(ЗначениеАвтоподстановки), ЗначениеАвтоподстановки, Исполнитель);
	лм_БизнесПроцессыКлиент.ВыбратьИсполнителя(Элемент, ВыбранныйИсполнитель, Шаблон);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОткрытаФормаВыбораИсполнителя = ТипЗнч(ВыбранноеЗначение) = Тип("Структура");
	Если ОткрытаФормаВыбораИсполнителя Тогда
		СтандартнаяОбработка = Ложь;
		Если ВыбранноеЗначение.Свойство("РольИсполнителя") Тогда
			Исполнитель = ВыбранноеЗначение.РольИсполнителя;
			ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
			Модифицированность = Истина;
		Иначе
			Исполнитель = ВыбранноеЗначение.Представление;
			ЗначениеАвтоподстановки = ВыбранноеЗначение.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Исполнитель) <> Тип("Строка") Тогда
		ЗначениеАвтоподстановки = "";
	КонецЕсли;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Элементы.Групповая.Доступность = Истина;
	Иначе
		Групповая = Ложь;
		Элементы.Групповая.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияТочкиОбработкиТипДействияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДействияТочкиОбработки.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипДействия) Тогда
		ТекущиеДанные.НастройкаДоступна = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияТочкиОбработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныеДанные = ДействияТочкиОбработки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ДействияТочкиОбработкиНастройки" 
			И ВыбранныеДанные.НастройкаДоступна Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", ВыбраннаяСтрока);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаполненияНастроекДействияОбработки", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Наименование", ВыбранныеДанные.Наименование);
		ПараметрыФормы.Вставить("ТипДействия", ВыбранныеДанные.ТипДействия);
		СоответствиеНастроекДействийОбработки = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекДействий);
		ПараметрыФормы.Вставить("Настройки", СоответствиеНастроекДействийОбработки.Получить(ВыбраннаяСтрока));
		ПараметрыФормы.Вставить("ПараметрыОбработки", СформироватьСтруктуруПараметров("ПараметрыТочкиОбработки"));
		ПараметрыФормы.Вставить("ПараметрыШаблона", СформироватьСтруктуруПараметров("ПараметрыШаблонаБП"));
		ПараметрыФормы.Вставить("Шаблон", Шаблон);
		ПараметрыФормы.Вставить("ТипыПредметов", ТипыПредметов.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ПараметрыОбъекты", ПараметрыОбъекты.ВыгрузитьЗначения());
		
		ИмяФормыНастроек = лм_БизнесПроцессыКлиентСервер.ФормаНастройкиДействияОбработки(ВыбранныеДанные.ТипДействия);
		Если ЗначениеЗаполнено(ИмяФормыНастроек) Тогда
			ОткрытьФорму(ИмяФормыНастроек, ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияНастроекДействияОбработки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СоответствиеНастроекДействийОбработки = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекДействий);
		СоответствиеНастроекДействийОбработки.Вставить(ДополнительныеПараметры.ИдентификаторСтроки, Результат);
		ПоместитьВоВременноеХранилище(СоответствиеНастроекДействийОбработки, АдресСоответствияНастроекДействий);
		
		ДанныеДействия = ДействияТочкиОбработки.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если ДанныеДействия.ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.СозданиеОбъекта") 
				И ПараметрыОбъекты.НайтиПоЗначению(Результат.ИмяПараметра) = Неопределено Тогда
			ПараметрыОбъекты.Добавить(Результат.ИмяПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормыНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		НовыйИдентификаторРасширеннойНастройки = Новый УникальныйИдентификатор(ВыбранноеЗначение); 
		РасширенныеНастройки              = лм_БизнесПроцессыКлиентСервер.РасширенныеНастройкиФормТочекДействия();
		Отбор                             = Новый Структура("Идентификатор", ВыбранноеЗначение);
		СтрокиОтбора                      = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(РасширенныеНастройки, Отбор);
		ВыбранноеЗначение                 = СтрокиОтбора[0].Наименование;			
		Если НовыйИдентификаторРасширеннойНастройки <> ИдентификаторРасширеннойНастройки Тогда
			ИдентификаторРасширеннойНастройки = НовыйИдентификаторРасширеннойНастройки;			
			ОбновитьРеквизитыРасширеннойНастройки();
		КонецЕсли;
		Элементы.РасширенныеНастройки.Видимость = ?(ТаблицаРасширенныхНастроек.Количество() = 0, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиВидимость(Команда)
	
	Для Каждого Стр Из НастройкиОтображенияРеквизитов Цикл
		Стр.Видимость = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВидимость(Команда)
	
	Для Каждого Стр Из НастройкиОтображенияРеквизитов Цикл
		Стр.Видимость = 1;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоУмолчанию(Команда)
	
	Для Каждого Стр Из НастройкиОтображенияРеквизитов Цикл
		Стр.Видимость = 2;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ДанныеЭлемента = лм_БизнесПроцессыКлиентСервер.СтруктураЭлементаКартыМаршрута();	
	ЗаполнитьЗначенияСвойств(ДанныеЭлемента, ЭтаФорма);
	
	Если ТипЭлемента = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаУсловия") Тогда
		ДанныеЭлемента.ДанныеУсловия = ПолучитьНастройкиКомпоновщика();
	ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаДействия") Тогда
		ДанныеЭлемента.НастройкиОтображения = ПолучитьНастройкиОтображения();
		ДанныеЭлемента.РасширенныеНастройки = ПолучитьРасширенныеНастройки();
		ДанныеЭлемента.ВремяВыполнения      = ВремяВыполненияЧасы * 60 + ВремяВыполненияМинуты;
	ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаОбработки") Тогда
		МассивОшибок = Новый Массив();
		ЕстьОшибки = Ложь;
		ДанныеЭлемента.ДействияОбработки = СформироватьДействияОбработки(МассивОшибок);
		Если МассивОшибок.Количество() Тогда 
			Для Каждого ТекстОшибки Из МассивОшибок Цикл
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецЦикла;
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		МассивОшибок.Очистить();
		ДанныеЭлемента.ПараметрыОбработки = СформироватьСтруктуруПараметров("ПараметрыТочкиОбработки", МассивОшибок);
		Если МассивОшибок.Количество() Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Некорректные имена параметров: " + СтрСоединить(МассивОшибок, ", ") + "." + Символы.ПС 
				+ "Имя параметра может содержать только буквы, цифры и символ подчеркивания, и не может начинаться с цифры.";
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки = Истина Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = "Линия"
			И ЭтоДействие = Истина Тогда
		Если НЕ ЗначениеЗаполнено(НаименованиеЭлемента) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнено наименование перехода";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Закрыть(ДанныеЭлемента);
		
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьФормуНастройкамиПочтовыхОповещений()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений") Тогда
	
		ГруппаНастройкиОповещений      = ЭтаФорма.Элементы.Найти("ГруппаНастройкиОповещений");	
		ИмяРеквизитаШаблон             = "ШаблонСообщения";
		ИмяРеквизитаИспользовать       = "ИспользоватьПочтовыеОповещения";
		МассивРеквизитов               = Новый Массив;		
		ШаблонСообщения                = Новый РеквизитФормы(ИмяРеквизитаШаблон, Новый ОписаниеТипов("СправочникСсылка.ШаблоныСообщений"));
		МассивРеквизитов.Добавить(ШаблонСообщения);
		ИспользоватьПочтовыеОповещения = Новый РеквизитФормы(ИмяРеквизитаИспользовать, Новый ОписаниеТипов("Булево"));
		МассивРеквизитов.Добавить(ИспользоватьПочтовыеОповещения);	
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		
		НовыйЭлемент             = ЭтаФорма.Элементы.Вставить(ИмяРеквизитаИспользовать, Тип("ПолеФормы"), ГруппаНастройкиОповещений);
		НовыйЭлемент.Вид         = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.Заголовок   = "Использовать почтовые оповещения";
		НовыйЭлемент.ПутьКДанным = ИмяРеквизитаИспользовать;
			
		НовыйЭлемент             = ЭтаФорма.Элементы.Вставить(ИмяРеквизитаШаблон, Тип("ПолеФормы"), ГруппаНастройкиОповещений);
		НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок   = "Шаблон сообщения";
		НовыйЭлемент.ПутьКДанным = ИмяРеквизитаШаблон;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяСОбъектамиАдресации(ПроверяемыйОбъект)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйОбъект, "ИспользуетсяСОбъектамиАдресации");
	
КонецФункции

&НаСервере
Процедура СформироватьНастройкиУсловия(ДанныеУсловия)
	
	АдресСхемыКомпоновкиДанных = лм_БизнесПроцессы.ПолучитьСхемуКомпоновкиДанныхСтруктуры(Шаблон, УникальныйИдентификатор);
	Если ПустаяСтрока(АдресСхемыКомпоновкиДанных) Тогда
		Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь;
	Иначе
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		Если ДанныеУсловия <> Неопределено 
			И ТипЗнч(ДанныеУсловия) = Тип("НастройкиКомпоновкиДанных") Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеУсловия);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДействияОбработки(МассивОшибок)
	
	ДействияОбработки = Новый Массив();
	СоответствиеНастроекДействийОбработки = ПолучитьИзВременногоХранилища(АдресСоответствияНастроекДействий);
	
	Для ИндексСтроки = 0 По ДействияТочкиОбработки.Количество() - 1 Цикл
		СтрокаДействия = ДействияТочкиОбработки.Получить(ИндексСтроки);
		ИдентификаторСтроки = СтрокаДействия.ПолучитьИдентификатор();
		Если ЗначениеЗаполнено(СтрокаДействия.ТипДействия) Тогда
			НастройкаДействия = СоответствиеНастроекДействийОбработки.Получить(ИдентификаторСтроки);
			лм_БизнесПроцессыКлиентПереопределяемый.ПриПолученииНастроекДействияТочкиОбработки(СтрокаДействия.ТипДействия, НастройкаДействия);
			Если НастройкаДействия <> Неопределено Тогда
				СтруктураДействия = Новый Структура();
				СтруктураДействия.Вставить("Порядок", 		ИндексСтроки + 1);
				СтруктураДействия.Вставить("Наименование",	СтрокаДействия.Наименование);
				СтруктураДействия.Вставить("ТипДействия",	СтрокаДействия.ТипДействия);
				СтруктураДействия.Вставить("Настройка",		НастройкаДействия);
				ДействияОбработки.Добавить(СтруктураДействия);
			Иначе
				ТекстОшибки = "Не заполнены настройки действия """;
				Если ЗначениеЗаполнено(СтрокаДействия.Наименование) Тогда
					ТекстОшибки = ТекстОшибки + СтрокаДействия.Наименование;
				Иначе 
					ТекстОшибки = ТекстОшибки + СтрокаДействия.ТипДействия;
				КонецЕсли;
				ТекстОшибки = ТекстОшибки + """";
				МассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДействияОбработки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДействияОбработки(ДействияОбработки)
	
	ДействияТочкиОбработки.Очистить();
	СоответствиеНастроекДействийОбработки = Новый Соответствие();
	
	Если ДействияОбработки <> Неопределено Тогда
		Для Каждого СтруктураДействия Из ДействияОбработки Цикл
			СтрокаДействия = ДействияТочкиОбработки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДействия, СтруктураДействия);
			СтрокаДействия.НастройкаДоступна = Истина;
			СоответствиеНастроекДействийОбработки.Вставить(СтрокаДействия.ПолучитьИдентификатор(), СтруктураДействия.Настройка);
		КонецЦикла;
		ДействияТочкиОбработки.Сортировать("Порядок");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СоответствиеНастроекДействийОбработки, АдресСоответствияНастроекДействий);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНастройкиОтображенияРеквизитов(ДанныеЭлемента)
	
	ИдентификаторСтруктуры = Шаблон.Ссылка.УникальныйИдентификатор();
	
	УстановитьПривилегированныйРежим(Истина);
	УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
	УстановитьПривилегированныйРежим(Ложь);
	
	СоответствиеНастроек = Новый Соответствие;
	Если ДанныеЭлемента.Свойство("НастройкиОтображения") И ДанныеЭлемента.НастройкиОтображения <> Неопределено Тогда
		Для Каждого Настройка Из ДанныеЭлемента.НастройкиОтображения Цикл
			СоответствиеНастроек.Вставить(Настройка.ИдентификаторРеквизита, Настройка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		Настройка = Неопределено;
		Если ДанныеЭлемента.Свойство("НастройкиОтображения") И ДанныеЭлемента.НастройкиОтображения <> Неопределено Тогда
			Настройка = СоответствиеНастроек[Реквизит.Идентификатор];
		КонецЕсли;
		
		Стр                        = НастройкиОтображенияРеквизитов.Добавить();
		Стр.ИмяРеквизита           = Реквизит.ИмяПоля;
		Стр.СинонимРеквизита       = Реквизит.Синоним;
		Стр.ИдентификаторРеквизита = Реквизит.Идентификатор;
		
		Если Настройка <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Стр, Настройка);
		Иначе
			Стр.Видимость      = 2;
			Стр.Доступность    = 2;
			Стр.Обязательность = 2;
			Стр.ТолькоПросмотр = 0;
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасширенныеНастройки(РасширенныеНастройки)
	
	Если РасширенныеНастройки <> Неопределено Тогда
		ИдентификаторРасширеннойНастройки = РасширенныеНастройки.Идентификатор;	
	КонецЕсли;
	
	МассивРасширенныхНастроек = лм_БизнесПроцессыКлиентСервер.РасширенныеНастройкиФормТочекДействия();
	
	Для Каждого Настройка Из МассивРасширенныхНастроек Цикл
		Элементы.НастройкаФормыНаименование.СписокВыбора.Добавить(Настройка.Идентификатор, Настройка.Наименование);
		Если Настройка.Идентификатор = Строка(ИдентификаторРасширеннойНастройки) Тогда
			РасширеннаяНастройкаНаименование = Настройка.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьРеквизитыРасширеннойНастройки();
	
	Если РасширенныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого Стр Из ТаблицаРасширенныхНастроек Цикл
		Для Каждого Реквизит Из РасширенныеНастройки.Реквизиты Цикл
			Если Стр.Имя = Реквизит.Имя Тогда
				Стр.Значение = Реквизит.Значение;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыРасширеннойНастройки()
	
	ТаблицаРасширенныхНастроек.Очистить();
	РасширенныеНастройки = лм_БизнесПроцессыКлиентСервер.РасширенныеНастройкиФормТочекДействия();
	Отбор = Новый Структура("Идентификатор", Строка(ИдентификаторРасширеннойНастройки));
	
	СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(РасширенныеНастройки, Отбор);
	
	Если СтрокиОтбора.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
		
	Для Каждого Реквизит Из СтрокиОтбора[0].Реквизиты Цикл
		Стр = ТаблицаРасширенныхНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Реквизит);
		Если Реквизит.ЗначениеПоУмолчанию <> Неопределено Тогда
			Стр.Значение = Реквизит.ЗначениеПоУмолчанию;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхДействий()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_ТипыДействийТочкиОбработки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Перечисление.лм_ТипыДействийТочкиОбработки КАК лм_ТипыДействийТочкиОбработки
	               |ГДЕ
	               |	НЕ лм_ТипыДействийТочкиОбработки.Ссылка В (&НедоступныеДействия)";
    НедоступныеДействия = Новый Массив();
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("лм_ЗахватОбъектов") Тогда
		НедоступныеДействия.Добавить(Перечисления.лм_ТипыДействийТочкиОбработки.БлокировкаОбъекта);
		НедоступныеДействия.Добавить(Перечисления.лм_ТипыДействийТочкиОбработки.РазблокировкаОбъекта);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений") Тогда
			НедоступныеДействия.Добавить(Перечисления.лм_ТипыДействийТочкиОбработки.ОтправкаПочтовогоСообщения);
		КонецЕсли;
	Иначе
		НедоступныеДействия.Добавить(Перечисления.лм_ТипыДействийТочкиОбработки.ОтправкаПочтовогоСообщения);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НедоступныеДействия", НедоступныеДействия);
	ДоступныеДействия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Элементы.ДействияТочкиОбработкиТипДействия.СписокВыбора.ЗагрузитьЗначения(ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруПараметров(ИмяРеквизита, МассивОшибок = Неопределено)
	
	Если МассивОшибок = Неопределено Тогда
		МассивОшибок = Новый Массив();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	Для Каждого СтрокаПараметра Из ЭтаФорма[ИмяРеквизита] Цикл
		ИмяПараметра = СтрокаПараметра.ИмяПараметра;
		Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
			Если лм_СтроковыеФункцииКлиентСервер.ЭтоВалидныйИдентификатор(ИмяПараметра) Тогда
				СтруктураПараметров.Вставить(ИмяПараметра);
			Иначе
				МассивОшибок.Добавить(ИмяПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПараметров(ИмяРеквизита, СтруктураПараметров)
	
	ТаблицаПараметров = ЭтаФорма[ИмяРеквизита];
	ТаблицаПараметров.Очистить();
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			СтрокаПараметра = ТаблицаПараметров.Добавить();
			СтрокаПараметра.ИмяПараметра = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиКомпоновщика()
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиОтображения()
	
	МассивРезультат = Новый Массив;
	
	Для Каждого СтрТЗ Из НастройкиОтображенияРеквизитов Цикл
		Если СтрТЗ.Видимость = 2 И СтрТЗ.Доступность = 2 И СтрТЗ.Обязательность = 2 И СтрТЗ.ТолькоПросмотр = 0 Тогда
			Продолжить;
		КонецЕсли;
		стрНастройка = Новый Структура("ИмяРеквизита,ИдентификаторРеквизита,Видимость,Доступность,ТолькоПросмотр,Обязательность");
		ЗаполнитьЗначенияСвойств(стрНастройка, СтрТЗ);
		МассивРезультат.Добавить(стрНастройка);
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРасширенныеНастройки()
	
	стРезультат = Новый Структура;
	стРезультат.Вставить("Идентификатор", ИдентификаторРасширеннойНастройки);
	
	МассивРеквизитов = Новый Массив;
	Если ЗначениеЗаполнено(стРезультат.Идентификатор) Тогда
		РасширенныеНастройки = лм_БизнесПроцессыКлиентСервер.РасширенныеНастройкиФормТочекДействия();
		Отбор                = Новый Структура("Идентификатор", Строка(стРезультат.Идентификатор));
		СтрокиОтбора         = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(РасширенныеНастройки, Отбор);
		Реквизиты            = СтрокиОтбора[0].Реквизиты;
		
		Для Каждого Реквизит Из Реквизиты Цикл
			ОтборРеквизита = Новый Структура("Имя", Реквизит.Имя);
			СтрокиОтбора   = ТаблицаРасширенныхНастроек.НайтиСтроки(ОтборРеквизита);
			Если СтрокиОтбора[0].Значение <> Реквизит.ЗначениеПоУмолчанию Тогда
				стРеквизит = Новый Структура("Имя,Значение");
				ЗаполнитьЗначенияСвойств(стРеквизит, СтрокиОтбора[0]);
				МассивРеквизитов.Добавить(стРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
			
	стРезультат.Вставить("Реквизиты", МассивРеквизитов);
	
	Возврат стРезультат;
	
КонецФункции

#КонецОбласти

