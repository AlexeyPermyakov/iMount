
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает тип значений показателя для приведения значения.
//
// Параметры:
//  ТипЗначенияПеречисление	 - ПеречислениеСсылка.гисПоказателиТипы - тип значений показателя;
//  СправочникИмя			 - Строка - имя справочника для значений показателя, нужен, когда тип - СправочникСсылка.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - тип, чтобы приводить значение.
//
Функция ПолучитьТипЗначения(ТипЗначенияПеречисление, СправочникИмя) Экспорт
	ТипЗначения = Новый ОписаниеТипов("Неопределено");
	Если ТипЗначенияПеречисление = Перечисления.гисПоказателиТипы.Число Тогда
		ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 4));
	ИначеЕсли ТипЗначенияПеречисление = Перечисления.гисПоказателиТипы.Булево Тогда
		ТипЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли ТипЗначенияПеречисление = Перечисления.гисПоказателиТипы.Справочник И ЗначениеЗаполнено(СправочникИмя) Тогда
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка." + СправочникИмя);
	КонецЕсли;
	Возврат ТипЗначения;
КонецФункции

// Возвращает таблицу правил раскраски значений показателя по слою.
//
// Параметры:
//  ПоказательСсылка - СправочникСсылка.гисПоказатели - показатель, по которому берутся значения;
//  Слой			 - СправочникСсылка.гисСлоиКарты - слой, по которому идет раскраска.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - раскраска значений показателя по слою.
//
Функция ПолучитьРаскраску(ПоказательСсылка, Слой) Экспорт
	Раскраска = Новый ТаблицаЗначений;
	Раскраска.Колонки.Добавить("НомерСтроки");
	Раскраска.Колонки.Добавить("Цвет");
	Раскраска.Колонки.Добавить("ЗначениеОт");
	Раскраска.Колонки.Добавить("ЗначениеДо");
	Раскраска.Колонки.Добавить("Подпись");
	
	Показатель = ПоказательСсылка.ПолучитьОбъект();
	СтрокаСлоя = Показатель.СлоиКарты.Найти(Слой, "СлойКарты");
	Если СтрокаСлоя <> Неопределено Тогда
		Строки = Показатель.ЦветаПоказателей.НайтиСтроки(Новый Структура("КлючСтрокиСлоиКарты", СтрокаСлоя.КлючСтроки));
		НомерСтроки = 1;
		Для Каждого Строка Из Строки Цикл
			НоваяСтрока = Раскраска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Цвет = Строка.Цвет.Получить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Раскраска;
КонецФункции

// Возвращает список слоев для показателя, по которым настроена легенда.
//
// Параметры:
//  Показатель	 - СправочникСсылка.гисПоказатели - показатель, по которому нужно получить слои с настроенной легендой.
// 
// Возвращаемое значение:
//   - СписокЗначений - элементы типа СправочникСсылка.гисСлоиКарты.
//
Функция ПолучитьДоступныеСлои(Показатель) Экспорт
	Массив = Показатель.СлоиКарты.Выгрузить().ВыгрузитьКолонку("СлойКарты");
	СписокСлоев = Новый СписокЗначений;
	СписокСлоев.ЗагрузитьЗначения(Массив);
	Возврат СписокСлоев;
КонецФункции

// Возвращает список показателей, по которым настроена легенда для указанного слоя.
//
// Параметры:
//  СлойКарты	- СправочникСсылка.гисСлоиКарты - слой, по которому нужно получить показатели с настроенной легендой.
// 
// Возвращаемое значение:
//   - СписокЗначений - элементы типа СправочникСсылка.гисПоказатели.
//
Функция ПолучитьДоступныеПоказатели(СлойКарты) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.гисПоказатели.СлоиКарты ГДЕ СлойКарты = &СлойКарты");
	Запрос.УстановитьПараметр("СлойКарты", СлойКарты);
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.ЗагрузитьЗначения(Массив);
	Возврат СписокПоказателей;
КонецФункции

// Возвращает цвет, который подходит по значению показателя для слоя.
//
// Параметры:
//  Показатель	 - СправочникСсылка.гисПоказатели - показатель, по которому требуется получить цвет;
//  Слой		 - СправочникСсылка.гисСлоиКарты - слой, по которому требуется получить цвет;
//  Значение	 - Число,Булево,СправочникСсылка - значение показателя.
// 
// Возвращаемое значение:
//   - Неопределено - ни одно правило раскраски не подошло;
//	 - Цвет - цвет, который подходит по правилам раскраски.
//
Функция ПолучитьЦвет(Показатель, Слой, Значение) Экспорт
	Таблица = ПолучитьРаскраску(Показатель, Слой);
	
	Если Не ЗначениеЗаполнено(Показатель) Или Значение = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Цвет = Неопределено;
	
	ЦветНайден = Ложь;
	НомерСтроки = 0;
	Пока Не ЦветНайден И НомерСтроки < Таблица.Количество() Цикл
		Если (Показатель.ТипЗначения = Перечисления.гисПоказателиТипы.Число И Таблица[НомерСтроки].ЗначениеОт <= Значение
			И Таблица[НомерСтроки].ЗначениеДо >= Значение) Или
			((Показатель.ТипЗначения = Перечисления.гисПоказателиТипы.Булево Или Показатель.ТипЗначения = Перечисления.гисПоказателиТипы.Справочник) И 
			Таблица[НомерСтроки].ЗначениеОт = Значение)  Тогда
			
			Цвет = Таблица[НомерСтроки].Цвет;
			ЦветНайден = Истина;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат Цвет;
КонецФункции

// Возвращает шаблон всплывающего сообщения для пары показатель - слой карты.
//
// Параметры:
//  Показатель	 - СправочникСсылка.гисПоказатели - показатель, для которого берется сообщение.
//  Слой		 - СправочникСсылка.гисСлоиКарты - слой, для которого берется сообщение.
// 
// Возвращаемое значение:
//   - Строка - шаблон для всплывающего сообщения для тематики по показателю для слоя.
//
Функция ПолучитьВсплывающееСообщение(Показатель, Слой) Экспорт
	ВсплывающееСообщение = "[Значение]";
	
	Строка = Показатель.СлоиКарты.Найти(Слой, "СлойКарты");
	Если Строка <> Неопределено И ЗначениеЗаполнено(Строка.ВсплывающееСообщение) Тогда
		ВсплывающееСообщение = Строка.ВсплывающееСообщение;
	КонецЕсли;
	
	Возврат ВсплывающееСообщение;
КонецФункции

// Возвращает начало периода для показателя. Нужно при построении тематики.
//
// Параметры:
//  Показатель		 - Справочники.гисПоказатели - показатель, для которого нужен период.
//  ДатаОкончания	 - Дата - дата построения тематики.
// 
// Возвращаемое значение:
//   - Дата - дата начала периода.
//
Функция ПолучитьНачалоПериода(Показатель, ДатаОкончания) Экспорт
	ДатаНачала = Дата("00010101");
	
	Если ЗначениеЗаполнено(Показатель.Периодичность) Тогда
		Если Показатель.Периодичность = Перечисления.гисПоказателиПериодичность.Год Тогда
			ДатаНачала = НачалоГода(ДатаОкончания);
		ИначеЕсли Показатель.Периодичность = Перечисления.гисПоказателиПериодичность.Квартал Тогда
			ДатаНачала = НачалоКвартала(ДатаОкончания);
		ИначеЕсли Показатель.Периодичность = Перечисления.гисПоказателиПериодичность.Месяц Тогда
			ДатаНачала = НачалоМесяца(ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаНачала;
КонецФункции

#КонецОбласти

#КонецЕсли
