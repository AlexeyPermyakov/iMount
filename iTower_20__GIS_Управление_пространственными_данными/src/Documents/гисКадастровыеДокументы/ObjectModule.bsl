
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет табличные части документа.
//
// Параметры:
//  ИмяФайлаНаСервере	 - Строка - имя файла, сохраненного а каталоге временных файлов на сервере.
//  Очищать				 - Булево - очищать ли табличные части.
//  ИзменятьЗаполненные	 - Булево - обновлять ли строки, в которых элемент справочника заполнен.
// 
// Возвращаемое значение:
//   Булево - Истина - ошибок не было.
//
Функция ЗаполнитьТабличныеЧасти(ИмяФайлаНаСервере, Очищать = Истина, ИзменятьЗаполненные = Ложь) Экспорт
	Если Очищать Тогда
		КадастровыеЗемельныеУчастки.Очистить();
	КонецЕсли;
	
	Если Не гисРаботаСКадастром.ПроверитьXmlНаКорректность(ИмяФайлаНаСервере) Тогда
		ВызватьИсключение "Некорректная xml!" + Символы.ПС + "Ошибка разбора xml!";
	КонецЕсли;
	
	Попытка
		Дата = гисРаботаСКадастром.ПолучитьДатуДокумента(ИмяФайлаНаСервере);
		
		// участки
		МассивДанныхXml = Новый Массив;
		РезультатКУ = гисРаботаСКадастром.ЗаполнитьМассивДанныхЗемельныеУчастки(ИмяФайлаНаСервере, ТипДокумента, МассивДанныхXml, Комментарий);
		
		Для Каждого ДанныеXml Из МассивДанныхXml Цикл
			НоваяСтрока = Неопределено;
			
			Если Не Очищать И Не ИзменятьЗаполненные Тогда
				Если КадастровыеЗемельныеУчастки.НайтиСтроки(Новый Структура("КадастровыйНомер", СокрЛП(ДанныеXml.КадастровыйНомер))).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Не Очищать И ИзменятьЗаполненные Тогда
				Строки = КадастровыеЗемельныеУчастки.НайтиСтроки(Новый Структура("КадастровыйНомер", СокрЛП(ДанныеXml.КадастровыйНомер)));
				Если Строки.Количество() > 0 Тогда
					НоваяСтрока = Строки[0];
				КонецЕсли;
			КонецЕсли;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = КадастровыеЗемельныеУчастки.Добавить();
			КонецЕсли;
			
			НоваяСтрока.ДанныеXml = гисРаботаСJson.ЗаписатьНативно(ДанныеXml);
			НоваяСтрока.КадастровыйНомер = СокрЛП(ДанныеXml.КадастровыйНомер);
			НоваяСтрока.КатегорияЗемель = Справочники.гисКатегорииЗемель.НайтиПоКоду(ДанныеXml.КатегорияЗемельКод);
			НоваяСтрока.ВидИспользования = Справочники.гисВидыРазрешенногоИспользования.НайтиПоКоду(ДанныеXml.ВидИспользованияКод);
			НоваяСтрока.Комментарий = ДанныеXml.Комментарий;
			
			МассивСистемКоординатКонтура = Новый Массив;
			Для Каждого СтрокаКонтуров Из ДанныеXml.Контуры Цикл
				Если ЗначениеЗаполнено(СтрокаКонтуров.СистемаКоординат) Тогда
					Если МассивСистемКоординатКонтура.Найти(СтрокаКонтуров.СистемаКоординат) = Неопределено Тогда
						МассивСистемКоординатКонтура.Добавить(СтрокаКонтуров.СистемаКоординат);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СистемаКоординат = "";
			Если МассивСистемКоординатКонтура.Количество() = 1 Тогда
				// если в земельном участке несколько систем координат - случай не рассматривается
				СистемаКоординат = МассивСистемКоординатКонтура[0];
			КонецЕсли;
			НоваяСтрока.СистемаКоординат = СистемаКоординат;
		КонецЦикла;
		
		// системы координат
		СистемыКоординатФайла = гисРаботаСJson.ЗаписатьНативно(гисРаботаСКадастром.ПолучитьСистемыКоординат(ИмяФайлаНаСервере, ТипДокумента));
	Исключение
		ВызватьИсключение "Ошибка при загрузке xml! Возможные пути решения:" + Символы.ПС + 
			"1) Попробуйте загрузить файл через ""Загрузка из xml"" -> ""Загрузить (авто определение типа документа)""" + Символы.ПС + 
			"2) Проверьте корректность xml" + Символы.ПС + Символы.ПС + "Информация для технической поддержки:" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат РезультатКУ;
КонецФункции

// земельные участки

// Очищает пустые строки в табличной части КадастровыеЗемельныеУчастки.
// Пустой считается строка, если у нее пустой реквизит "ДанныеXml" 
// или после распарсивания "ДанныеXml" из формата json свойство "Геометрия" получившегося объекта пустое.
//
Процедура ЗемельныеУчасткиОчиститьПустыеСтроки() Экспорт
	Массив = гисРаботаСКадастром.ЗемельныеУчасткиПолучитьМассивСвойствДата();
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого Строка Из КадастровыеЗемельныеУчастки Цикл
		Если Не ЗначениеЗаполнено(Строка.ДанныеXml) Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		Данные = гисРаботаСJson.ПрочитатьНативно(Строка.ДанныеXml, Массив);
		
		МассивУдаляемыхКонтуров = Новый Массив;
		Для НомерКонтура = 0 По Данные.Контуры.Количество() - 1 Цикл
			Если Не ЗначениеЗаполнено(Данные.Контуры[НомерКонтура].Геометрия) Тогда
				МассивУдаляемыхКонтуров.Добавить(НомерКонтура);
			КонецЕсли;
		КонецЦикла;
		НомерКонтура = МассивУдаляемыхКонтуров.Количество() - 1;
		Пока НомерКонтура >= 0 Цикл
			Данные.Контуры.Удалить(МассивУдаляемыхКонтуров[НомерКонтура]);
			НомерКонтура = НомерКонтура - 1;
		КонецЦикла;
		Строка.ДанныеXml = гисРаботаСJson.ЗаписатьНативно(Данные);
		
		Если Данные.Контуры.Количество() = 0 Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла;

	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		КадастровыеЗемельныеУчастки.Удалить(Строка);
	КонецЦикла;
КонецПроцедуры

// Во всех строках табличной части КадастровыеЗемельныеУчастки, в которых реквизит "ЗемельныйУчасток" не заполнен,
// заполняет этот реквизит элементом справочника "Кадастровые земельные участки", подобранным по кадастровому номеру.
//
Процедура ЗемельныеУчасткиПодобрать() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Справочник.гисКадастровыеЗемельныеУчастки ГДЕ НЕ ПометкаУдаления И КадастровыйНомер = &КадастровыйНомер");
	
	Для Каждого Строка Из КадастровыеЗемельныеУчастки Цикл
		Если ЗначениеЗаполнено(Строка.ЗемельныйУчасток) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КадастровыйНомер", Строка.КадастровыйНомер);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Строка.ЗемельныйУчасток = Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Если реквизит "ЗемельныйУчасток" заполнен - обновляет, иначе создает новый элемент справочника 
// "Кадастровые земельные участки".
// После создания нового элемента справочника заполняет его в реквизит "ЗемельныйУчасток".
// Данные для заполнения берет из реквизита-контейнера "ДанныеXml".
//
// Параметры:
//  Строка	 - СтрокаТабличнойЧасти - строка табличной части КадастровыеЗемельныеУчастки.
//
Процедура ЗемельныеУчасткиСоздатьОбновитьСтроку(Строка) Экспорт
	Если ЗначениеЗаполнено(Строка.ЗемельныйУчасток) Тогда
		Если ЗначениеЗаполнено(Строка.ЗемельныйУчасток.КадастровыйДокумент) И Ссылка <> Строка.ЗемельныйУчасток.КадастровыйДокумент И Дата < Строка.ЗемельныйУчасток.КадастровыйДокумент.Дата Тогда
			ВызватьИсключение "Земельные участки" + Символы.ПС + "Строка " + (Строка.НомерСтроки + 1) + "! Информация не обновлена! В системе имеются более актуальные данные!";
		КонецЕсли;
		ЗемельныйУчасток = Строка.ЗемельныйУчасток.ПолучитьОбъект();
	Иначе
		ЗемельныйУчасток = Справочники.гисКадастровыеЗемельныеУчастки.СоздатьЭлемент();
	КонецЕсли;
	
	ТаблицаПраваНаУчасток = ЗемельныйУчасток.ПолучитьТаблицуПраваНаУчасток();
	
	ЗемельныйУчасток.ЗаполнитьПоДаннымXml(Строка.ДанныеXml, Ссылка, Строка.ПараметрыПереводаВWgs84, ТаблицаПраваНаУчасток, Слой);
	Попытка
		ЗемельныйУчасток.Записать();
		ЗемельныйУчасток.СохранитьТаблицуПраваНаУчасток(ТаблицаПраваНаУчасток);
		Если Не ЗначениеЗаполнено(Строка.ЗемельныйУчасток) Тогда
			Строка.ЗемельныйУчасток = ЗемельныйУчасток.Ссылка;
		КонецЕсли;
	Исключение
		ВызватьИсключение "Земельные участки" + Символы.ПС + "Ошибка! Строка " + Строка.НомерСтроки + " не обновлена!" + Символы.ПС + 
			"Ошибка при записи земельного участка!" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли