////////////////////////////////////////////////////////////////////////////////
// Серверный модуль для работы с ключом.
// Основное назначение:
//  - проверка ключа защиты конфигурации.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверка лицензии сеанса.
//
// Параметры:
//  СообщениеОбОшибке	 - Строка - вернется текст ошибки, если таковая будет;
//  ПараметрыСвязи		 - Структура - необязательный. Структура с полями:
//		Адрес - строка - IP компьютера, на котором равернут СЛК-сервер;
//		Порт - число - порт для подключения к СЛК-серверу.
// 
// Возвращаемое значение:
//   - Булево - Истина в случае успешной проверки лицензии.
//
Функция ПроверитьЛицензиюСеанса(СообщениеОбОшибке, ПараметрыСвязи = Неопределено) Экспорт
	Попытка
		МенеджерОбъектов = МенеджерОбъектов(ПараметрыСвязи);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	ПроверкаПройдена = МенеджерОбъектов.ПопыткаПроверитьЛицензиюСеанса();
	Если Не ПроверкаПройдена Тогда
		СообщениеОбОшибке = МенеджерОбъектов.ПолучитьОписаниеОшибки();
	КонецЕсли;
	
	Возврат ПроверкаПройдена;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МенеджерОбъектов(ПараметрыСвязи = Неопределено, Режим = Ложь)
	// Подключение компоненты
	Если Не ПодключитьВнешнююКомпоненту("ОбщийМакет.гисСлкКомпонентаЗащиты", "Licence", ТипВнешнейКомпоненты.Native) Тогда
		ВызватьИсключение "Ошибка подключения компоненты СЛК";
	КонецЕсли;
	
	// Создание объекта компоненты
	МенеджерЛицензий = Новый("AddIn.Licence.LicenceExtension20");
	
	// Если необходимо контролировать только наличие ключа без
	// учета количества лицензий, то при запуске устанавливаем тип
	// контроля лицензии ТолькоНаличиеКлюча = Истина
	ТолькоНаличиеКлюча = Ложь; // По умолчанию
	
	// Если есть настройка нахождения сервера лицензий СКЛ.
	// В константе хранится структура из двух полей: Адрес, Порт.
	// Пример параметров для менеджера: "host=server1;port=9099".
	Если ПараметрыСвязи = Неопределено Тогда
		ПараметрыСвязи = Константы.гисЗащитаПараметрыСвязи.Получить().Получить();
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСвязи) Тогда
		МенеджерЛицензий.ПараметрыСвязи = "host=" + ПараметрыСвязи.Адрес + ";port=" + Формат(ПараметрыСвязи.Порт, "ЧГ=0");
	Иначе
		МенеджерЛицензий.ПараметрыСвязи = "host=localhost;port=9099";
	КонецЕсли;
	
	// Запуск
	Если Не МенеджерЛицензий.Запуск("698C", ТолькоНаличиеКлюча) Тогда
		ВызватьИсключение МенеджерЛицензий.ПолучитьОписаниеОшибки();
	КонецЕсли;
	
	Защита = Неопределено;
	// Обход ошибки обычного приложения
	Если ТекущийРежимЗапуска() <> РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		Попытка
			Защита = Новый ("ОписаниеЗащитыОтОпасныхДействий");
			Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
		Исключение
			// Исключение возможно на предыдущих версиях платформы без механизма
			// защиты от опасных действий
		КонецПопытки;
	КонецЕсли;
	
	// Создание менеджера объектов
	Попытка
		Если Защита = Неопределено Тогда
			// Предыдущие версии платформы без механизма защиты
			МенеджерОбъектов = ВнешниеОбработки.Создать(МенеджерЛицензий.МенеджерОбъектов, БезопасныйРежим());
		Иначе
			МенеджерОбъектов = ВнешниеОбработки.Создать(
				ВнешниеОбработки.Подключить(
					ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(МенеджерЛицензий.МенеджерОбъектов)), , БезопасныйРежим(), Защита));
		КонецЕсли;
				
		// Настройка менеджера объектов
		МенеджерОбъектов.УстановитьМенеджерЛицензий(МенеджерЛицензий, Защита);
	Исключение
		ВызватьИсключение "Ошибка создания менеджера объектов СЛК: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат МенеджерОбъектов;
КонецФункции

#КонецОбласти

