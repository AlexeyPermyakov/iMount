&НаКлиенте
Перем ОткрытаФормаВыбораИсполнителя;  // Признак того, что исполнитель выбирается из формы, а не быстрым вводом.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("ТипДействия") Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТипДействия = Параметры.ТипДействия;
	КлючСохраненияПоложенияОкна = Строка(Пользователи.ТекущийПользователь().УникальныйИдентификатор()) + "_" + Строка(ТипДействия);

	СформироватьРеквизитШаблонСообщения();
		
	Настройки = Новый Структура();
	Если Параметры.Свойство("Настройки")
			И ТипЗнч(Параметры.Настройки) = Тип("Структура") Тогда
		Настройки = Параметры.Настройки;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	КонецЕсли;
	Параметры.Свойство("Шаблон", Шаблон);
		
	Если ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.ПроизвольныйСценарий Тогда
		Элементы.НастройкиПоТипуДействия.ТекущаяСтраница = Элементы.СтраницаПроизвольныйСценарий;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.СозданиеОбъекта Тогда
		Элементы.НастройкиПоТипуДействия.ТекущаяСтраница = Элементы.СтраницаСозданиеОбъекта;
		
		СписокПараметров = Элементы.ИмяПараметраСоздание.СписокВыбора;
		Если Параметры.Свойство("ПараметрыОбработки")
				И ТипЗнч(Параметры.ПараметрыОбработки) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из Параметры.ПараметрыОбработки Цикл
				СписокПараметров.Добавить("Параметры." + КлючИЗначение.Ключ);
			КонецЦикла;
		КонецЕсли;
		Если Параметры.Свойство("ПараметрыШаблона")
				И ТипЗнч(Параметры.ПараметрыШаблона) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из Параметры.ПараметрыШаблона Цикл
				СписокПараметров.Добавить("ОбщиеПараметры." + КлючИЗначение.Ключ);
			КонецЦикла;
		КонецЕсли;
			
		ОписаниеТипов = Метаданные.ОпределяемыеТипы.ПредметЗадачи.Тип;
		ДоступныеТипы = ОписаниеТипов.Типы();
		СписокВыбора = Элементы.ТипОбъекта.СписокВыбора;
		Для Каждого Тип Из ДоступныеТипы Цикл
			ЗначениеВыбора = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип);
			Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
				СписокВыбора.Добавить(ЗначениеВыбора);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.ЗаписьОбъекта Тогда
		Элементы.НастройкиПоТипуДействия.ТекущаяСтраница = Элементы.СтраницаЗаписьОбъекта;
		
		СписокПараметров = Элементы.ИмяПараметраЗапись.СписокВыбора;
		Если Параметры.Свойство("ПараметрыОбъекты") Тогда
			ПараметрыОбъекты.ЗагрузитьЗначения(Параметры.ПараметрыОбъекты);
			Для Каждого ИмяПараметра Из Параметры.ПараметрыОбъекты Цикл
			    СписокПараметров.Добавить(ИмяПараметра);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.БлокировкаОбъекта
			ИЛИ ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.РазблокировкаОбъекта Тогда
		Элементы.ОбъектБлокировки.Заголовок = ?(ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.БлокировкаОбъекта,
											"Объект для блокировки",
											"Объект для разблокировки");
		Элементы.НастройкиПоТипуДействия.ТекущаяСтраница = Элементы.СтраницаБлокировкаОбъекта;
		СписокОбъектов = Элементы.ОбъектБлокировки.СписокВыбора;
		СписокОбъектов.Добавить("БизнесПроцесс.Предмет");
		ИдентификаторСтруктуры = Шаблон.УникальныйИдентификатор();
		УстановитьПривилегированныйРежим(Истина);
		СтруктураДанных = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
		УстановитьПривилегированныйРежим(Ложь);
		ТипОбъектыЗахвата = Метаданные.ОпределяемыеТипы.лм_ОбъектыЗахвата.Тип;
		Для Каждого Реквизит Из СтруктураДанных.Реквизиты Цикл
			ТипыРеквизита = Реквизит.ТипЗначения.Типы();
			Для Каждого Тип Из ТипыРеквизита Цикл
				Если ТипОбъектыЗахвата.СодержитТип(Тип) Тогда
					СписокОбъектов.Добавить("ДанныеПроцесса." + Реквизит.ИмяПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.ЗаполнениеОбъекта Тогда
		Элементы.НастройкиПоТипуДействия.ТекущаяСтраница = Элементы.СтраницаЗаполнениеОбъекта;
		Если Параметры.Свойство("ТипыПредметов") Тогда
			ТипыПредметов.ЗагрузитьЗначения(Параметры.ТипыПредметов);
		КонецЕсли;
		СписокОбъектов = Элементы.ОбъектЗаполнения.СписокВыбора;
		Если ТипыПредметов.Количество() > 0 Тогда 
			СписокОбъектов.Добавить("БизнесПроцесс.Предмет");
		КонецЕсли;
		СписокОбъектов.Добавить("ДанныеПроцесса");
		Если Параметры.Свойство("ПараметрыОбъекты") Тогда
			ПараметрыОбъекты.ЗагрузитьЗначения(Параметры.ПараметрыОбъекты);
			Для Каждого ИмяПараметра Из Параметры.ПараметрыОбъекты Цикл
			    СписокОбъектов.Добавить(ИмяПараметра);
			КонецЦикла;
		КонецЕсли;
		Если Параметры.Свойство("ПараметрыОбработки")
				И ТипЗнч(Параметры.ПараметрыОбработки) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из Параметры.ПараметрыОбработки Цикл
				ПараметрыОбработки.Добавить("Параметры." + КлючИЗначение.Ключ);
			КонецЦикла;
		КонецЕсли;
		Если Параметры.Свойство("ПараметрыШаблона")
				И ТипЗнч(Параметры.ПараметрыШаблона) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из Параметры.ПараметрыШаблона Цикл
				ПараметрыШаблона.Добавить("ОбщиеПараметры." + КлючИЗначение.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектЗаполнения) Тогда
			ЗаполнитьТаблицуРеквизитов(ОбъектЗаполнения);
		КонецЕсли;	
			
		Если Настройки.Свойство("НастройкаЗаполненияОбъекта") Тогда
			Для Каждого СтруктураПоля Из Настройки.НастройкаЗаполненияОбъекта Цикл
				НайденныеСтроки = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Поле", СтруктураПоля.Поле));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], СтруктураПоля,, ?(СтруктураПоля.Свойство("ТипЗначения"),"ТипЗначения", ""));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.ОтправкаПочтовогоСообщения Тогда
		Элементы.НастройкиПоТипуДействия.ТекущаяСтраница = Элементы.СтраницаОтправкаПочтовогоСообщения;
		
	Иначе
		Отказ = Истина;
	КонецЕсли;
		
	Если Параметры.Свойство("Наименование") Тогда
		Заголовок = Параметры.Наименование;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОбъектЗаполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(ВыбранноеЗначение)
			И ВыбранноеЗначение <> ОбъектЗаполнения Тогда
		ЗаполнитьТаблицуРеквизитов(ВыбранноеЗначение);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗаполненияЗначениеЗаполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкаЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.ПроизвольноеЗначение = Ложь Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Шаблон", Шаблон);
		ПараметрыФормы.Вставить("ОбъектЗаполнения", ОбъектЗаполнения);
		ПараметрыФормы.Вставить("ТипЗначения", ТекущиеДанные.ТипЗначения);
		ПараметрыФормы.Вставить("ТипыПредметов", ТипыПредметов.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ПараметрыОбъекты", ПараметрыОбъекты.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ПараметрыОбработки", ПараметрыОбработки.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ПараметрыШаблона", ПараметрыШаблона.ВыгрузитьЗначения());
		ОткрытьФорму("Справочник.лм_ШаблоныБизнесПроцессов.Форма.ФормаВыбораЗначенияЗаполнения", ПараметрыФормы, Элемент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗаполненияПроизвольноеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПроизвольноеЗначение = Истина Тогда
			Элементы.НастройкаЗаполненияЗначениеЗаполнения.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
			Элементы.НастройкаЗаполненияЗначениеЗаполнения.РедактированиеТекста = Истина;
		Иначе
			Элементы.НастройкаЗаполненияЗначениеЗаполнения.ОграничениеТипа = Новый ОписаниеТипов;
			Элементы.НастройкаЗаполненияЗначениеЗаполнения.РедактированиеТекста = Ложь;
		КонецЕсли;
		ТекущиеДанные.ЗначениеЗаполнения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗаполненияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПроизвольноеЗначение = Истина Тогда
			Элементы.НастройкаЗаполненияЗначениеЗаполнения.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
			Элементы.НастройкаЗаполненияЗначениеЗаполнения.РедактированиеТекста = Истина;
		Иначе
			Элементы.НастройкаЗаполненияЗначениеЗаполнения.ОграничениеТипа = Новый ОписаниеТипов;
			Элементы.НастройкаЗаполненияЗначениеЗаполнения.РедактированиеТекста = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПочтовогоСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйПолучатель = ?(ЗначениеЗаполнено(ЗначениеАвтоподстановки), ЗначениеАвтоподстановки, ПолучательПочтовогоСообщения);
	лм_БизнесПроцессыКлиент.ВыбратьИсполнителя(Элемент, ВыбранныйПолучатель, Шаблон);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПочтовогоСообщенияПриИзменении(Элемент)
	
	Если ОткрытаФормаВыбораИсполнителя = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	Если ТипЗнч(ПолучательПочтовогоСообщения) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(ПолучательПочтовогоСообщения) Тогда 
		
		Если ИспользуетсяСОбъектамиАдресации(ПолучательПочтовогоСообщения) Тогда 
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", ПолучательПочтовогоСообщения);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
			
			Возврат;
			
		КонецЕсли;		
	КонецЕсли;
	
	Если ТипЗнч(ПолучательПочтовогоСообщения) <> Тип("Строка") Тогда
		ЗначениеАвтоподстановки = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПочтовогоСообщенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	ОткрытаФормаВыбораИсполнителя = ТипЗнч(ВыбранноеЗначение) = Тип("Структура");
	Если ОткрытаФормаВыбораИсполнителя Тогда
		СтандартнаяОбработка = Ложь;
		Если ВыбранноеЗначение.Свойство("РольИсполнителя") Тогда
			ПолучательПочтовогоСообщения = ВыбранноеЗначение.РольИсполнителя;
			ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
			Модифицированность = Истина;
		Иначе
			ПолучательПочтовогоСообщения = ВыбранноеЗначение.Представление;
			ЗначениеАвтоподстановки = ВыбранноеЗначение.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПолучательПочтовогоСообщения) <> Тип("Строка") Тогда
		ЗначениеАвтоподстановки = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПочтовогоСообщенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПочтовогоСообщенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	Результат = Новый Структура();
	
	Если ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.ПроизвольныйСценарий") Тогда
		Результат.Вставить("СценарийДействия", СценарийДействия);
		
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.СозданиеОбъекта") Тогда
		Если ЗначениеЗаполнено(ТипОбъекта)
				И ЗначениеЗаполнено(ИмяПараметра) Тогда
			Результат.Вставить("ТипОбъекта", ТипОбъекта);
			Результат.Вставить("ИмяПараметра", ИмяПараметра);
		Иначе
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Необходимо указать тип создаваемого объекта и параметр, в который он будет сохранен";
			Сообщение.Сообщить();
		КонецЕсли;
		
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.ЗаписьОбъекта") Тогда
		Если ЗначениеЗаполнено(ИмяПараметра) Тогда
			Результат.Вставить("ИмяПараметра", ИмяПараметра);
		Иначе
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Необходимо указать параметр, в котором будет храниться объект для записи";
			Сообщение.Сообщить();
		КонецЕсли;
		
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.БлокировкаОбъекта")
		  ИЛИ ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.РазблокировкаОбъекта") ТОгда
		Если ЗначениеЗаполнено(ОбъектБлокировки) Тогда
			Результат.Вставить("ОбъектБлокировки", ОбъектБлокировки);
		Иначе
			Отказ = Истина;
			ОписаниеДействия = ?(ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.БлокировкаОбъекта"),
								"заблокирован",
								"разблокирован");
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Необходимо указать объект, который должен быть " + ОписаниеДействия;
			Сообщение.Сообщить();
		КонецЕсли;
		
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.ЗаполнениеОбъекта") Тогда
		Если ЗначениеЗаполнено(ОбъектЗаполнения) Тогда
			ЗначенияЗаполнения = Новый Массив();
			Для Каждого СтрокаНастройки Из НастройкаЗаполнения Цикл
				СтруктураПоля = Новый Структура("Поле, ПроизвольноеЗначение, ЗначениеЗаполнения, ТипЗначения");
				ЗаполнитьЗначенияСвойств(СтруктураПоля, СтрокаНастройки);
				ЗначенияЗаполнения.Добавить(СтруктураПоля);
			КонецЦикла;
			Результат.Вставить("НастройкаЗаполненияОбъекта", ЗначенияЗаполнения);
			Результат.Вставить("ОбъектЗаполнения", ОбъектЗаполнения);
		Иначе
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Необходимо указать объект, который должен быть заполнен";
			Сообщение.Сообщить();
		КонецЕсли;
		
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.лм_ТипыДействийТочкиОбработки.ОтправкаПочтовогоСообщения") Тогда
		Если ЗначениеЗаполнено(ПолучательПочтовогоСообщения) И ЗначениеЗаполнено(ЭтаФорма["ШаблонСообщения"]) Тогда
			Результат.Вставить("ПолучательПочтовогоСообщения", ПолучательПочтовогоСообщения);	
			Результат.Вставить("ЗначениеАвтоподстановки", ЗначениеАвтоподстановки);	
			Результат.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);	
			Результат.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);	
			Результат.Вставить("ШаблонСообщения", ЭтаФорма["ШаблонСообщения"]);	
		Иначе
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить настройки сообщений!";
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ = Ложь Тогда
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуРеквизитов(ВладелецРеквизитов)
	
	НастройкаЗаполнения.Очистить();
	
	Если СтрСравнить(ВладелецРеквизитов, "ДанныеПроцесса") = 0 Тогда
		ИдентификаторСтруктуры = Шаблон.УникальныйИдентификатор();
		УстановитьПривилегированныйРежим(Истина);
		СтруктураДанных = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
		УстановитьПривилегированныйРежим(Ложь);
		Для Каждого Реквизит Из СтруктураДанных.Реквизиты Цикл
			СтрокаНастройки = НастройкаЗаполнения.Добавить();
			СтрокаНастройки.Поле = Реквизит.ИмяПоля;
			СтрокаНастройки.ТипЗначения = Реквизит.ТипЗначения;
			СтрокаНастройки.Синоним = Реквизит.Синоним;
		КонецЦикла;
		
	ИначеЕсли СтрСравнить(ВладелецРеквизитов, "БизнесПроцесс.Предмет") = 0 Тогда
		Для Каждого ТипПредмета Из ТипыПредметов Цикл
			ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ТипПредмета.Значение);
			РеквизитыОбъекта = ОбщегоНазначения.ОписаниеСвойствОбъекта(ОбъектМетаданных, "Имя, Тип, Синоним");
			Для Каждого Реквизит Из РеквизитыОбъекта Цикл
				Если Реквизит.Имя <> "Ссылка"
						И НастройкаЗаполнения.НайтиСтроки(Новый Структура("Поле", Реквизит.Имя)).Количество() = 0 Тогда
					СтрокаНастройки = НастройкаЗаполнения.Добавить();
					СтрокаНастройки.Поле = Реквизит.Имя;
					СтрокаНастройки.ТипЗначения = Реквизит.Тип;
					СтрокаНастройки.Синоним = ?(ЗначениеЗаполнено(Реквизит.Синоним), Реквизит.Синоним, Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе // параметр объектного типа
		ОписаниеТипов = Метаданные.ОпределяемыеТипы.ПредметЗадачи.Тип;
		ДоступныеТипы = ОписаниеТипов.Типы();
		Для Каждого Тип Из ДоступныеТипы Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			РеквизитыОбъекта = ОбщегоНазначения.ОписаниеСвойствОбъекта(ОбъектМетаданных, "Имя, Тип, Синоним");
			Для Каждого Реквизит Из РеквизитыОбъекта Цикл
				Если Реквизит.Имя <> "Ссылка"
						И НастройкаЗаполнения.НайтиСтроки(Новый Структура("Поле", Реквизит.Имя)).Количество() = 0 Тогда
					СтрокаНастройки = НастройкаЗаполнения.Добавить();
					СтрокаНастройки.Поле = Реквизит.Имя;
					СтрокаНастройки.ТипЗначения = Реквизит.Тип;
					СтрокаНастройки.Синоним = ?(ЗначениеЗаполнено(Реквизит.Синоним), Реквизит.Синоним, Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяСОбъектамиАдресации(ПроверяемыйОбъект)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйОбъект, "ИспользуетсяСОбъектамиАдресации");
	
КонецФункции

&НаСервере
Процедура СформироватьРеквизитШаблонСообщения()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		
		ГруппаНастройкиОповещений      = ЭтаФорма.Элементы.Найти("СтраницаОтправкаПочтовогоСообщения");	
		ИмяРеквизитаШаблон             = "ШаблонСообщения";
		МассивРеквизитов               = Новый Массив;		
		ШаблонСообщения                = Новый РеквизитФормы(ИмяРеквизитаШаблон, Новый ОписаниеТипов("СправочникСсылка.ШаблоныСообщений"));
		МассивРеквизитов.Добавить(ШаблонСообщения);
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
					
		НовыйЭлемент                           = ЭтаФорма.Элементы.Вставить(ИмяРеквизитаШаблон, Тип("ПолеФормы"), ГруппаНастройкиОповещений);
		НовыйЭлемент.Вид                       = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок                 = "Шаблон сообщения";
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		НовыйЭлемент.ПутьКДанным               = ИмяРеквизитаШаблон;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
