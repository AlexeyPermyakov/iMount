// лм_УниверсальныеСтруктурыДанных
&НаКлиенте
Перем СоответствиеЗависимых;
&НаКлиенте
Перем СоответствиеРеквизитов;
// Конец лм_УниверсальныеСтруктурыДанных

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// НачалоЗамераПроизводительности
НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
// Конец НачалоЗамераПроизводительности
		
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
	ДобавитьКнопкиДействий();	
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// лм_УниверсальныеСтруктурыДанных
	УстановитьПривилегированныйРежим(Истина);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Владелец", Объект.БизнесПроцесс.Шаблон);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаУниверсальныеСтруктуры");	
	ДополнительныеПараметры.Вставить("ИдентификаторЭлемента", Объект.БизнесПроцесс);
	УстановитьПривилегированныйРежим(Ложь);
	лм_УниверсальныеСтруктурыДанных.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	Если Объект.Выполнена = Истина Тогда
		Для Каждого ПолеСтруктуры Из Элементы.ГруппаУниверсальныеСтруктуры.ПодчиненныеЭлементы Цикл
			ПолеСтруктуры.ТолькоПросмотр = Истина;
		КонецЦикла;
	КонецЕсли;
// Конец лм_УниверсальныеСтруктурыДанных

	// лм_ВнутренниеКоммуникацииПользователей
	ИдентификаторЧата = Объект.БизнесПроцесс.УникальныйИдентификатор();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяГруппыФормы",        "Обсуждение");	
	ДополнительныеПараметры.Вставить("КонтекстЧата",          Объект.БизнесПроцесс);	
	ДополнительныеПараметры.Вставить("ОтображатьСписокЧатов", Ложь);	
	лм_ВнутренниеКоммуникацииПользователей.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец лм_ВнутренниеКоммуникацииПользователей	

	лм_БизнесПроцессы.ПриСозданииФормыЗадачиНаСервере(ЭтаФорма);
	
	// ЗавершениеЗамераПроизводительности
ОценкаПроизводительности.ЗакончитьЗамерВремени("Бизнес-процесс.ОткрытиеФормыЗадачи", НачалоЗамера);
// Конец ЗавершениеЗамераПроизводительности	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// лм_ВнутренниеКоммуникацииПользователей
	Форма = ЭтаФорма;
	Форма.ТекстЧата = лм_ВнутренниеКоммуникацииПользователейВызовСервера.ПолучитьТекстОкнаСообщений(Форма.ИдентификаторЧата);	
	// Конец лм_ВнутренниеКоммуникацииПользователей
	
	БизнесПроцессыИЗадачиКлиент.ОбновитьДоступностьКомандПринятияКИсполнению(ЭтотОбъект);
	лм_БизнесПроцессыКлиент.ПриОткрытииФормыЗадачи(ЭтаФорма);
	
	// лм_УниверсальныеСтруктурыДанных
  
  //ПодключитьОбработчикОжидания("ИнициализироватьСлужебныеПеременные", 0.5, Истина);

// Конец лм_УниверсальныеСтруктурыДанных
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнитьЗадачу = Ложь;
	Если НЕ (ПараметрыЗаписи.Свойство("ВыполнитьЗадачу", ВыполнитьЗадачу) И ВыполнитьЗадачу) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаданиеВыполнено И НЕ ЗначениеЗаполнено(ТекущийОбъект.РезультатВыполнения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите причину, по которой задача отклоняется.'"),,
			"Объект.РезультатВыполнения",,
			Отказ);
		Возврат;
	КонецЕсли;
	
	// Запись объекта бизнес-процесса.
	ЗаписатьРеквизитыБизнесПроцесса(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// лм_УниверсальныеСтруктурыДанных
	УстановитьПривилегированныйРежим(Истина);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Владелец",              Объект.БизнесПроцесс.Шаблон);	
	ДополнительныеПараметры.Вставить("ИдентификаторЭлемента", Объект.БизнесПроцесс);	
	лм_УниверсальныеСтруктурыДанных.ПослеЗаписиНаСервере(ЭтаФорма, ДополнительныеПараметры);
// Конец лм_УниверсальныеСтруктурыДанных
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// лм_УниверсальныеСтруктурыДанных
  
  Если ИмяСобытия = "СозданиеЭлементов" Тогда
	   ДобавитьЭлементыФормы(Параметр);
  КонецЕсли;
// Конец лм_УниверсальныеСтруктурыДанных
	
	БизнесПроцессыИЗадачиКлиент.ФормаЗадачиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	Если ИмяСобытия = "Запись_Задание" Тогда
		Если (Источник = Объект.БизнесПроцесс ИЛИ (ТипЗнч(Источник) = Тип("Массив") 
			И Источник.Найти(Объект.БизнесПроцесс) <> Неопределено)) Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	лм_БизнесПроцессыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализацияФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// НачалоЗамераПроизводительности
ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Бизнес-процесс.ЗаписьЗадачи");
// Конец НачалоЗамераПроизводительности
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// лм_УниверсальныеСтруктурыДанных
		
&НаКлиенте
Процедура лм_УниверсальныеСтруктурыДанных_ПриИзмененииРеквизита(Элемент) 
	
	Если СоответствиеЗависимых = Неопределено Тогда
		ИнициализироватьСлужебныеПеременные();
	КонецЕсли;

	лм_УниверсальныеСтруктурыДанныхКлиент.ОбновитьЗависимостиРеквизитовУниверсальнойСтруктуры(ЭтаФорма, СоответствиеЗависимых);	
	
КонецПроцедуры	

&НаКлиенте
Процедура лм_УниверсальныеСтруктурыДанных_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	лм_УниверсальныеСтруктурыДанныхКлиент.НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура лм_УниверсальныеСтруктурыДанных_ПриИзмененииРеквизитаВладельца(Элемент)
	
	ПриИзмененииРеквизитаВладельца();
	
КонецПроцедуры

// Конец лм_УниверсальныеСтруктурыДанных

// лм_ВнутренниеКоммуникацииПользователей

&НаКлиенте
Процедура УчастникиЧатаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЧата = ТекущиеДанные.ИдентификаторЧата;

	ТекстЧата = лм_ВнутренниеКоммуникацииПользователейВызовСервера.ПолучитьТекстОкнаСообщений(ИдентификаторЧата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Форма = ЭтаФорма;
	
	Если Не ЗначениеЗаполнено(Форма.ТекстСообщения) Тогда
		Возврат;	
	КонецЕсли;
	
	лм_ВнутренниеКоммуникацииПользователейВызовСервера.ОтправитьСообщение(Форма.ИдентификаторЧата, Форма.ТекстСообщения, Форма.Объект.БизнесПроцесс);
	
	Форма.ТекстЧата = лм_ВнутренниеКоммуникацииПользователейВызовСервера.ПолучитьТекстОкнаСообщений(Форма.ИдентификаторЧата);
	
	Форма.ТекстСообщения = "";
	
КонецПроцедуры

// Конец лм_ВнутренниеКоммуникацииПользователей

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	
	Если СоответствиеЗависимых = Неопределено Тогда
		ИнициализироватьСлужебныеПеременные();
	КонецЕсли;
		
	лм_БизнесПроцессыКлиент.ПриИзмененииРеквизитаФормыЗадачи(Элемент, ЭтаФорма, СоответствиеЗависимых, СоответствиеРеквизитов);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	лм_БизнесПроцессыКлиент.НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	лм_БизнесПроцессыКлиент.Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	лм_БизнесПроцессыКлиент.ВыполнитьПереопределяемуюКоманду(Команда, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтрокиТаблицы(Элемент)
	
	лм_БизнесПроцессыКлиент.ПриАктивизацииСтрокиТаблицыФормыЗадачи(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеЗакрытияПодчиненнойФормы(Результат, ДополнительныеПараметры) Экспорт
		
	Если СоответствиеЗависимых = Неопределено Тогда
		ИнициализироватьСлужебныеПеременные();
	КонецЕсли;
		
	лм_БизнесПроцессыКлиент.ПослеЗакрытияПодчиненнойФормы(ЭтаФорма, Результат, ДополнительныеПараметры, СоответствиеЗависимых, СоответствиеРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавленияСтрокиТаблицы(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	лм_БизнесПроцессыКлиент.ПередНачаломДобавленияСтрокиТаблицыФормыЗадачи(Элемент, Отказ, Копирование, Родитель, Группа, Параметр, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалениемСтрокиТаблицы(Элемент, Отказ)
	
	лм_БизнесПроцессыКлиент.ПередУдалениемСтрокиТаблицыФормыЗадачи(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриОкончанииРедактированияСтрокиТаблицы(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	лм_БизнесПроцессыКлиент.ПриОкончанииРедактированияСтрокиТаблицы(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриНачалеРедактированияСтрокиТаблицы(Элемент, НоваяСтрока, Копирование)
	
	лм_БизнесПроцессыКлиент.Подключаемый_ПриНачалеРедактированияСтрокиТаблицы(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СрокНачалаИсполненияПриИзменении(Элемент)
	
	Если Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = КонецДня(Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсполненияПриИзменении(Элемент)
	
	Если Объект.ДатаИсполнения = НачалоДня(Объект.ДатаИсполнения) Тогда
		Объект.ДатаИсполнения = КонецДня(Объект.ДатаИсполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.Предмет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполненоВыполнить(Команда)
	
	ЗаданиеВыполнено = Истина;
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отменено(Команда)
	
	ЗаданиеВыполнено = Ложь;
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьДопИнформациюОЗадаче(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачуКИсполнению(ЭтотОбъект, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗадание(Команда)
	
	Записать();
	ПоказатьЗначение(,Объект.БизнесПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	ПараметрыОбработчика = Новый Структура("ИмяКоманды", Команда.Имя);
	ВыполнитьПроизвольныйОбрабочик(ПараметрыОбработчика);
	
	Если Не ПроверитьЗаполнениеРеквизитовЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	// НачалоЗамераПроизводительности
ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Бизнес-процесс.ВыполнениеЗадачи");
// Конец НачалоЗамераПроизводительности
		
	ОбработатьВыбранноеДействие(ПараметрыОбработчика);
	Оповестить("Запись_ЗадачаИсполнителя", Новый Структура, Объект.Ссылка);
	Закрыть();	
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБизнесПроцесс(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.БизнесПроцесс);
	ОткрытьФорму("БизнесПроцесс.лм_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// лм_УниверсальныеСтруктурыДанных
		
&НаСервере
Процедура ДобавитьЭлементыФормы(СоответствиеДобавляемых)
	
	лм_УниверсальныеСтруктурыДанных.СформироватьЭлементыФормыПоУниверсальнойСтруктуре(ЭтаФорма,, ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаЭлементРазмещения()],,СоответствиеДобавляемых);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаВладельца()
	
	лм_УниверсальныеСтруктурыДанных.ПриИзмененииРеквизитаВладельца(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализироватьСлужебныеПеременные()
	
	СоответствиеЗависимых  = ПолучитьИзВременногоХранилища(ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаАдресаСоответствияЗависимостей()]);
	СоответствиеРеквизитов = ПолучитьИзВременногоХранилища(ЭтаФорма[лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаСоответствияРеквизитов()]);
  
КонецПроцедуры

// Конец лм_УниверсальныеСтруктурыДанных

&НаСервере
Функция ПроверитьЗаполнениеРеквизитовЗадачи()
	
	Результат         = Истина;
	МассивПроверяемых = Новый Массив;
	ПроверитьЗаполнениеРекурсивно(Элементы.ДанныеБизнесПроцесса, МассивПроверяемых);
	
	лм_БизнесПроцессыПереопределяемый.ПриПроверкеЗаполненияРеквизитовЗадачи(ЭтаФорма, МассивПроверяемых, Результат);
		
	Для Каждого Реквизит Из МассивПроверяемых Цикл
		Если СтрНайти(Реквизит, ".") > 0 Тогда
			МассивПодстрок = СтрРазделить(Реквизит, ".");
			ИмяТаблицы = МассивПодстрок[0];
			ИмяКолонки = МассивПодстрок[1];
			Таблица    = ЭтаФорма[ИмяТаблицы];
			
			Для Каждого Стр Из Таблица Цикл
				Если Не ЗначениеЗаполнено(Стр[ИмяКолонки]) Тогда
					Сообщение       = Новый СообщениеПользователю;
					НомерСтроки     = Таблица.Индекс(Стр) + 1;
					Сообщение.Текст = "Не заполнено значение в строке " + НомерСтроки + " колонки " + ИмяКолонки;
					Сообщение.Поле  = ИмяТаблицы + "[" + Таблица.Индекс(Стр) + "]." + ИмяКолонки;
					Сообщение.Сообщить();
					Результат = Ложь;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не ЗначениеЗаполнено(ЭтаФорма[Реквизит]) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено значение в поле " + Реквизит;
				Сообщение.Поле = Реквизит;
				Сообщение.Сообщить();
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеРекурсивно(Элемент, ПроверяемыеРеквизиты)
	
	Для Каждого ТекЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ПолеФормы") 
			 И ТекЭлемент.Вид = ВидПоляФормы.ПолеВвода
			 И ТекЭлемент.АвтоОтметкаНезаполненного = Истина Тогда
			 ПроверяемыеРеквизиты.Добавить(ТекЭлемент.ПутьКДанным);
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") Тогда
			ПроверитьЗаполнениеРекурсивно(ТекЭлемент, ПроверяемыеРеквизиты);
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ТаблицаФормы") Тогда
			Если ТекЭлемент.АвтоОтметкаНезаполненного = Истина Тогда
				ПроверяемыеРеквизиты.Добавить(ТекЭлемент.ПутьКДанным);
			КонецЕсли;
			ПроверитьЗаполнениеРекурсивно(ТекЭлемент, ПроверяемыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы()
	
	НачальныйПризнакВыполнения = Объект.Выполнена;
	ПрочитатьРеквизитыБизнесПроцесса();
	УстановитьСостояниеЭлементов();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокНачалаИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ДатаИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	
	БизнесПроцессыИЗадачиСервер.ФормаЗадачиПриСозданииНаСервере(ЭтотОбъект, Объект,
		Элементы.ГруппаСостояние, Элементы.ДатаИсполнения);
	Элементы.ОписаниеРезультата.ТолькоПросмотр = Объект.Выполнена;
	
	Элементы.ИзменитьЗадание.Видимость = (Объект.Автор = Пользователи.ТекущийПользователь());
	Исполнитель = ?(ЗначениеЗаполнено(Объект.Исполнитель), Объект.Исполнитель, Объект.РольИсполнителя);
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизитыБизнесПроцесса()
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	ЗаданиеВыполнено = ЗаданиеОбъект.Выполнено;
	ЗаданиеРезультатВыполнения = ЗаданиеОбъект.РезультатВыполнения;
	ЗаданиеСодержание = ЗаданиеОбъект.Содержание;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьРеквизитыБизнесПроцесса(ЗадачаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ЗаданиеОбъект.Ссылка);
	ЗаданиеОбъект.Выполнено = ЗаданиеВыполнено;
	ЗаданиеОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЭлементов()
		
	Если ЭтаФорма.Элементы.Найти("РезультатВыполнения") <> Неопределено 
		И ЭтаФорма.Элементы.Найти("ИсторияВыполнения") <> Неопределено Тогда
			ЭтаФорма.Элементы.ИсторияВыполнения.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(ЭтаФорма.ЗаданиеРезультатВыполнения);
	КонецЕсли;
	
	Если ЭтаФорма.Элементы.Предмет.Вид = ВидПоляФормы.ПолеНадписи Тогда
		ЭтаФорма.Элементы.Предмет.Гиперссылка = ЭтаФорма.Объект.Предмет <> Неопределено И НЕ ЭтаФорма.Объект.Предмет.Пустая();
		ЭтаФорма.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(ЭтаФорма.Объект.Предмет);
	КонецЕсли;
			
КонецПроцедуры	

&НаСервере
Процедура ДобавитьКнопкиДействий()
	
	УстановитьПривилегированныйРежим(Истина);
	ОбработчикиПослеЗавершения.Очистить();
	НаборЗаписей = РегистрыСведений.лм_СценарииБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Шаблон.Установить(Объект.БизнесПроцесс.Шаблон);
	НаборЗаписей.Отбор.ИсходнаяТочка.Установить(Объект.ИдентификаторТочки);
	НаборЗаписей.Отбор.НомерВерсии.Установить(Объект.БизнесПроцесс.НомерВерсии);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		ЗаголовокКоманды = Запись.НаименованиеВыхода;
		ИмяКоманды = "Действие" + СтрЗаменить(ТРег(ЗаголовокКоманды), " ", "");
		НоваяКоманда = Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Заголовок = ЗаголовокКоманды;
		НоваяКоманда.Действие = "ВыполнитьДействие";
		НоваяКнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.ДействияПользователя);
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок = ЗаголовокКоманды;
		НоваяКнопка.Доступность = НЕ Объект.Выполнена;		
		Если ЗначениеЗаполнено(Запись.ИконкаДействия) Тогда
			НоваяКнопка.Картинка = БиблиотекаКартинок[Запись.ИконкаДействия];
			НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		ОбработчикиПослеЗавершения.Добавить(Новый Структура("ИмяКоманды, Обработчик", ИмяКоманды, Запись.ОбработчикПослеЗавершения));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыбранноеДействие(ПараметрыОбработчика)
	
	Если ПараметрыОбработчика.Свойство("ПроизвольныйСценарийСервер") Тогда
		ВыполнитьПроизвольныйОбрабочикНаСервере(ПараметрыОбработчика);
	КонецЕсли;
	
	Записать();
	ЗадачаОбъект = Объект.Ссылка.ПолучитьОбъект();
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("ВыполнениеЗадачи");
	ЗадачаОбъект.ВыполнитьЗадачу();
	лм_БизнесПроцессыПереопределяемый.ПриВыполненииЗадачи(ЭтаФорма);

	Команда = Команды.Найти(ПараметрыОбработчика.ИмяКоманды);
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцесс = Объект.БизнесПроцесс;
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыБП = Новый Структура;
	ПараметрыБП.Вставить("БизнесПроцесс", 			БизнесПроцесс);
	ПараметрыБП.Вставить("АктивнаяТочка", 			Объект.ИдентификаторТочки);
	ПараметрыБП.Вставить("ИтерацияАктивной", 		Объект.Итерация);
	ПараметрыБП.Вставить("НаименованиеВыхода", 		Команда.Заголовок);
	ПараметрыБП.Вставить("НаименованиеВарианта",	"");
	ПараметрыБП.Вставить("УсловиеВыполнено",		Ложь);
	ПараметрыБП.Вставить("ВажностьЗадачи",			ЗадачаОбъект.Важность);
	
	лм_БизнесПроцессы.ПерейтиКСледующейТочке(ПараметрыБП);
	
КонецПроцедуры

#Область ПроизвольныйОбработчик

&НаКлиенте
Процедура ВыполнитьПроизвольныйОбрабочик(ПараметрыОбработчика)
	
	Для каждого Обработчик Из ОбработчикиПослеЗавершения Цикл
		Если Обработчик.Значение.ИмяКоманды = ПараметрыОбработчика.ИмяКоманды И ЗначениеЗаполнено(Обработчик.Значение.Обработчик) Тогда
			Попытка
				Выполнить(Обработчик.Значение.Обработчик);		
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось выполнить произвольный обработчик для линии.";
				Сообщение.Сообщить();
			КонецПопытки;
			Прервать;
		КонецЕсли; 	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроизвольныйОбрабочикНаСервере(ПараметрыОбработчика)
	
	ПараметрыСценария = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОбработчика);
	ПараметрыСценария.Вставить("Форма", ЭтотОбъект);	
	
	лм_БизнесПроцессы.ВыполнитьПроизвольныйСценарийИзФормыЗадачи(ПараметрыСценария);	
КонецПроцедуры

// Снятие отметки заполнения ++
&НаКлиенте
Процедура ОтменитьПроверкуОбязательныхРеквизитов() Экспорт
	
	СнятьРекурсивноАвтоОтметкуКлиент(Элементы.ДанныеБизнесПроцесса);
	ИмяТаблицыДанных = лм_БизнесПроцессыКлиентСерверПереопределяемый.ИмяТаблицыДанных();
	
	Если Элементы.Найти(ИмяТаблицыДанных) <> Неопределено Тогда
		ТаблицаДанных = ЭтаФорма[ИмяТаблицыДанных];		
		МассивРезультат = Новый Массив;
		
		Отбор = Новый Структура("АвтоОтметкаНезаполненного", Истина);
		СтрокиОтбора = ТаблицаДанных.НайтиСтроки(Отбор);
		
		Для Каждого Стр Из СтрокиОтбора Цикл
			Стр.АвтоОтметкаНезаполненного = Ложь;
		КонецЦикла;
	Конецесли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьРекурсивноАвтоОтметкуКлиент(Элемент)
	
	Для Каждого ТекЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ПолеФормы") 
			 И ТекЭлемент.Вид = ВидПоляФормы.ПолеВвода
			 И ТекЭлемент.АвтоОтметкаНезаполненного = Истина Тогда
			 ТекЭлемент.АвтоОтметкаНезаполненного = Ложь;
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") Тогда
			СнятьРекурсивноАвтоОтметкуКлиент(ТекЭлемент);
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ТаблицаФормы") Тогда
			ТекЭлемент.АвтоОтметкаНезаполненного = Ложь;			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры
// Снятие отметки заполнения --

#КонецОбласти

#КонецОбласти
