

#Область ПрограммныйИнтерфейс

Процедура ОбновитьДанныеКэшаУниверсальнойСтруктуры(УниверсальнаяСтруктура) Экспорт
		
	Если ТипЗнч(УниверсальнаяСтруктура.ВладелецСтруктуры) = Тип("СправочникСсылка.лм_ШаблоныБизнесПроцессов") Тогда
			
	//	МассивПредметовНСИ 			= Новый Массив;		
	//	ТипыСправочникиНСИ 			= Метаданные.ОпределяемыеТипы.СправочникиНСИ.Тип;
	//	СоответствиеИдентификаторов = Новый Соответствие;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета КАК ТипПредмета,
	//	|	лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета.ПолноеИмя КАК ТипПредметаПолноеИмя
	//	|ИЗ
	//	|	Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
	//	|ГДЕ
	//	|	лм_ШаблоныБизнесПроцессовПредметы.Ссылка = &Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	лм_ИдентификаторыРеквизитовСтруктур.КлючРеквизита КАК КлючРеквизита,
	//	|	лм_ИдентификаторыРеквизитовСтруктур.ИдентификаторРеквизита КАК ИдентификаторРеквизита
	//	|ИЗ
	//	|	РегистрСведений.лм_ИдентификаторыРеквизитовСтруктур КАК лм_ИдентификаторыРеквизитовСтруктур
	//	|ГДЕ
	//	|	лм_ИдентификаторыРеквизитовСтруктур.ИдентификаторСтруктуры = &ИдентификаторСтруктуры";
	//	
	//	Запрос.УстановитьПараметр("Ссылка", 				УниверсальнаяСтруктура.ВладелецСтруктуры);
	//	Запрос.УстановитьПараметр("ИдентификаторСтруктуры", УниверсальнаяСтруктура.ИдентификаторСтруктуры);
	//	
	//	РезультатЗапроса = Запрос.ВыполнитьПакет();
	//	
	//	Если Не РезультатЗапроса[0].Пустой() Тогда
	//		ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	//		
	//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//			
	//			МассивПодстрок = СтрРазделить(ВыборкаДетальныеЗаписи.ТипПредметаПолноеИмя, ".", Ложь);			
	//			ТипПредмета = Тип(МассивПодстрок[0] + "Ссылка." + МассивПодстрок[1]);
	//			Если ТипыСправочникиНСИ.СодержитТип(ТипПредмета) Тогда
	//				МассивПредметовНСИ.Добавить(ВыборкаДетальныеЗаписи.ТипПредмета);
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//
	//	Если Не РезультатЗапроса[1].Пустой() Тогда
	//		ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	//		
	//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
	//			СоответствиеИдентификаторов.Вставить(ВыборкаДетальныеЗаписи.КлючРеквизита, ВыборкаДетальныеЗаписи.ИдентификаторРеквизита);				
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	Для Каждого ИдентификаторПредмета Из МассивПредметовНСИ Цикл
	//		МетаОбъект = Метаданные.Справочники[ИдентификаторПредмета.Имя];				
	//		
	//		Если МетаОбъект.ДлинаНаименования <> 0 Тогда				
	//			Синоним = ?(ЗначениеЗаполнено(МетаОбъект.СтандартныеРеквизиты.Наименование.Синоним), МетаОбъект.СтандартныеРеквизиты.Наименование.Синоним, "Наименование");			
	//			ДинРеквизит = СоздатьДинРеквизит("Наименование", Синоним, Новый ОписаниеТипов("Строка"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//			ДинРеквизит.Метка = УправлениеНСИКлиентСервер.ВидДанныхРеквизит();
	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);				
	//		КонецЕсли;
	//		
	//		Если МетаОбъект.ДлинаКода <> 0 Тогда
	//			Синоним = ?(ЗначениеЗаполнено(МетаОбъект.СтандартныеРеквизиты.Код.Синоним), МетаОбъект.СтандартныеРеквизиты.Код.Синоним, "Код");
	//			ДинРеквизит = СоздатьДинРеквизит("Код", Синоним, Новый ОписаниеТипов("Строка"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//			ДинРеквизит.Метка = УправлениеНСИКлиентСервер.ВидДанныхРеквизит();
	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		КонецЕсли;
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("ПометкаУдаления", "Пометка удаления", Новый ОписаниеТипов("Булево"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//		ДинРеквизит.Метка = УправлениеНСИКлиентСервер.ВидДанныхРеквизит();
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		НоваяЗависимость = СоздатьЗависимость("Виден", "Не заполнено", "ПометкаУдаления", ДинРеквизит.Идентификатор, "Элементы", Неопределено);
	//		УниверсальнаяСтруктура.ЗависимостиРеквизитов.Добавить(НоваяЗависимость);											
	//		
	//		МассивНедоступных = УправлениеНСИ.ПолучитьМассивНедоступныхРеквизитов(ИдентификаторПредмета);
	//		
	//		Для Каждого Реквизит Из МетаОбъект.Реквизиты Цикл								
	//			ДинРеквизит = СоздатьДинРеквизит(Реквизит.Имя, Реквизит.Синоним, Реквизит.Тип, УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//			ДинРеквизит.Метка = УправлениеНСИКлиентСервер.ВидДанныхРеквизит();
	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//			
	//			Если МассивНедоступных.Найти(Реквизит.Имя) <> Неопределено Тогда
	//				НоваяЗависимость = СоздатьЗависимость("Виден", "Не заполнено", "ПометкаУдаления", ДинРеквизит.Идентификатор, "Элементы", Неопределено);
	//				УниверсальнаяСтруктура.ЗависимостиРеквизитов.Добавить(НоваяЗависимость);											
	//			КонецЕсли;				
	//		КонецЦикла;
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("СтатусЗаписи", "Статус записи", Новый ОписаниеТипов("СправочникСсылка.СтатусыЗаписейСправочниковНСИ"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//		ДинРеквизит.Метка = УправлениеНСИКлиентСервер.ВидДанныхРеквизит();
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("КомментарийЭксперта", "Комментарий эксперта", Новый ОписаниеТипов("Строка"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//		ДинРеквизит.Метка = УправлениеНСИКлиентСервер.ВидДанныхРеквизит();
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		НоваяЗависимость = СоздатьЗависимость("Виден", "Не заполнено", "ПометкаУдаления", ДинРеквизит.Идентификатор, "Элементы", Неопределено);
	//		УниверсальнаяСтруктура.ЗависимостиРеквизитов.Добавить(НоваяЗависимость);											
	//								
	//		ДинРеквизит = СоздатьДинРеквизит("ЗапущенАвтоматически", "Процесс запущен автоматически", Новый ОписаниеТипов("Булево"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		НоваяЗависимость = СоздатьЗависимость("Виден", "Не заполнено", "ПометкаУдаления", ДинРеквизит.Идентификатор, "Элементы", Неопределено);
	//		УниверсальнаяСтруктура.ЗависимостиРеквизитов.Добавить(НоваяЗависимость);											
	//		
	//		ПриСозданииДинРеквизитов(УниверсальнаяСтруктура, СоответствиеИдентификаторов);
	//		
	//		// Посмотреть, как можно оптимизировать запрос. 
	//		ДеревоСостава = СоставДанныхСправочникаИерархически(ИдентификаторПредмета);
	//		ДобавленныеАтрибуты = Новый Соответствие;
	//		
	//		Для Каждого СтрКлассификатор Из ДеревоСостава.Строки Цикл
	//			ИмяКлассификатора = УправлениеНСИКлиентСервер.ВидДанныхКлассификатор() + "_" + СтрКлассификатор.Код;
	//			ДинРеквизит       = СоздатьДинРеквизит(ИмяКлассификатора, СтрКлассификатор.Наименование, Новый ОписаниеТипов("СправочникСсылка.ЭлементыКлассификаторов"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//			ДинРеквизит.Метка = ИмяКлассификатора;
	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);								
	//		КонецЦикла;
	//		
	//		Для Каждого СтрКлассификатор Из ДеревоСостава.Строки Цикл				
	//			ИмяКлассификатора = УправлениеНСИКлиентСервер.ВидДанныхКлассификатор() + "_" + СтрКлассификатор.Код;
	//			Для Каждого СтрКГ Из СтрКлассификатор.Строки Цикл
	//				Для Каждого СтрАтрибут Из СтрКГ.Строки Цикл
	//					
	//					Если СтрАтрибут.Объект = Null Тогда
	//						Продолжить;	
	//					КонецЕсли;
	//					
	//					Если ДобавленныеАтрибуты[СтрАтрибут.Объект] = Неопределено Тогда
	//						ИмяАтрибута = УправлениеНСИКлиентСервер.ВидДанныхДополнительноеСвойство() + "_" + СтрАтрибут.Код;
	//						ТипЗначения = Новый ОписаниеТипов(СтрАтрибут.ТипЗначения, "СправочникСсылка.ИдентификаторыОбъектовМетаданных");
	//						ДинРеквизит = СоздатьДинРеквизит(ИмяАтрибута, СтрАтрибут.Наименование, ТипЗначения, УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//						ДинРеквизит.Метка = УправлениеНСИКлиентСервер.ВидДанныхДополнительноеСвойство() + "_" + СтрАтрибут.Код;
	//						ДобавленныеАтрибуты.Вставить(СтрАтрибут.Объект, ДинРеквизит);
	//						УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);							
	//					КонецЕсли;
	//					
	//					НоваяЗависимость = СоздатьЗависимость("Виден", "В списке", ИмяКлассификатора, ДобавленныеАтрибуты[СтрАтрибут.Объект].Идентификатор, "Элементы", СтрКГ.Объект);
	//					УниверсальнаяСтруктура.ЗависимостиРеквизитов.Добавить(НоваяЗависимость);							
	//				КонецЦикла;					
	//			КонецЦикла;
	//		КонецЦикла;
	//		
	//		ОснДинРеквизит = СоздатьДинРеквизит("ТаблицаСвязей", "Связи", Новый ОписаниеТипов("Структура"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ОснДинРеквизит);			
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("Связи_Выбран", "БД", Новый ОписаниеТипов("Булево"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("НаименованиеСвязи", "Наименование связи", Новый ОписаниеТипов("СправочникСсылка.ВидыСвязейСправочниковНСИ"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		ДинРеквизит.ЗаполнятьОбязательно = Истина;
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ОписаниеТиповЭлементаМассиваНСИ = ПолучитьОписаниеТиповЭлементаМассиваНСИ(ИдентификаторПредмета);
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("ЭлементМассиваНСИ", "Элемент массива НСИ", ОписаниеТиповЭлементаМассиваНСИ, УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("КодЭлемента", "Код элемента", Новый ОписаниеТипов("Строка"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("Связи_СтатусЗаписи", "Статус записи", Новый ОписаниеТипов("СправочникСсылка.СтатусыЗаписейСправочниковНСИ"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//					
	//		ДинРеквизит = СоздатьДинРеквизит("КУдалению", "К удалению", Новый ОписаниеТипов("Булево"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ОснДинРеквизит = СоздатьДинРеквизит("ЗапущенныеПодпроцессы", "Запущенные подпроцессы", Новый ОписаниеТипов("Структура"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ОснДинРеквизит);			
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("Подпроцесс", "Подпроцесс", Новый ОписаниеТипов("БизнесПроцессСсылка.лм_БизнесПроцесс"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("ИмяПоля", "Имя поля", Новый ОписаниеТипов("Строка"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		НоваяЗависимость = СоздатьЗависимость("Виден", "Не заполнено", "ПометкаУдаления", ОснДинРеквизит.Идентификатор, "Элементы", Неопределено);
	//		УниверсальнаяСтруктура.ЗависимостиРеквизитов.Добавить(НоваяЗависимость);											
	//								
	//		СтрокиСвязейСправочника = УправлениеНСИ.ПолучитьСвязиСправочникаНСИ(МетаОбъект.ПолноеИмя());
	//		
	//		ПовторяющиесяТипы = Новый Соответствие;
	//		
	//		Для Каждого СтрСвязанныйСправочник Из СтрокиСвязейСправочника Цикл
	//			Отказ = Ложь;
	//			ПриАнализеСвязейСправочника(СтрСвязанныйСправочник, Отказ);
	//			Если Отказ Тогда
	//				Продолжить;	
	//			КонецЕсли;
	//			
	//			СчетПовторяющегосяТипа = ПовторяющиесяТипы.Получить(СтрСвязанныйСправочник.Справочник);
	//			
	//			Если СчетПовторяющегосяТипа = Неопределено Тогда
	//				ПовторяющиесяТипы.Вставить(СтрСвязанныйСправочник.Справочник, 0);
	//				СчетПовторяющегосяТипа = 0;
	//			Иначе
	//				СчетПовторяющегосяТипа = СчетПовторяющегосяТипа + 1;
	//				ПовторяющиесяТипы.Вставить(СтрСвязанныйСправочник.Справочник, СчетПовторяющегосяТипа);
	//			КонецЕсли;
	//			
	//			Подстроки           = СтрРазделить(СтрСвязанныйСправочник.Справочник, ".");
	//			
	//			ИмяСвязанного       = Подстроки[1] + ?(СчетПовторяющегосяТипа = 0, "", Формат(СчетПовторяющегосяТипа, "ЧГ=0"));
	//			ТипОбъекта			= Подстроки[1];
	//			
	//			МетаОбъектСвязанный = Метаданные.Справочники[ТипОбъекта];
	//			ИмяСтруктуры        = "Связанный_" + ИмяСвязанного;
	//			ОснДинРеквизит      = СоздатьДинРеквизит(ИмяСтруктуры, СтрСвязанныйСправочник.СинонимСправочника, Новый ОписаниеТипов("Структура"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);				
	//			РеквизитСвязи       = СтрСвязанныйСправочник.Реквизит;
	//			ИмяРеквизитаСтатус  = ИмяСвязанного + "_СтатусЗаписи";
	//			
	//			ДинРеквизит = СоздатьДинРеквизит(ИмяСвязанного + "_Выбран", "Выбран", Новый ОписаниеТипов("Булево"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//							
	//			ДинРеквизит = СоздатьДинРеквизит(ИмяРеквизитаСтатус, "Статус записи", Новый ОписаниеТипов("СправочникСсылка.СтатусыЗаписейСправочниковНСИ"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//				
	//			Если МетаОбъектСвязанный.ДлинаНаименования <> 0 Тогда
	//				ДинРеквизит = СоздатьДинРеквизит(ИмяСвязанного + "_" + "Наименование", МетаОбъектСвязанный.СтандартныеРеквизиты.Наименование.Синоним, Новый ОписаниеТипов("Строка"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//				УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//			КонецЕсли;							
	//			
	//			ДинРеквизит = СоздатьДинРеквизит(ИмяСвязанного + "_Ссылка", "Ссылка", Новый ОписаниеТипов("СправочникСсылка." + ТипОбъекта), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//			
	//			ДинРеквизит = СоздатьДинРеквизит(ИмяСвязанного + "_Предзаполнение", "Предзаполнение", Новый ОписаниеТипов("Булево"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);

	//			УниверсальнаяСтруктура.Реквизиты.Добавить(ОснДинРеквизит);
	//			Для Каждого Реквизит Из МетаОбъектСвязанный.Реквизиты Цикл
	//				Если Реквизит.Имя = РеквизитСвязи Тогда
	//					Продолжить;
	//				КонецЕсли;
	//				ДинРеквизит = СоздатьДинРеквизит(ИмяСвязанного + "_" + Реквизит.Имя, Реквизит.Синоним, Реквизит.Тип, УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//				УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//			КонецЦикла;
	//			
	//			// Классификаторы связанных
	//			ИдентификаторСвязанного = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(СтрСвязанныйСправочник.Справочник);
	//			КлассификаторыСвязанного = УправлениеНСИ.ПараметрыДляСправочника(ИдентификаторСвязанного);				
	//			Для Каждого Классификатор Из КлассификаторыСвязанного Цикл				
	//				ИмяКлассификатора = ИмяСвязанного + "_" + УправлениеНСИКлиентСервер.ВидДанныхКлассификатор() + "_" + Классификатор.Классификатор.Код;
	//				ДинРеквизит       = СоздатьДинРеквизит(ИмяКлассификатора, Классификатор.Классификатор.Наименование, Новый ОписаниеТипов("СправочникСсылка.ЭлементыКлассификаторов"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//				ДинРеквизит.Метка = ИмяКлассификатора;
	//				УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);								
	//			КонецЦикла;
	//			
	//		КонецЦикла;
	//		
	//		ОснДинРеквизит = СоздатьДинРеквизит("ТаблицаПереходныхКлючей", "Таблица переходных ключей", Новый ОписаниеТипов("Структура"), УниверсальнаяСтруктура,, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ОснДинРеквизит);			
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("Выбран", "БД", Новый ОписаниеТипов("Булево"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("ВнешнийСправочник", "Внешний справочник", Новый ОписаниеТипов("СправочникСсылка.ВнешниеСправочники"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//		
	//		ДинРеквизит = СоздатьДинРеквизит("КодВнешнегоСправочника", "Код внешнего справочника", Новый ОписаниеТипов("Строка"), УниверсальнаяСтруктура, ОснДинРеквизит.Идентификатор, СоответствиеИдентификаторов);
	//		УниверсальнаяСтруктура.Реквизиты.Добавить(ДинРеквизит);
	//					
	//		ПриСозданииТаблицыПереходныхКлючей(ОснДинРеквизит, УниверсальнаяСтруктура, СоответствиеИдентификаторов);			
	//	КонецЦикла;
	//	
	//	// Узкое место.
	//	лм_УниверсальныеСтруктурыДанныхВызовСервера.ВычислитьХешСуммуУниверсальнойСтруктуры(УниверсальнаяСтруктура);
	//	
	//	КэшУниверсальнойСтруктуры                        = РегистрыСведений.КэшУниверсальныхСтруктурДанных.СоздатьМенеджерЗаписи();
	//	КэшУниверсальнойСтруктуры.ИдентификаторСтруктуры = УниверсальнаяСтруктура.ИдентификаторСтруктуры;	
	//	КэшУниверсальнойСтруктуры.УниверсальнаяСтруктура = Новый ХранилищеЗначения(УниверсальнаяСтруктура);
	//	КэшУниверсальнойСтруктуры.Актуален               = Истина;
	//	КэшУниверсальнойСтруктуры.Записать();
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьУниверсальнуюСтруктуру(СтандартнаяОбработка, ДанныеСтруктуры) Экспорт
		
КонецПроцедуры

Процедура ПриПолученииДанныхУниверсальнойСтруктуры(УниверсальнаяСтруктура, ДополнительныеПараметры) Экспорт
	
	НеИспользоватьКэш = Ложь;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("НеИспользоватьКэш") Тогда
		НеИспользоватьКэш = ДополнительныеПараметры.НеИспользоватьКэш;	
	КонецЕсли;
	
	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КэшУниверсальныхСтруктурДанных.УниверсальнаяСтруктура КАК УниверсальнаяСтруктура
	|ИЗ
	|	РегистрСведений.КэшУниверсальныхСтруктурДанных КАК КэшУниверсальныхСтруктурДанных
	|ГДЕ
	|	КэшУниверсальныхСтруктурДанных.ИдентификаторСтруктуры = &ИдентификаторСтруктуры";
	
	Запрос.УстановитьПараметр("ИдентификаторСтруктуры", УниверсальнаяСтруктура.ИдентификаторСтруктуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		ВыборкаДетальныеЗаписи.Следующий();
		ЗначениеКэша = ВыборкаДетальныеЗаписи.УниверсальнаяСтруктура.Получить();
		Если ЗначениеКэша <> Неопределено И НеИспользоватьКэш = Ложь Тогда
			УниверсальнаяСтруктура = ЗначениеКэша;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ОбновитьДанныеКэшаУниверсальнойСтруктуры(УниверсальнаяСтруктура);
	
КонецПроцедуры

Функция СоздатьДинРеквизит(Имя, Синоним, Тип, УниверсальнаяСтруктура, ОсновнойИдентификатор = Неопределено, СоответствиеИдентификаторов) Экспорт
	
	ДинРеквизит = лм_УниверсальныеСтруктурыДанныхКлиентСервер.СформироватьСтруктуруСвойстваРеквизита();
	ДинРеквизит.ИмяПоля = Имя;
	ДинРеквизит.Синоним = Синоним;
	ДинРеквизит.ТипЗначения = Тип;
	ДинРеквизит.Нередактируемый = Истина;
	ДинРеквизит.Динамический    = Истина;
	ДинРеквизит.Идентификатор = лм_УниверсальныеСтруктурыДанных.ПолучитьИдентификаторРеквизитаСтруктуры(УниверсальнаяСтруктура.ИдентификаторСтруктуры, ДинРеквизит.ИмяПоля, СоответствиеИдентификаторов);
	Если ОсновнойИдентификатор = Неопределено Тогда
		ДинРеквизит.Вставить("ОсновнойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Иначе
		ДинРеквизит.Вставить("ОсновнойИдентификатор", ОсновнойИдентификатор);
	КонецЕсли;
	
	Возврат ДинРеквизит;
	
КонецФункции

Функция СоздатьЗависимость(ЗависимоеСвойство, Условие, Реквизит, Идентификатор, РежимВыбора, Значение) Экспорт
	
	НоваяЗависимость                   = лм_УниверсальныеСтруктурыДанныхКлиентСервер.СформироватьСтруктуруЗависимостиРеквизита();
	НоваяЗависимость.Условие           = Условие;
	НоваяЗависимость.Реквизит          = Реквизит;
	НоваяЗависимость.Идентификатор     = Идентификатор;
	НоваяЗависимость.Представление     = "";
	НоваяЗависимость.ЗависимоеСвойство = ЗависимоеСвойство;
	НоваяЗависимость.РежимВыбора       = РежимВыбора;
	НоваяЗависимость.Значение          = Значение;
	НоваяЗависимость.ТипЗначения       = Новый ОписаниеТипов;
	НоваяЗависимость.Вставить("ОсновнойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Возврат НоваяЗависимость;
	
КонецФункции

Процедура ПриСозданииНаСервере(Форма, ДополнительныеПараметры, МассивУниверсальныхСтруктур, ДанныеЭлемента = Неопределено) Экспорт
	
	ОписаниеТипаСтруктура = Новый ОписаниеТипов("Структура");
	Если МассивУниверсальныхСтруктур.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	ИмяКоманды = "НормализоватьСвязаннуюЗапись";
	НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
	НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКоманда.Заголовок = "Нормализовать";	
	НоваяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;

	Для Каждого Реквизит Из МассивУниверсальныхСтруктур[0].Реквизиты Цикл
		Если Реквизит.ТипЗначения = ОписаниеТипаСтруктура 
			И СтрНачинаетсяС(Реквизит.ИмяПоля, РаботаСБизнесПроцессамиКлиентСервер.ПрефиксРеквизитаСвязанныеЭлементы()) Тогда
			
			ТаблицаФормы = Форма.Элементы.Найти("лм_" + Реквизит.ИмяПоля);	
			Если ТаблицаФормы <> Неопределено Тогда
				НоваяКнопка = Форма.Элементы.Добавить(Реквизит.ИмяПоля + ИмяКоманды, Тип("КнопкаФормы"), Форма.Элементы["лм_" + Реквизит.ИмяПоля + "КоманднаяПанель"]);
				НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				НоваяКнопка.ИмяКоманды = ИмяКоманды;	
				НоваяКнопка.Заголовок = "Нормализовать";
				НоваяКнопка.Картинка = БиблиотекаКартинок.НормализоватьОтобранные;
				НоваяКнопка.ТолькоВоВсехДействиях = Ложь;				
			КонецЕсли; 			
		КонецЕсли;			
	КонецЦикла;	
	
	Если ДанныеЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// Сохраним в хранилище значения, которые не были заполнены
	мсвПредзаполненные = Новый Массив();
	Для Каждого КлючИЗначение Из ДанныеЭлемента Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			Для Каждого Стр Из КлючИЗначение.Значение Цикл
				ИмяРеквизитаПредзаполненных = СтрЗаменить(КлючИЗначение.Ключ, "Связанный_", "") + "_Предзаполнение";
				Если СтрНачинаетсяС(КлючИЗначение.Ключ, "Связанный") И Стр.Свойство(ИмяРеквизитаПредзаполненных) И Стр[ИмяРеквизитаПредзаполненных] = Истина Тогда
					мсвПредзаполненные.Добавить(Стр);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;		
	
	Если мсвПредзаполненные.Количество() Тогда
		ИнициализироватьРеквизитАдресаПредзаполненных(Форма);
		ИмяРеквизитаАдреса        = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаПредзаполненныхДанных();		
		Форма[ИмяРеквизитаАдреса] = ПоместитьВоВременноеХранилище(мсвПредзаполненные, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииТаблицыПереходныхКлючей(ОснДинРеквизит, УниверсальнаяСтруктура, СоответствиеИдентификаторов)
	
КонецПроцедуры

Процедура ПриАнализеСвязейСправочника(СтрСвязанныйСправочник, Отказ) Экспорт
	
КонецПроцедуры

Процедура ПриСозданииДинРеквизитов(УниверсальнаяСтруктура, СоответствиеИдентификаторов)
	
КонецПроцедуры

Функция СоставДанныхСправочникаИерархически(ИдентификаторСправочника)
	
	//ДеревоРезультат = Новый ДеревоЗначений;
	//
	//ДеревоРезультат.Колонки.Добавить("Объект");
	//ДеревоРезультат.Колонки.Добавить("Наименование");
	//ДеревоРезультат.Колонки.Добавить("Код");
	//ДеревоРезультат.Колонки.Добавить("ТипЗначения");
	//
	//Запрос       = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПараметрыКлассификаторов.Классификатор КАК Классификатор,
	//               |	ПараметрыКлассификаторов.НомерПоПорядку КАК КлассификаторНомерПоПорядку,
	//               |	ПараметрыКлассификаторов.НаследоватьАтрибуты КАК НаследоватьАтрибуты
	//               |ПОМЕСТИТЬ ВТ_Классификаторы
	//               |ИЗ
	//               |	РегистрСведений.ПараметрыКлассификаторов КАК ПараметрыКлассификаторов
	//               |ГДЕ
	//               |	ПараметрыКлассификаторов.ИдентификаторСправочника = &ИдентификаторСправочника
	//               |	И ПараметрыКлассификаторов.СпособИспользованияКлассификации <> ЗНАЧЕНИЕ(Перечисление.СпособыИспользованияКлассификации.НеИспользуется)
	//               |;
	//               |//////  ТекстЗапросаЗамыканий  //////
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВложенныйЗапрос.Классификатор КАК Классификатор,
	//               |	ВложенныйЗапрос.ЭлементКлассификатора КАК ЭлементКлассификатора,
	//               |	ВложенныйЗапрос.Атрибут КАК Атрибут,
	//               |	ВложенныйЗапрос.КлассификаторНаименование КАК КлассификаторНаименование,
	//               |	ВложенныйЗапрос.ЭлементКлассификатораНаименование КАК ЭлементКлассификатораНаименование,
	//               |	ВложенныйЗапрос.АтрибутНаименование КАК АтрибутНаименование,
	//               |	ВложенныйЗапрос.КлассификаторКод КАК КлассификаторКод,
	//               |	ВложенныйЗапрос.АтрибутКод КАК АтрибутКод,
	//               |	ВложенныйЗапрос.ЭлементКлассификатораКод КАК ЭлементКлассификатораКод,
	//               |	ВложенныйЗапрос.КлассификаторНомерПоПорядку КАК КлассификаторНомерПоПорядку,
	//               |	ВложенныйЗапрос.АтрибутНомерПоПорядку КАК АтрибутНомерПоПорядку,
	//               |	ВложенныйЗапрос.АтрибутПорядокРодителя КАК АтрибутПорядокРодителя
	//               |ПОМЕСТИТЬ ВТ_БезИтогов
	//               |ИЗ
	//               |	(ВЫБРАТЬ
	//               |		ВложенныйДоГруппировки.Классификатор КАК Классификатор,
	//               |		ВложенныйДоГруппировки.ЭлементКлассификатора КАК ЭлементКлассификатора,
	//               |		ВложенныйДоГруппировки.Атрибут КАК Атрибут,
	//               |		ВложенныйДоГруппировки.КлассификаторНаименование КАК КлассификаторНаименование,
	//               |		ВложенныйДоГруппировки.ЭлементКлассификатораНаименование КАК ЭлементКлассификатораНаименование,
	//               |		ВложенныйДоГруппировки.АтрибутНаименование КАК АтрибутНаименование,
	//               |		ВложенныйДоГруппировки.КлассификаторКод КАК КлассификаторКод,
	//               |		ВложенныйДоГруппировки.АтрибутКод КАК АтрибутКод,
	//               |		ВложенныйДоГруппировки.ЭлементКлассификатораКод КАК ЭлементКлассификатораКод,
	//               |		ВложенныйДоГруппировки.КлассификаторНомерПоПорядку КАК КлассификаторНомерПоПорядку,
	//               |		ВложенныйДоГруппировки.АтрибутНомерПоПорядку КАК АтрибутНомерПоПорядку,
	//               |		ВложенныйДоГруппировки.АтрибутПорядокРодителя КАК АтрибутПорядокРодителя
	//               |	ИЗ
	//               |		(ВЫБРАТЬ
	//               |			ВТ_Классификаторы.Классификатор КАК Классификатор,
	//               |			ЭлементыКлассификаторов.Ссылка КАК ЭлементКлассификатора,
	//               |			ЗначенияАтрибутов.Атрибут КАК Атрибут,
	//               |			ВТ_Классификаторы.Классификатор.Наименование КАК КлассификаторНаименование,
	//               |			ЭлементыКлассификаторов.Наименование КАК ЭлементКлассификатораНаименование,
	//               |			ЗначенияАтрибутов.Атрибут.Наименование КАК АтрибутНаименование,
	//               |			ВТ_Классификаторы.Классификатор.Код КАК КлассификаторКод,
	//               |			ЗначенияАтрибутов.Атрибут.Код КАК АтрибутКод,
	//               |			ЭлементыКлассификаторов.Код КАК ЭлементКлассификатораКод,
	//               |			ВТ_Классификаторы.КлассификаторНомерПоПорядку КАК КлассификаторНомерПоПорядку,
	//               |			ЗначенияАтрибутов.НомерПоПорядку КАК АтрибутНомерПоПорядку,
	//               |			ЗначенияАтрибутов.Атрибут.РеквизитДопУпорядочивания КАК АтрибутПорядокРодителя
	//               |		ИЗ
	//               |			ВТ_Классификаторы КАК ВТ_Классификаторы
	//               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыКлассификаторов КАК ЭлементыКлассификаторов
	//               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияАтрибутов КАК ЗначенияАтрибутов
	//               |					ПО ЭлементыКлассификаторов.Ссылка = ЗначенияАтрибутов.Объект
	//               |				ПО ВТ_Классификаторы.Классификатор = ЭлементыКлассификаторов.Владелец
	//               |		
	//               |		ОБЪЕДИНИТЬ ВСЕ
	//               |		
	//               |		ВЫБРАТЬ
	//               |			ВТ_Классификаторы.Классификатор,
	//               |			ЭлементыКлассификаторов.Ссылка,
	//               |			ЗначенияАтрибутов.Атрибут,
	//               |			ВТ_Классификаторы.Классификатор.Наименование,
	//               |			ЭлементыКлассификаторов.Наименование,
	//               |			ЗначенияАтрибутов.Атрибут.Наименование,
	//               |			ВТ_Классификаторы.Классификатор.Код,
	//               |			ЗначенияАтрибутов.Атрибут.Код,
	//               |			ЭлементыКлассификаторов.Код,
	//               |			ВТ_Классификаторы.КлассификаторНомерПоПорядку,
	//               |			ЗначенияАтрибутов.НомерПоПорядку,
	//               |			ЗначенияАтрибутов.Атрибут.РеквизитДопУпорядочивания
	//               |		ИЗ
	//               |			ВТ_Классификаторы КАК ВТ_Классификаторы
	//               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыКлассификаторов КАК ЭлементыКлассификаторов
	//               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Замыкания КАК ВТ_Замыкания
	//               |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияАтрибутов КАК ЗначенияАтрибутов
	//               |						ПО ВТ_Замыкания.Предок = ЗначенияАтрибутов.Объект
	//               |					ПО ЭлементыКлассификаторов.Ссылка = ВТ_Замыкания.Потомок
	//               |				ПО ВТ_Классификаторы.Классификатор = ЭлементыКлассификаторов.Владелец
	//               |					И (ВТ_Классификаторы.НаследоватьАтрибуты = ИСТИНА)) КАК ВложенныйДоГруппировки
	//               |	
	//               |	СГРУППИРОВАТЬ ПО
	//               |		ВложенныйДоГруппировки.ЭлементКлассификатора,
	//               |		ВложенныйДоГруппировки.Атрибут,
	//               |		ВложенныйДоГруппировки.Классификатор,
	//               |		ВложенныйДоГруппировки.КлассификаторНаименование,
	//               |		ВложенныйДоГруппировки.КлассификаторКод,
	//               |		ВложенныйДоГруппировки.ЭлементКлассификатораНаименование,
	//               |		ВложенныйДоГруппировки.АтрибутНаименование,
	//               |		ВложенныйДоГруппировки.АтрибутКод,
	//               |		ВложенныйДоГруппировки.ЭлементКлассификатораКод,
	//               |		ВложенныйДоГруппировки.КлассификаторНомерПоПорядку,
	//               |		ВложенныйДоГруппировки.АтрибутНомерПоПорядку,
	//               |		ВложенныйДоГруппировки.АтрибутПорядокРодителя) КАК ВложенныйЗапрос
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВТ_БезИтогов.Классификатор КАК Классификатор,
	//               |	ВТ_БезИтогов.ЭлементКлассификатора КАК ЭлементКлассификатора,
	//               |	ВТ_БезИтогов.Атрибут КАК Атрибут,
	//               |	ВТ_БезИтогов.КлассификаторНаименование КАК КлассификаторНаименование,
	//               |	ВТ_БезИтогов.ЭлементКлассификатораНаименование КАК ЭлементКлассификатораНаименование,
	//               |	ВТ_БезИтогов.АтрибутНаименование КАК АтрибутНаименование,
	//               |	ВТ_БезИтогов.КлассификаторКод КАК КлассификаторКод,
	//               |	ВТ_БезИтогов.АтрибутКод КАК АтрибутКод,
	//               |	Атрибуты.ТипЗначения КАК ТипЗначения,
	//               |	ВТ_БезИтогов.ЭлементКлассификатораКод КАК ЭлементКлассификатораКод,
	//               |	ВТ_БезИтогов.КлассификаторНомерПоПорядку КАК КлассификаторНомерПоПорядку,
	//               |	ВТ_БезИтогов.АтрибутНомерПоПорядку КАК АтрибутНомерПоПорядку,
	//               |	ВТ_БезИтогов.АтрибутПорядокРодителя КАК АтрибутПорядокРодителя
	//               |ИЗ
	//               |	ВТ_БезИтогов КАК ВТ_БезИтогов
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.Атрибуты КАК Атрибуты
	//               |		ПО ВТ_БезИтогов.Атрибут = Атрибуты.Ссылка
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	КлассификаторНомерПоПорядку
	//               |ИТОГИ ПО
	//               |	Классификатор,
	//               |	ЭлементКлассификатора";
	//
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "//////  ТекстЗапросаЗамыканий  //////", ПолучитьТекстЗапросаТранзитивногоЗамыкания(64));
	//
	//Запрос.УстановитьПараметр("ИдентификаторСправочника", ИдентификаторСправочника);
	//	
	//СхемаЗапроса = Новый СхемаЗапроса;
	//СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	//ИндексПакета = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	//
	//СправочникНСИОбъект = УправлениеНСИ.ПолучитьСправочникНСИПоИдентификатору(ИдентификаторСправочника);
	//Если СправочникНСИОбъект <> Неопределено Тогда		
	//	Если СправочникНСИОбъект.ОтображениеАтрибутов = Перечисления.ОтображениеАтрибутов.ПоГруппамАтрибутов Тогда
	//		КолонкаСортировки = СхемаЗапроса.ПакетЗапросов[ИндексПакета].Колонки[12];
	//	Иначе
	//		КолонкаСортировки = СхемаЗапроса.ПакетЗапросов[ИндексПакета].Колонки[11];
	//	КонецЕсли;
	//	
	//	СхемаЗапроса.ПакетЗапросов[ИндексПакета].Порядок.Добавить(КолонкаСортировки);
	//КонецЕсли;
	//		
	//Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	//
	//ВыборкаКлассификаторы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаКлассификаторы.Следующий() Цикл
	//	СтрокаКлассификатор = ДеревоРезультат.Строки.Добавить();
	//	ВыборкаКГ           = ВыборкаКлассификаторы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока ВыборкаКГ.Следующий() Цикл
	//		СтрокаКГ         = СтрокаКлассификатор.Строки.Добавить();
	//		ВыборкаАтрибуты  = ВыборкаКГ.Выбрать();
	//		Пока ВыборкаАтрибуты.Следующий() Цикл				
	//			СтрокаКлассификатор.Объект       = ВыборкаАтрибуты.Классификатор;
	//			СтрокаКлассификатор.Наименование = ВыборкаАтрибуты.КлассификаторНаименование;
	//			СтрокаКлассификатор.Код          = ВыборкаАтрибуты.КлассификаторКод;
	//											
	//			СтрокаКГ.Объект                  = ВыборкаАтрибуты.ЭлементКлассификатора;
	//			СтрокаКГ.Наименование            = ВыборкаАтрибуты.ЭлементКлассификатораНаименование;
	//			СтрокаКГ.Код                     = ВыборкаАтрибуты.ЭлементКлассификатораКод;
	//			
	//			СтрокаАтрибут                    = СтрокаКГ.Строки.Добавить();
	//			СтрокаАтрибут.Объект             = ВыборкаАтрибуты.Атрибут;
	//			СтрокаАтрибут.Наименование       = ВыборкаАтрибуты.АтрибутНаименование;
	//			СтрокаАтрибут.Код                = ВыборкаАтрибуты.АтрибутКод;
	//			СтрокаАтрибут.ТипЗначения        = ВыборкаАтрибуты.ТипЗначения;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;	
	//
	//Возврат ДеревоРезультат;
		
КонецФункции

Функция ПолучитьТекстЗапросаТранзитивногоЗамыкания(МаксимальнаяДлинаПути)

	Пролог = "
	         |ВЫБРАТЬ
	         |	Родитель КАК НачалоДуги,
	         |	Ссылка КАК КонецДуги
			 |ПОМЕСТИТЬ ЗамыканияДлины1
			 |ИЗ
	         |	Справочник.ЭлементыКлассификаторов
			 |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Классификаторы
			 |		ПО Владелец = ВТ_Классификаторы.Классификатор
	         |ГДЕ
	         |	Родитель <> ЗНАЧЕНИЕ(Справочник.ЭлементыКлассификаторов.ПустаяСсылка)
			 |
			 |ОБЪЕДИНИТЬ 
			 |	ВЫБРАТЬ 
			 |	Ссылка, 
			 |	Ссылка 
			 |ИЗ 
			 |	Справочник.ЭлементыКлассификаторов
			 |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Классификаторы
			 |		ПО Владелец = ВТ_Классификаторы.Классификатор;
			 |";
	
	Рефрен = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			 |	ПерваяДуга.НачалоДуги,
			 |	ВтораяДуга.КонецДуги
			 |ПОМЕСТИТЬ ЗамыканияДлины#2 
			 |	ИЗ ЗамыканияДлины#1 КАК ПерваяДуга
             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины#1 КАК ВтораяДуга 
			 |		ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги;
			 |
			 |УНИЧТОЖИТЬ ЗамыканияДлины#1;
			 |";

	Эпилог = "ВЫБРАТЬ 
			 |НачалоДуги Предок, 
			 |КонецДуги Потомок 
			 |ПОМЕСТИТЬ ВТ_Замыкания
			 |	ИЗ ЗамыканияДлины#2 
			 |ГДЕ НачалоДуги <> КонецДуги;";
	
	ТекстЗапроса = Пролог;
	
	МаксимальнаяДлинаЗамыканий = 1;

	Пока МаксимальнаяДлинаЗамыканий < МаксимальнаяДлинаПути Цикл
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(СтрЗаменить(Рефрен, "#1", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0")), "#2", Формат(2 * МаксимальнаяДлинаЗамыканий, "ЧГ=0"));
		МаксимальнаяДлинаЗамыканий = 2 * МаксимальнаяДлинаЗамыканий
    КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(Эпилог, "#2", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьОписаниеТиповЭлементаМассиваНСИ(Предмет)
	
	ОписаниеТиповРезультат = Новый ОписаниеТипов;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСвязейСправочниковНСИ.Справочник2 КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.НастройкиСвязейСправочниковНСИ КАК НастройкиСвязейСправочниковНСИ
	               |ГДЕ
	               |	НастройкиСвязейСправочниковНСИ.Справочник1 = &Предмет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НастройкиСвязейСправочниковНСИ.Справочник2";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТип              = Выборка.Ссылка.ПолноеИмя;
		МассивПодстрок         = СтрРазделить(СтрокаТип, ".", Ложь);			
		ТипЭлемента            = МассивПодстрок[0] + "Ссылка." + МассивПодстрок[1];
		ОписаниеТиповРезультат = Новый ОписаниеТипов(ОписаниеТиповРезультат, ТипЭлемента);		
	КонецЦикла;	
	
	Возврат ОписаниеТиповРезультат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедуры

Процедура ИнициализироватьРеквизитАдресаПредзаполненных(Форма) 
	
	ИмяРеквизитаАдреса = лм_УниверсальныеСтруктурыДанныхКлиентСервер.ИмяРеквизитаПредзаполненныхДанных();
		
	МассивРеквизитов = Новый Массив;
	РеквизитАдреса   = Новый РеквизитФормы(ИмяРеквизитаАдреса, Новый ОписаниеТипов("Строка"));
	МассивРеквизитов.Добавить(РеквизитАдреса);	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);	
	Форма[ИмяРеквизитаАдреса] = ПоместитьВоВременноеХранилище(Новый Соответствие, Новый УникальныйИдентификатор);
			
КонецПроцедуры

#КонецОбласти