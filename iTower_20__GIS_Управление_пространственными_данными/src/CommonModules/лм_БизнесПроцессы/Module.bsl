
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьПроизвольныйСценарийИзФормыЗадачи(ПараметрыСценария, Отказ, ТекстОшибки) Экспорт
	
	Форма  = ПараметрыСценария.Форма;
	Объект = Форма.Объект;
	
	Если Не ПараметрыСценария.Свойство("ПроизвольныйСценарийСервер") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Выполнить(ПараметрыСценария.ПроизвольныйСценарийСервер);
	Исключение
		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьБизнесПроцессПоШаблону(ШаблонБизнесПроцесса, Родитель = Неопределено, РодительОжидаетЗавершения = Ложь, ИдентификаторТочкиВхода = Неопределено, Итерация = 1, Предмет = Неопределено, ДанныеПроцесса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ШаблонБизнесПроцесса.Статус <> Перечисления.лм_СтатусыШаблонов.Активен Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для возможности запуска процесса необходимо перевести шаблон """ + ШаблонБизнесПроцесса.Наименование + """ в статус ""Активен"".";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
			
	УстановитьПривилегированныйРежим(Истина);
	
	НеобходимоБлокироватьПредмет = Ложь;
	БлокировкаВозможна = Истина;
	Если Предмет <> Неопределено
			И ОбщегоНазначения.ПодсистемаСуществует("лм_ЗахватОбъектов") Тогда
		ТипПредмета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Предмет));
		НеобходимоБлокироватьПредмет = ШаблонБизнесПроцесса.Предметы.Найти(ТипПредмета, "ТипПредмета").Блокировать;
		МодульЗахватОбъектов = ОбщегоНазначения.ОбщийМодуль("лм_ЗахватОбъектов");
		БлокировкаВозможна = НЕ МодульЗахватОбъектов.ОбъектЗаблокирован(Предмет);
	КонецЕсли;
	Если НеобходимоБлокироватьПредмет 
			И НЕ БлокировкаВозможна Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось запустить процесс: объект """ + Строка(Предмет) + """ заблокирован.";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;	
	
	// НачалоЗамераПроизводительности
НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
// Конец НачалоЗамераПроизводительности
		
	СозданныйБизнесПроцесс = БизнесПроцессы.лм_БизнесПроцесс.СоздатьБизнесПроцесс();
	СозданныйБизнесПроцесс.Шаблон = ШаблонБизнесПроцесса;
	СозданныйБизнесПроцесс.Родитель = Родитель;
	СозданныйБизнесПроцесс.РодительОжидаетЗавершения = РодительОжидаетЗавершения;
	СозданныйБизнесПроцесс.ИдентификаторТочкиВхода = ИдентификаторТочкиВхода;
	СозданныйБизнесПроцесс.Итерация = Итерация;
	СозданныйБизнесПроцесс.Дата = ТекущаяДата();	
	
	// Требуется более корректно запрограммировать данный функционал.
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПрочиеДанныеПроцесса")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ПрочиеДанныеПроцесса.Получить("Автор")) Тогда
		
		СозданныйБизнесПроцесс.Автор = ДополнительныеПараметры.ПрочиеДанныеПроцесса.Получить("Автор");
	Иначе
		СозданныйБизнесПроцесс.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;

	СозданныйБизнесПроцесс.Предмет = Предмет;
	СозданныйБизнесПроцесс.НомерВерсии = ШаблонБизнесПроцесса.НомерВерсии;
	СозданныйБизнесПроцесс.СрокЗавершения = РассчитатьСрок(СозданныйБизнесПроцесс.Дата, ШаблонБизнесПроцесса.ГрафикРаботы, ШаблонБизнесПроцесса.ВремяВыполнения);
	СозданныйБизнесПроцесс.Записать();
	
	ЗаписатьОбщиеПараметрыБизнесПроцесса(СозданныйБизнесПроцесс.Ссылка, ШаблонБизнесПроцесса.Параметры.Получить());
		
	Если ДанныеПроцесса <> Неопределено Тогда
		ИдентификаторСтруктуры = ШаблонБизнесПроцесса.УникальныйИдентификатор();
		СтруктураДанных        = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
		
		лм_БизнесПроцессыПереопределяемый.СоздатьБизнесПроцесс_ПередЗаписьюДанныхПроцесса(ДанныеПроцесса, СтруктураДанных, СозданныйБизнесПроцесс.Ссылка, ДополнительныеПараметры);
		
		лм_УниверсальныеСтруктурыДанных.ЗаписатьЗначенияУниверсальнойСтруктуры(СозданныйБизнесПроцесс.Ссылка, ДанныеПроцесса, СтруктураДанных);
	КонецЕсли;
	
	Если НеобходимоБлокироватьПредмет Тогда
		МодульЗахватОбъектов = ОбщегоНазначения.ОбщийМодуль("лм_ЗахватОбъектов");
		МодульЗахватОбъектов.ЗаблокироватьОбъект(Предмет, СозданныйБизнесПроцесс.Ссылка);
	КонецЕсли;
		
	СозданныйБизнесПроцесс.Старт();
		
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Процесс """ + Строка(ШаблонБизнесПроцесса) + """ успешно запущен.";
	Сообщение.Сообщить();
	
	// ЗавершениеЗамераПроизводительности
ОценкаПроизводительности.ЗакончитьЗамерВремени("Бизнес-процесс.СозданиеПроцесса", НачалоЗамера);
// Конец ЗавершениеЗамераПроизводительности	
	
	Возврат СозданныйБизнесПроцесс.Ссылка;
	
КонецФункции

Процедура ПерейтиКСледующейТочке(ПараметрыБП) Экспорт
	
	// Знач по умолч: ИтерацияАктивной = 1, НаименованиеВыхода = "", 
	// НаименованиеВарианта = "", УсловиеВыполнено = Ложь. 		
	БизнесПроцесс 			= ПараметрыБП.БизнесПроцесс;
	АктивнаяТочка 			= ПараметрыБП.АктивнаяТочка;
	ИтерацияАктивной 		= ПараметрыБП.ИтерацияАктивной;
	НаименованиеВыхода 		= ПараметрыБП.НаименованиеВыхода;
	НаименованиеВарианта 	= ПараметрыБП.НаименованиеВарианта;
	УсловиеВыполнено 		= ПараметрыБП.УсловиеВыполнено;
	
	УстановитьПривилегированныйРежим(Истина);
	ПереходВозможен = ПереходКСледующейТочкеВозможен(БизнесПроцесс, АктивнаяТочка);
	
	Если ПереходВозможен = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// деактивация
	НаборЗаписей = РегистрыСведений.лм_ВыполнениеБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	НаборЗаписей.Отбор.ИдентификаторТочки.Установить(АктивнаяТочка);
	НаборЗаписей.Отбор.Итерация.Установить(ИтерацияАктивной);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Активная = Ложь;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	// определение следующих точек
	СвойстваТочки = РегистрыСведений.лм_ТочкиБизнесПроцессов.СоздатьМенеджерЗаписи();
	СвойстваТочки.ИдентификаторТочки = АктивнаяТочка;
	СвойстваТочки.Шаблон = БизнесПроцесс.Шаблон;
	СвойстваТочки.НомерВерсии = БизнесПроцесс.НомерВерсии;
	СвойстваТочки.Прочитать();
	ТипТочки = СвойстваТочки.ТипТочки;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_СценарииБизнесПроцессов.КонечнаяТочка КАК КонечнаяТочка
	               |ИЗ
	               |	РегистрСведений.лм_СценарииБизнесПроцессов КАК лм_СценарииБизнесПроцессов
	               |ГДЕ
	               |	лм_СценарииБизнесПроцессов.Шаблон = &Шаблон
	               |	И лм_СценарииБизнесПроцессов.ИсходнаяТочка = &ИсходнаяТочка
	               |	И лм_СценарииБизнесПроцессов.НаименованиеВыхода ПОДОБНО &НаименованиеВыхода
	               |	И лм_СценарииБизнесПроцессов.НаименованиеВарианта ПОДОБНО &НаименованиеВарианта
	               |	И лм_СценарииБизнесПроцессов.УсловиеВыполнено = &УсловиеВыполнено
	               |	И лм_СценарииБизнесПроцессов.НомерВерсии = &НомерВерсии";
	Запрос.УстановитьПараметр("Шаблон", БизнесПроцесс.Шаблон);
	Запрос.УстановитьПараметр("ИсходнаяТочка", АктивнаяТочка);
	Запрос.УстановитьПараметр("НаименованиеВыхода", НаименованиеВыхода);
	Запрос.УстановитьПараметр("НаименованиеВарианта", НаименованиеВарианта);
	Запрос.УстановитьПараметр("УсловиеВыполнено", УсловиеВыполнено);
	Запрос.УстановитьПараметр("НомерВерсии", БизнесПроцесс.НомерВерсии);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		СледующиеТочки = Новый Массив();
		Если ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаРазделения Тогда
			СледующиеТочки = Результат.Выгрузить().ВыгрузитьКолонку("КонечнаяТочка");
		Иначе
			СледующиеТочки.Добавить(Результат.Выгрузить().ВыгрузитьКолонку("КонечнаяТочка")[0]);
		КонецЕсли;
		
		// определение итераций следующих точек
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	лм_ВыполнениеБизнесПроцессов.ИдентификаторТочки КАК ИдентификаторТочки,
		               |	МАКСИМУМ(лм_ВыполнениеБизнесПроцессов.Итерация) КАК Итерация
		               |ИЗ
		               |	РегистрСведений.лм_ВыполнениеБизнесПроцессов КАК лм_ВыполнениеБизнесПроцессов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.лм_ТочкиБизнесПроцессов КАК лм_ТочкиБизнесПроцессов
		               |		ПО лм_ВыполнениеБизнесПроцессов.ИдентификаторТочки = лм_ТочкиБизнесПроцессов.ИдентификаторТочки
		               |ГДЕ
		               |	лм_ВыполнениеБизнесПроцессов.БизнесПроцесс = &БизнесПроцесс
		               |	И лм_ВыполнениеБизнесПроцессов.ИдентификаторТочки В(&МассивТочек)
		               |	И (лм_ТочкиБизнесПроцессов.ТипТочки <> ЗНАЧЕНИЕ(Перечисление.лм_ТипыТочекБизнесПроцессов.ТочкаСлияния)
		               |			ИЛИ лм_ВыполнениеБизнесПроцессов.ИдентификаторТочкиВхода = &ИдентификаторТочкиВхода)
		               |	И лм_ТочкиБизнесПроцессов.НомерВерсии = &НомерВерсии
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	лм_ВыполнениеБизнесПроцессов.ИдентификаторТочки";
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		Запрос.УстановитьПараметр("МассивТочек", СледующиеТочки);
		Запрос.УстановитьПараметр("ИдентификаторТочкиВхода", АктивнаяТочка);
		Запрос.УстановитьПараметр("НомерВерсии", БизнесПроцесс.НомерВерсии);
		ИтерацииТочек = Запрос.Выполнить().Выгрузить();
		
		// установка новых активных точек
		Для Каждого Точка Из СледующиеТочки Цикл
			Итерация = 1;
			ПредыдущаяИтерация = ИтерацииТочек.Найти(Точка, "ИдентификаторТочки");
			Если ПредыдущаяИтерация <> Неопределено Тогда
				Итерация = ПредыдущаяИтерация.Итерация + 1;
			КонецЕсли;
			МенеджерЗаписи = РегистрыСведений.лм_ВыполнениеБизнесПроцессов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.БизнесПроцесс = БизнесПроцесс;
			МенеджерЗаписи.ИдентификаторТочки = Точка;
			МенеджерЗаписи.ИдентификаторТочкиВхода = АктивнаяТочка;
			МенеджерЗаписи.Итерация = Итерация;	
			МенеджерЗаписи.Активная = Истина;		
			МенеджерЗаписи.Записать();
			
			ПараметрыЗадания = Новый Массив();
			ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс;
			ПараметрыБП.АктивнаяТочка 					= Точка;
			ПараметрыБП.ИтерацияАктивной 				= Итерация;
			ПараметрыБП.НаименованиеВыхода 				= "";
			ПараметрыБП.НаименованиеВарианта			= "";
			ПараметрыБП.УсловиеВыполнено 				= Ложь;
			
			ПараметрыЗадания.Добавить(ПараметрыБП);
			ФоновыеЗадания.Выполнить("лм_БизнесПроцессы.ОбработатьАктивнуюТочку", ПараметрыЗадания,, Строка(БизнесПроцесс.УникальныйИдентификатор()));
			//ОбработатьАктивнуюТочку(ПараметрыБП);
		КонецЦикла;
		
	Иначе // следующих точек нет, процесс завершен	
		// завершение вспомогательной задачи и самого бизнес-процесса
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
		               |ИЗ
		               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		               |ГДЕ
		               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		ВыборкаЗадач = Запрос.Выполнить().Выбрать();
		Пока ВыборкаЗадач.Следующий() Цикл
			ЗадачаОбъект = ВыборкаЗадач.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЦикла;
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.ДатаЗавершения = ТекущаяДата();
		БизнесПроцессОбъект.ДополнительныеСвойства.Вставить("Завершение", Истина);
		БизнесПроцессОбъект.Записать();
		
		Если ЗначениеЗаполнено(БизнесПроцесс.Родитель) Тогда
			ВыполнитьОбработкуЗавершенияПодпроцесса(БизнесПроцесс);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс.Родитель)
				И БизнесПроцесс.РодительОжидаетЗавершения Тогда
				
				ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс.Родитель;
				ПараметрыБП.АктивнаяТочка 					= БизнесПроцесс.ИдентификаторТочкиВхода;
				ПараметрыБП.ИтерацияАктивной 				= БизнесПроцесс.Итерация;
				ПараметрыБП.НаименованиеВыхода 				= "";
				ПараметрыБП.НаименованиеВарианта			= "";
				ПараметрыБП.УсловиеВыполнено 				= Ложь;
			
				ПерейтиКСледующейТочке(ПараметрыБП);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьАктивнуюТочку(ПараметрыБП) Экспорт
	
	// Знач по умолч: Итерация = 1.
	БизнесПроцесс 		= ПараметрыБП.БизнесПроцесс;
	ИдентификаторТочки 	= ПараметрыБП.АктивнаяТочка;
	Итерация 			= ПараметрыБП.ИтерацияАктивной;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваТочки = ПолучитьСвойстваТочки(БизнесПроцесс, ИдентификаторТочки);
	ТипТочки = СвойстваТочки.ТипТочки;
	
	Если ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаДействия Тогда
		ИсполнителиЗадачи = Новый Массив();
		Если СвойстваТочки.Групповая Тогда
			ИсполнителиЗадачи = ПолучитьМассивИсполнителейРоли(СвойстваТочки.Исполнитель, СвойстваТочки.ОсновнойОбъектАдресации, СвойстваТочки.ДополнительныйОбъектАдресации);	
		Иначе
			ИсполнителиЗадачи.Добавить(СвойстваТочки.Исполнитель);
		КонецЕсли;
		
		Для Каждого Исполнитель Из ИсполнителиЗадачи Цикл
			СозданнаяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			СозданнаяЗадача.Наименование = СвойстваТочки.НаименованиеТочки;
			СозданнаяЗадача.БизнесПроцесс = БизнесПроцесс;
			СозданнаяЗадача.ИдентификаторТочки = ИдентификаторТочки;
			СозданнаяЗадача.ШаблонБизнесПроцесса = БизнесПроцесс.Шаблон; // зачем нужен этот реквизит?
			СозданнаяЗадача.Итерация = Итерация;
			СозданнаяЗадача.Дата = ТекущаяДата();
			СозданнаяЗадача.Автор = БизнесПроцесс.Автор;
			СозданнаяЗадача.Предмет = БизнесПроцесс.Предмет;
			СозданнаяЗадача.СрокИсполнения = РассчитатьСрок(СозданнаяЗадача.Дата, БизнесПроцесс.Шаблон.ГрафикРаботы, СвойстваТочки.ВремяВыполнения); 
			
			СтруктураДанных = Неопределено;
			ДанныеПроцесса 	= Неопределено;

			Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи")
				 ИЛИ ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				СозданнаяЗадача.Исполнитель = Исполнитель;
			ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				СозданнаяЗадача.РольИсполнителя               = Исполнитель;			
				СозданнаяЗадача.ОсновнойОбъектАдресации       = СвойстваТочки.ОсновнойОбъектАдресации;
				СозданнаяЗадача.ДополнительныйОбъектАдресации = СвойстваТочки.ДополнительныйОбъектАдресации;
			Иначе
				НастройкиАвтоподстановки = СвойстваТочки.НастройкиАвтоподстановки.Получить();
				Если НастройкиАвтоподстановки <> Неопределено 
						И НастройкиАвтоподстановки.Свойство("ЗначениеАвтоподстановки") Тогда
					ИдентификаторСтруктуры = БизнесПроцесс.Шаблон.УникальныйИдентификатор();
					СтруктураДанных = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
					ДанныеПроцесса = лм_УниверсальныеСтруктурыДанных.ПолучитьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, СтруктураДанных);
					Попытка
						Выполнить("СозданнаяЗадача.Исполнитель = " + НастройкиАвтоподстановки.ЗначениеАвтоподстановки);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			СозданнаяЗадача.ОсновнойОбъектАдресации = СвойстваТочки.ОсновнойОбъектАдресации;
			СозданнаяЗадача.ДополнительныеСвойства.Вставить("СозданиеЗадачи", Истина);
			
			// Наследуем Важность от предшествующей задачи.
			Если ПараметрыБП.Свойство("ВажностьЗадачи")
				И ЗначениеЗаполнено(ПараметрыБП.ВажностьЗадачи) Тогда
				СозданнаяЗадача.Важность = ПараметрыБП.ВажностьЗадачи;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СвойстваТочки.ОбработчикПослеЗавершения) Тогда							
				ВыполнитьОбработчикТД(СвойстваТочки.ОбработчикПослеЗавершения, СозданнаяЗадача, БизнесПроцесс, ДанныеПроцесса, ПараметрыБП);				
			КонецЕсли;
			
			СозданнаяЗадача.Записать();
		КонецЦикла;
		
		ДополнительныеСвойстваТБ = СвойстваТочки.ДополнительныеСвойства.Получить();
		Если НЕ ДополнительныеСвойстваТБ = Неопределено И ДополнительныеСвойстваТБ.Свойство("ЗаполнениеПоПредметам")
			И ЗначениеЗаполнено(БизнесПроцесс.Предмет) И ЗначениеЗаполнено(ДополнительныеСвойстваТБ.ЗаполнениеПоПредметам) Тогда
			
			ПараметрыЗаполненияПоПредмету = Новый Структура;
			ПараметрыЗаполненияПоПредмету.Вставить("Предмет", 					БизнесПроцесс.Предмет);
			ПараметрыЗаполненияПоПредмету.Вставить("БизнесПроцесс", 			БизнесПроцесс);
			ПараметрыЗаполненияПоПредмету.Вставить("ЗаполнениеПоПредметам", 	ДополнительныеСвойстваТБ.ЗаполнениеПоПредметам);
			
			ЗаполнитьПоПредметуБПРеквизитыЗадачи(ПараметрыЗаполненияПоПредмету);
			
		КонецЕсли;
		
	ИначеЕсли ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаОбработки Тогда
		ВыполнитьДействияТочкиОбработки(БизнесПроцесс, ИдентификаторТочки);
		
		ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс;
		ПараметрыБП.АктивнаяТочка 					= ИдентификаторТочки;
		ПараметрыБП.ИтерацияАктивной 				= Итерация;
		ПараметрыБП.НаименованиеВыхода 				= "";
		ПараметрыБП.НаименованиеВарианта			= "";
		ПараметрыБП.УсловиеВыполнено 				= Ложь;
				
		ПерейтиКСледующейТочке(ПараметрыБП);
		
	ИначеЕсли ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаУсловия Тогда
		ДанныеУсловия = СвойстваТочки.ДанныеУсловия.Получить();
		УсловиеВыполнено = УсловиеТочкиБизнесПроцессаВыполнено(БизнесПроцесс, ДанныеУсловия);
		
		ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс;
		ПараметрыБП.АктивнаяТочка 					= ИдентификаторТочки;
		ПараметрыБП.ИтерацияАктивной 				= Итерация;
		ПараметрыБП.НаименованиеВыхода 				= "";
		ПараметрыБП.НаименованиеВарианта			= "";
		ПараметрыБП.УсловиеВыполнено 				= УсловиеВыполнено;
		
		ПерейтиКСледующейТочке(ПараметрыБП);
		
	ИначеЕсли ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаПодпроцесса Тогда
		ТаблицаПодпроцессов = СформироватьТаблицуПодпроцессов(СвойстваТочки.ШаблонПодпроцесса);
		ВыполнитьЗапускПодпроцессов(ТаблицаПодпроцессов, БизнесПроцесс, СвойстваТочки, ИдентификаторТочки, Итерация);		
		Если СвойстваТочки.ОжидатьЗавершенияПодпроцесса = Ложь ИЛИ ТаблицаПодпроцессов.Количество() = 0 Тогда
			
			ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс;
			ПараметрыБП.АктивнаяТочка 					= ИдентификаторТочки;
			ПараметрыБП.ИтерацияАктивной 				= Итерация;
			ПараметрыБП.НаименованиеВыхода 				= "";
			ПараметрыБП.НаименованиеВарианта			= "";
			ПараметрыБП.УсловиеВыполнено 				= Ложь;
			
			ПерейтиКСледующейТочке(ПараметрыБП);
		КонецЕсли;
		
	ИначеЕсли ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаРазделения Тогда
		
		ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс;
		ПараметрыБП.АктивнаяТочка 					= ИдентификаторТочки;
		ПараметрыБП.ИтерацияАктивной 				= Итерация;
		ПараметрыБП.НаименованиеВыхода 				= "";
		ПараметрыБП.НаименованиеВарианта			= "";
		ПараметрыБП.УсловиеВыполнено 				= Ложь;
		
		ПерейтиКСледующейТочке(ПараметрыБП);
		
	ИначеЕсли ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаСлияния Тогда
		
		ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс;
		ПараметрыБП.АктивнаяТочка 					= ИдентификаторТочки;
		ПараметрыБП.ИтерацияАктивной 				= Итерация;
		ПараметрыБП.НаименованиеВыхода 				= "";
		ПараметрыБП.НаименованиеВарианта			= "";
		ПараметрыБП.УсловиеВыполнено 				= Ложь;
		
		ПерейтиКСледующейТочке(ПараметрыБП);
		
	ИначеЕсли ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаВыбора Тогда
		// заглушка 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	лм_СценарииБизнесПроцессов.НаименованиеВарианта КАК НаименованиеВарианта
		               |ИЗ
		               |	РегистрСведений.лм_СценарииБизнесПроцессов КАК лм_СценарииБизнесПроцессов
		               |ГДЕ
		               |	лм_СценарииБизнесПроцессов.Шаблон = &Шаблон
		               |	И лм_СценарииБизнесПроцессов.ИсходнаяТочка = &ИсходнаяТочка
		               |	И лм_СценарииБизнесПроцессов.НомерВерсии = &НомерВерсии
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НаименованиеВарианта";
		Запрос.УстановитьПараметр("Шаблон", БизнесПроцесс.Шаблон);
		Запрос.УстановитьПараметр("ИсходнаяТочка", ИдентификаторТочки);
		Запрос.УстановитьПараметр("НомерВерсии", БизнесПроцесс.НомерВерсии);
		ВариантыВыбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		Если ВариантыВыбора.Количество() > 0 Тогда
			
			ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс;
			ПараметрыБП.АктивнаяТочка 					= ИдентификаторТочки;
			ПараметрыБП.ИтерацияАктивной 				= Итерация;
			ПараметрыБП.НаименованиеВыхода 				= "";
			ПараметрыБП.НаименованиеВарианта			= ВариантыВыбора[0];
			ПараметрыБП.УсловиеВыполнено 				= Ложь;
			
			ПерейтиКСледующейТочке(ПараметрыБП);
		КонецЕсли;
		
	Иначе
		// завершение процесса - обрабатывается при попытке перехода к следующей точке	
		ПараметрыБП.БизнесПроцесс 					= БизнесПроцесс;
		ПараметрыБП.АктивнаяТочка 					= ИдентификаторТочки;
		ПараметрыБП.ИтерацияАктивной 				= Итерация;
		ПараметрыБП.НаименованиеВыхода 				= "";
		ПараметрыБП.НаименованиеВарианта			= "";
		ПараметрыБП.УсловиеВыполнено 				= Ложь;
		
		ПерейтиКСледующейТочке(ПараметрыБП);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСхемуКомпоновкиДанныхСтруктуры(ВладелецСтруктуры, УникальныйИдентификатор, ВладелецЗначений = Неопределено) Экспорт
	
	ДанныеЗапроса = ДанныеЗапросаРеквизитовУниверсальнойСтруктуры(ВладелецСтруктуры, ВладелецЗначений);
	Если ПустаяСтрока(ДанныеЗапроса.ТекстЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ЗапросРеквизитов";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ДанныеЗапроса.ТекстЗапроса;
	НаборДанных.ИсточникДанных = "ЗапросРеквизитов";
	НаборДанных.Имя = "НаборДанныхЗапрос";
	
	ГруппировкаДетали = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетали.Использование = Истина;
	
	Для Каждого ДанныеПараметра Из ДанныеЗапроса.ПараметрыЗапроса Цикл
		ИмяПоля = ДанныеПараметра.Имя;
		
		ПолеСсылка = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеСсылка.Поле = ИмяПоля;
		ПолеСсылка.ПутьКДанным = ИмяПоля;
		ПолеСсылка.Заголовок = ИмяПоля;		
		
		ВыбранноеПоле = ГруппировкаДетали.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ВыбранноеПоле.Заголовок = ИмяПоля;	
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(Параметр, ДанныеПараметра);
	КонецЦикла;	
		
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

Функция ПолучитьСхемуКомпоновкиДанныхОбъекта(ИдентификаторОбъектаМетаданных, УникальныйИдентификатор, Ссылка = Неопределено) Экспорт
	
	Ссылка = ?(Ссылка = Неопределено, ИдентификаторОбъектаМетаданных.ЗначениеПустойСсылки, Ссылка);
	ДанныеЗапроса = ДанныеЗапросаРеквизитовОбъекта(ИдентификаторОбъектаМетаданных, Ссылка);
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ЗапросРеквизитов";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ДанныеЗапроса.ТекстЗапроса;
	СхемаКомпоновкиДанных.НаборыДанных[0].ИсточникДанных = "ЗапросРеквизитов";
	СхемаКомпоновкиДанных.НаборыДанных[0].Имя = "НаборДанныхЗапрос";
	
	ПолеСсылка = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеСсылка.Поле = "Ссылка";
	ПолеСсылка.ПутьКДанным = "Ссылка";
	ПолеСсылка.Заголовок = "Ссылка";		
	
	ГруппировкаДетали = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетали.Использование = Истина;
	
	ВыбранноеПоле = ГруппировкаДетали.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ВыбранноеПоле.Заголовок = "Ссылка";		
	
	Для Каждого ДанныеПараметра Из ДанныеЗапроса.ПараметрыЗапроса Цикл
		Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(Параметр, ДанныеПараметра);
	КонецЦикла;	
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

Функция ФормаНастройкиДействияОбработки(ТипДействия) Экспорт
	
	ИмяФормыНастройки = "";
	Если лм_БизнесПроцессыКлиентСервер.ЭтоПредопределенныйТипДействия(ТипДействия) Тогда
		ИмяФормыНастройки = "Справочник.лм_ШаблоныБизнесПроцессов.Форма.ФормаНастройкиДействия";
	Иначе
		ИмяФормыНастройки = лм_БизнесПроцессыПереопределяемый.ОпределитьФормуНастроекДействияТочкиОбработки(ТипДействия);
	КонецЕсли;
	
	Возврат ИмяФормыНастройки;
	
КонецФункции

Процедура ОбновитьКомандыФормыПредмета(Форма, ИмяГруппы, Знач Предмет) Экспорт
	
	Если Не УправлениеДоступом.ЕстьРоль("лм_ЗапускБизнесПроцессов") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
		
	ТипПредмета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Предмет));
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	лм_ШаблоныБизнесПроцессов.Ссылка КАК Ссылка,
	               |	лм_ШаблоныБизнесПроцессовПредметы.УсловияОтбора КАК УсловияОтбора
	               |ИЗ
	               |	Справочник.лм_ШаблоныБизнесПроцессов КАК лм_ШаблоныБизнесПроцессов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
	               |		ПО лм_ШаблоныБизнесПроцессов.Ссылка = лм_ШаблоныБизнесПроцессовПредметы.Ссылка
	               |ГДЕ
	               |	лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета = &ТипПредмета
	               |	И лм_ШаблоныБизнесПроцессовПредметы.Ссылка.Статус = &Статус
	               |	И лм_ШаблоныБизнесПроцессовПредметы.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ТипПредмета", ТипПредмета);
	Запрос.УстановитьПараметр("Статус", Перечисления.лм_СтатусыШаблонов.Активен);
	ШаблоныБП = Запрос.Выполнить().Выгрузить();
	ДоступныеШаблоны = Новый Массив();
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Неопределено);
	Для Каждого СтрокаШаблона Из ШаблоныБП Цикл
		ДанныеОтбора = СтрокаШаблона.УсловияОтбора.Получить();
		Если ТипЗнч(ДанныеОтбора) <> Тип("НастройкиКомпоновкиДанных") Тогда
			ДоступныеШаблоны.Добавить(СтрокаШаблона.Ссылка);
			Продолжить;
		КонецЕсли;
		
		ПолучитьСхемуКомпоновкиДанныхОбъекта(ТипПредмета, АдресСхемыКомпоновкиДанных, Предмет);
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
				
		СкопироватьОтборРекурсивно(Настройки.Отбор.Элементы, ДанныеОтбора.Отбор.Элементы);
		
		Для Каждого Параметр Из СхемаКомпоновкиДанных.Параметры Цикл			
			ПараметрДанных               = Настройки.ПараметрыДанных.Элементы.Добавить();
			ПараметрДанных.Параметр      = Новый ПараметрКомпоновкиДанных(Параметр.Имя);
			ПараметрДанных.Значение      = Параметр.Значение;
			ПараметрДанных.Использование = Истина;
		КонецЦикла;
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если ТаблицаРезультат.Количество() > 0 Тогда
			ДоступныеШаблоны.Добавить(СтрокаШаблона.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Команды = Форма.Команды;
	Элементы = Форма.Элементы;
	КомандыКУдалению = Новый Массив();
	Для Каждого Команда Из Команды Цикл
		Если СтрНачинаетсяС(Команда.Имя, "лм_БизнесПроцесс_") Тогда
			КомандыКУдалению.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из КомандыКУдалению Цикл
		Кнопка = Элементы.Найти(Команда.Имя);
		Элементы.Удалить(Кнопка);
		Команды.Удалить(Команда);
	КонецЦикла;
	
	//Установим отбор добавляемых команд в зависимости от групп доступа:
	//ШаблоныБизнесПроцессов или КомандыСозданияБППоШаблонамБП.
	
	Если НЕ ДоступныеШаблоны.Количество() Тогда
		Возврат;
	КонецЕсли;

	ДоступныеШаблоны = ДоступныеШаблоныПоВидамДоступа(ДоступныеШаблоны);
	
	Если НЕ ДоступныеШаблоны = Неопределено Тогда
		ЭтоМассив = ТипЗнч(ДоступныеШаблоны) = Тип("Массив");
		Для Каждого Шаблон Из ДоступныеШаблоны Цикл
			
			Если ЭтоМассив Тогда
				УникальныйИдентификатор = Шаблон.УникальныйИдентификатор();
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "Наименование");
			Иначе
				УникальныйИдентификатор = Шаблон.Шаблон.УникальныйИдентификатор();
				Наименование = Шаблон.Наименование;
			КонецЕсли;

			ИмяКоманды = "лм_БизнесПроцесс_" + СтрЗаменить(УникальныйИдентификатор, "-", "_");
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Действие = "лм_ЗапуститьБизнесПроцесс";
			Команда.Заголовок = Наименование;
			ГруппаКнопок = Элементы.Найти(ИмяГруппы);
			Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопок);
			Кнопка.ИмяКоманды = ИмяКоманды;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКомандыФормыСписка(Форма, ИмяГруппы) Экспорт
	
	Если Не УправлениеДоступом.ЕстьРоль("лм_ЗапускБизнесПроцессов") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормы = Форма.ИмяФормы;
	ПозицияРазделителя = СтрНайти(ИмяФормы, ".",,, 2);
	ОписаниеОбъектаМетаданных = Лев(ИмяФормы, ПозицияРазделителя - 1);
	ТипПредмета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	лм_ШаблоныБизнесПроцессовПредметы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.лм_ШаблоныБизнесПроцессов.Предметы КАК лм_ШаблоныБизнесПроцессовПредметы
	               |ГДЕ
	               |	лм_ШаблоныБизнесПроцессовПредметы.ТипПредмета = &ТипПредмета
	               |	И лм_ШаблоныБизнесПроцессовПредметы.Ссылка.Статус = &Статус
	               |	И лм_ШаблоныБизнесПроцессовПредметы.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ТипПредмета", ТипПредмета);
	Запрос.УстановитьПараметр("Статус", Перечисления.лм_СтатусыШаблонов.Активен);
	ДоступныеШаблоны = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Команды = Форма.Команды;
	Элементы = Форма.Элементы;
	КомандыКУдалению = Новый Массив();
	Для Каждого Команда Из Команды Цикл
		Если СтрНачинаетсяС(Команда.Имя, "лм_БизнесПроцесс_") Тогда
			КомандыКУдалению.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из КомандыКУдалению Цикл
		Кнопка = Элементы.Найти(Команда.Имя);
		Элементы.Удалить(Кнопка);
		Команды.Удалить(Команда);
	КонецЦикла;
	
	//Установим отбор добавляемых команд в зависимости от групп доступа:
	//ШаблоныБизнесПроцессов или КомандыСозданияБППоШаблонамБП.
	
	Если НЕ ДоступныеШаблоны.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеШаблоны = ДоступныеШаблоныПоВидамДоступа(ДоступныеШаблоны);
	
	Если НЕ ДоступныеШаблоны = Неопределено Тогда
		ЭтоМассив = ТипЗнч(ДоступныеШаблоны) = Тип("Массив");
		Для Каждого Шаблон Из ДоступныеШаблоны Цикл
			
			Если ЭтоМассив Тогда
				УникальныйИдентификатор = Шаблон.УникальныйИдентификатор();
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "Наименование");
			Иначе
				УникальныйИдентификатор = Шаблон.Шаблон.УникальныйИдентификатор();
				Наименование = Шаблон.Наименование;
			КонецЕсли;
			
			ИмяКоманды = "лм_БизнесПроцесс_" + СтрЗаменить(УникальныйИдентификатор, "-", "_");
			
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Действие = "лм_ЗапуститьБизнесПроцесс";
			Команда.Заголовок = Наименование;
			ГруппаКнопок = Элементы.Найти(ИмяГруппы);
			Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопок);
			Кнопка.ИмяКоманды = ИмяКоманды;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборИсполнителяПриСозданииНаСервере(Форма, ШаблонБизнесПроцесса, Исполнитель) Экспорт
	
	СписокАвтоподстановок = Новый РеквизитФормы("СписокАвтоподстановки", Новый ОписаниеТипов("СписокЗначений"),, "Автоподстановки");
	ДобавляемыеРеквизиты = Новый Массив();
	ДобавляемыеРеквизиты.Добавить(СписокАвтоподстановок);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Элементы = Форма.Элементы;
	СтраницаАвтоподстановки = Элементы.Добавить("Автоподстановки", Тип("ГруппаФормы"), Элементы.Страницы);
	СтраницаАвтоподстановки.Вид = ВидГруппыФормы.Страница;
	СтраницаАвтоподстановки.Заголовок = "Автоподстановки";
	СписокАвтоподстановки = Элементы.Добавить("СписокАвтоподстановки", Тип("ТаблицаФормы"), СтраницаАвтоподстановки);
	СписокАвтоподстановки.ПутьКДанным = "СписокАвтоподстановки";
	СписокАвтоподстановки.ИзменятьСоставСтрок = Ложь;
	СписокАвтоподстановки.ИзменятьПорядокСтрок = Ложь;
	СписокАвтоподстановки.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	СписокАвтоподстановки.УстановитьДействие("Выбор", "СписокАвтоподстановкиВыборЗначения");
	ПолеЗначение = Элементы.Добавить("СписокАвтоподстановкиЗначение", Тип("ПолеФормы"), СписокАвтоподстановки);
	ПолеЗначение.ПутьКДанным = "СписокАвтоподстановки.Значение";
	
	Форма.СписокАвтоподстановки.Добавить("БизнесПроцесс.Автор", "Инициатор бизнес-процесса");
	ИдентификаторСтруктуры = ШаблонБизнесПроцесса.УникальныйИдентификатор();
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанных = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);	
	УстановитьПривилегированныйРежим(Ложь);
	Для Каждого Реквизит Из СтруктураДанных.Реквизиты Цикл
		Если Реквизит.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
			Форма.СписокАвтоподстановки.Добавить("ДанныеПроцесса." + Реквизит.ИмяПоля, Реквизит.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Исполнитель) = Тип("Строка") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Автоподстановки;
		ТекущийЭлемент = Элементы.СписокАвтоподстановки;
		Элементы.СписокАвтоподстановки.ТекущаяСтрока = Форма.СписокАвтоподстановки.Индекс(Форма.СписокАвтоподстановки.НайтиПоЗначению(Исполнитель));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиОтображенияРеквизитовТочкиДействия(Форма, УниверсальнаяСтруктура) Экспорт
	
	ИмяТаблицыНастроекОтображения = лм_БизнесПроцессыКлиентСервер.ИмяТаблицыНастроекОтображения();
	МассивРеквизитов = Новый Массив;
	ТаблицаВидимости = Новый РеквизитФормы(ИмяТаблицыНастроекОтображения, Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивРеквизитов.Добавить(ТаблицаВидимости);
	РеквизитТаблицы = Новый РеквизитФормы("ИдентификаторРеквизита", Новый ОписаниеТипов("УникальныйИдентификатор"), ИмяТаблицыНастроекОтображения);
	МассивРеквизитов.Добавить(РеквизитТаблицы);
	РеквизитТаблицы = Новый РеквизитФормы("Видимость",      Новый ОписаниеТипов("Число"), ИмяТаблицыНастроекОтображения);
	МассивРеквизитов.Добавить(РеквизитТаблицы);
	РеквизитТаблицы = Новый РеквизитФормы("Доступность",    Новый ОписаниеТипов("Число"), ИмяТаблицыНастроекОтображения);
	МассивРеквизитов.Добавить(РеквизитТаблицы);
	РеквизитТаблицы = Новый РеквизитФормы("ТолькоПросмотр", Новый ОписаниеТипов("Число"), ИмяТаблицыНастроекОтображения);
	МассивРеквизитов.Добавить(РеквизитТаблицы);
	РеквизитТаблицы = Новый РеквизитФормы("Обязательность", Новый ОписаниеТипов("Число"), ИмяТаблицыНастроекОтображения);
	МассивРеквизитов.Добавить(РеквизитТаблицы);
	РеквизитТаблицы = Новый РеквизитФормы("ИмяРеквизита",   Новый ОписаниеТипов("Строка"), ИмяТаблицыНастроекОтображения);
	МассивРеквизитов.Добавить(РеквизитТаблицы);
		
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	СформироватьТаблицуОтображенияРеквизитовТочкиДействия(Форма.Объект.ИдентификаторТочки, 
														Форма.Объект.БизнесПроцесс.НомерВерсии,
														УниверсальнаяСтруктура, 
														Форма[ИмяТаблицыНастроекОтображения]); 
	
КонецПроцедуры

Процедура ПриСозданииФормыЗадачиНаСервере(Форма) Экспорт
	
	МассивРасширенныхНастроек = лм_БизнесПроцессыКлиентСервер.РасширенныеНастройкиФормТочекДействия();
	РасширенныеНастройки = Новый Массив;
	Задача = Форма.Объект;
	УстановитьПривилегированныйРежим(Истина);
	НомерВерсии = Задача.БизнесПроцесс.НомерВерсии;
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	лм_РасширенныеНастройкиТочкиДействия.ИмяРеквизита КАК ИмяРеквизита,
	               |	лм_РасширенныеНастройкиТочкиДействия.Значение КАК Значение,
	               |	лм_РасширенныеНастройкиТочкиДействия.ИдентификаторНастройки КАК ИдентификаторНастройки
	               |ИЗ
	               |	РегистрСведений.лм_РасширенныеНастройкиТочкиДействия КАК лм_РасширенныеНастройкиТочкиДействия
	               |ГДЕ
	               |	лм_РасширенныеНастройкиТочкиДействия.Шаблон = &Шаблон
	               |	И лм_РасширенныеНастройкиТочкиДействия.ИдентификаторТочки = &ИдентификаторТочки
	               |	И лм_РасширенныеНастройкиТочкиДействия.НомерВерсии = &НомерВерсии
	               |ИТОГИ ПО
	               |	ИдентификаторНастройки";
	
	Запрос.УстановитьПараметр("Шаблон",             Задача.ШаблонБизнесПроцесса);
	Запрос.УстановитьПараметр("ИдентификаторТочки", Задача.ИдентификаторТочки);
	Запрос.УстановитьПараметр("НомерВерсии",        НомерВерсии);
	
	ВыборкаНастройки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНастройки.Следующий() Цикл
		стНастройка  = лм_БизнесПроцессыКлиентСервер.НовоеОписаниеРасширеннойНастройкиФормы();
		Отбор        = Новый Структура("Идентификатор", Строка(ВыборкаНастройки.ИдентификаторНастройки));
		СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(МассивРасширенныхНастроек, Отбор);
		Если СтрокиОтбора.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(стНастройка, СтрокиОтбора[0]);
		КонецЕсли;
		
		Для Каждого Реквизит Из стНастройка.Реквизиты Цикл
			Реквизит.Вставить("Значение", Реквизит.ЗначениеПоУмолчанию);	
		КонецЦикла;
		
		ВыборкаРеквизиты = ВыборкаНастройки.Выбрать();		
		Пока ВыборкаРеквизиты.Следующий() Цикл
			Для Каждого Реквизит Из стНастройка.Реквизиты Цикл				
				Если Реквизит.Имя = ВыборкаРеквизиты.ИмяРеквизита Тогда
					Реквизит.Значение = ВыборкаРеквизиты.Значение;	
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
		РасширенныеНастройки.Добавить(стНастройка);
	КонецЦикла;
		
	лм_БизнесПроцессыПереопределяемый.ПриСозданииФормыЗадачиНаСервере(Форма, РасширенныеНастройки);
	
КонецПроцедуры

Процедура ПриЗаписиЗадачи(Отказ, ЗадачаОбъект) Экспорт
	
	лм_БизнесПроцессыПереопределяемый.ПриЗаписиЗадачи(Отказ, ЗадачаОбъект);	
	
КонецПроцедуры

Процедура ПриФормированииОповещенийЗадачи(ЗадачаОбъект) Экспорт
	
	Если ЗадачаОбъект.Выполнена И Не ЗадачаОбъект.ДополнительныеСвойства.Свойство("ВыполнениеЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачаОбъект.ПринятаКИсполнению И Не ЗадачаОбъект.ДополнительныеСвойства.Свойство("ПринятиеЗадачиКИсполнению") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗадачаОбъект.ДополнительныеСвойства.Свойство("СозданиеЗадачи") Тогда
		Возврат;
	КонецЕсли;
		
	СтатусыОповещенийМенеджер    = Перечисления["лм_СтатусыОповещенийПользователей"];
	МодульОповещенияКлиентСервер = ОбщегоНазначения.ОбщийМодуль("лм_ОповещенияПользователейКлиентСервер");
	МодульОповещения             = ОбщегоНазначения.ОбщийМодуль("лм_ОповещенияПользователей");
	
	МассивПользователей          = ПолучитьМассивПользователейЗадачи(ЗадачаОбъект);
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		стрОповещение               = МодульОповещенияКлиентСервер.СтруктураОповещенияПользователя();
		стрОповещение.Идентификатор = ЗадачаОбъект.Ссылка.УникальныйИдентификатор();
		стрОповещение.Пользователь  = Пользователь;
		Если ЗадачаОбъект.Выполнена Тогда
			стрОповещение.Метка     = "Выполнено";
			стрОповещение.Пояснение = "Задача " + ЗадачаОбъект.Ссылка + " выполнена пользователем " + ЗадачаОбъект.Исполнитель;
			стрОповещение.Картинка  = "ВыполнитьЗадачу";
		ИначеЕсли ЗадачаОбъект.ПринятаКИсполнению Тогда
			стрОповещение.Метка     = "Обновлено";
			стрОповещение.Пояснение = "Задача " + ЗадачаОбъект.Ссылка + " принята к исполнению пользователем " + ЗадачаОбъект.Исполнитель;
			стрОповещение.Картинка  = "АктивироватьЗадачу";
		Иначе
			стрОповещение.Метка     = "Новое";
			стрОповещение.Пояснение = "Создана новая задача " + ЗадачаОбъект.Ссылка;
			стрОповещение.Картинка  = "Задача";
		КонецЕсли;
		стрОповещение.Текст              = Строка(ЗадачаОбъект.Ссылка);
		стрОповещение.ДействиеПриНажатии = ПолучитьНавигационнуюСсылку(ЗадачаОбъект);
		стрОповещение.Статус             = СтатусыОповещенийМенеджер.Важное;
		МодульОповещения.ДобавитьВОчередьОповещений(стрОповещение);
	КонецЦикла;
		
КонецПроцедуры

Процедура ПриФормированииСообщенийЗадачи(ЗадачаОбъект) Экспорт
		
	Если Не ЗадачаОбъект.ДополнительныеСвойства.Свойство("СозданиеЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваТочки                    = РегистрыСведений.лм_ТочкиБизнесПроцессов.СоздатьМенеджерЗаписи();
	СвойстваТочки.Шаблон             = ЗадачаОбъект.ШаблонБизнесПроцесса;
	СвойстваТочки.ИдентификаторТочки = ЗадачаОбъект.ИдентификаторТочки;
	СвойстваТочки.НомерВерсии        = ЗадачаОбъект.БизнесПроцесс.НомерВерсии;
	СвойстваТочки.Прочитать();	
	
	НастройкиОповещений = СвойстваТочки.НастройкиОповещений.Получить();
	
	Если НастройкиОповещений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОповещений.ИспользоватьПочтовыеОповещения = Неопределено ИЛИ Не НастройкиОповещений.ИспользоватьПочтовыеОповещения Тогда
		Возврат;
	КонецЕсли;	
	
	МассивПользователей                = ПолучитьМассивПользователейЗадачи(ЗадачаОбъект);
	ИдентификаторСообщения             = Новый УникальныйИдентификатор;
	МодульОчередьСообщенийКлиентСервер = ОбщегоНазначения.ОбщийМодуль("лм_ОчередьСообщенийКлиентСервер");
	МодульОчередьСообщений             = ОбщегоНазначения.ОбщийМодуль("лм_ОчередьСообщений");
	
	Для Каждого Пользователь Из МассивПользователей Цикл		
		стрСообщение               = МодульОчередьСообщенийКлиентСервер.СтруктураСообщения();
		стрСообщение.Шаблон        = НастройкиОповещений.ШаблонСообщения;
		стрСообщение.Предмет       = ЗадачаОбъект.Ссылка;
		стрСообщение.Идентификатор = ИдентификаторСообщения;
		стрСообщение.Пользователь  = Пользователь;
		стрСообщение.Метка         = "Создание задачи";
		МодульОчередьСообщений.ДобавитьВОчередьСообщений(стрСообщение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОпределенииНастроекШаблоновСообщений(Настройки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	лм_ШаблоныБизнесПроцессов.Наименование КАК Наименование,
	               |	лм_ШаблоныБизнесПроцессов.Имя КАК Имя
	               |ИЗ
	               |	Справочник.лм_ШаблоныБизнесПроцессов КАК лм_ШаблоныБизнесПроцессов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Стр                 = Настройки.ПредметыШаблонов.Добавить();
		Стр.Имя             = Выборка.Имя;
		Стр.Представление   = Выборка.Наименование;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	ШаблонСсылка           = Справочники.лм_ШаблоныБизнесПроцессов.НайтиПоРеквизиту("Имя", НазначениеШаблона);
	УниверсальнаяСтруктура = Неопределено;
	
	Если ЗначениеЗаполнено(ШаблонСсылка) Тогда
		ИдентификаторШаблона   = ШаблонСсылка.УникальныйИдентификатор();	
		УстановитьПривилегированныйРежим(Истина);
		УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторШаблона);
		
		Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
			Если ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
				Продолжить;	
			КонецЕсли;
			НовыйРеквизит               = Реквизиты.Добавить();
			НовыйРеквизит.Имя           = Реквизит.ИмяПоля;
			НовыйРеквизит.Представление = Реквизит.Синоним;		
		КонецЦикла;
		
		ИмяРеквизита = НазначениеШаблона + ".ВнешняяСсылкаНаОбъект";
		
		Отбор = Новый Структура("Имя", ИмяРеквизита);
		
		СтрокиОтбора = Реквизиты.НайтиСтроки(Отбор);
		
		Если СтрокиОтбора.Количество() <> 0 Тогда
			Реквизиты.Удалить(СтрокиОтбора[0]);	
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеОбъект = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяТипаНазначения);	
	Если МетаданныеОбъект <> Неопределено Тогда	
		Префикс = МетаданныеОбъект.Имя + ".";	
		Представление = МетаданныеОбъект.Представление();		
		НавигационнаяСсылка = Реквизиты.Добавить();
		НавигационнаяСсылка.Представление = НСтр("ru = 'Навигационная ссылка на'") + " """ + Представление + """";
		НавигационнаяСсылка.Имя           = Префикс + "НавигационнаяСсылкаНаОбъект";
		НавигационнаяСсылка.Тип  		  = Новый ОписаниеТипов("Строка");
		НавигационнаяСсылка.ПолноеПредставление = Представление + "." + НСтр("ru = 'Навигационная ссылка на'") + " """ + Представление + """";
	КонецЕсли;
	
	лм_БизнесПроцессыПереопределяемый.ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры, УниверсальнаяСтруктура);
	
КонецПроцедуры

Процедура ПриФормированииСообщения(Сообщение, Предмет) Экспорт
	
	Если ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.лм_БизнесПроцесс") Тогда
		ИдентификаторСтруктуры = Предмет.Шаблон.УникальныйИдентификатор();
		БизнесПроцесс          = Предмет;
	Иначе
		ИдентификаторСтруктуры = Предмет.ШаблонБизнесПроцесса.УникальныйИдентификатор();
		БизнесПроцесс          = Предмет.БизнесПроцесс;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	УниверсальнаяСтруктура = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
	ДанныеСтруктуры        = лм_УниверсальныеСтруктурыДанных.ПолучитьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, УниверсальнаяСтруктура);
	
	Для Каждого ТекРеквизит Из Сообщение.ЗначенияРеквизитов Цикл
		Если ДанныеСтруктуры.Свойство(ТекРеквизит.Ключ) Тогда
			Сообщение.ЗначенияРеквизитов.Вставить(ТекРеквизит.Ключ, ДанныеСтруктуры[ТекРеквизит.Ключ]);	
		КонецЕсли;
		
		Если ТекРеквизит.Ключ = "НавигационнаяСсылкаНаОбъект" Тогда
			Сообщение.ЗначенияРеквизитов.Вставить(ТекРеквизит.Ключ, ПолучитьНавигационнуюСсылку(Предмет));
		КонецЕсли;
	КонецЦикла;
	
	лм_БизнесПроцессыПереопределяемый.ПриФормированииСообщения(Сообщение, Предмет, УниверсальнаяСтруктура, ДанныеСтруктуры);
	
КонецПроцедуры

Функция СформироватьТаблицуОтображенияРеквизитовТочкиДействия(ИдентификаторТочки, НомерВерсии, УниверсальнаяСтруктура, ТаблицаОтображения = Неопределено) Экспорт
	
	Если ТаблицаОтображения = Неопределено Тогда
		ТаблицаОтображения = Новый ТаблицаЗначений;
		ТаблицаОтображения.Колонки.Добавить("ИдентификаторРеквизита", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаОтображения.Колонки.Добавить("Видимость", Новый ОписаниеТипов("Число"));
		ТаблицаОтображения.Колонки.Добавить("Доступность", Новый ОписаниеТипов("Число"));
		ТаблицаОтображения.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Число"));
		ТаблицаОтображения.Колонки.Добавить("Обязательность", Новый ОписаниеТипов("Число"));
		ТаблицаОтображения.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	ДанныеОтображения = ДанныеОтображенияРеквизитовТочекДействия(УниверсальнаяСтруктура.ВладелецСтруктуры, 
																ИдентификаторТочки, 
																НомерВерсии, 
																УниверсальнаяСтруктура.ИдентификаторСтруктуры);
	ТЗ = ДанныеОтображения.Выгрузить();
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	Для Каждого Реквизит Из УниверсальнаяСтруктура.Реквизиты Цикл
		СоответствиеРеквизитов.Вставить(Реквизит.Идентификатор, Реквизит);
	КонецЦикла;
	
	Для Каждого СтрТЗ Из ТЗ Цикл
		Реквизит = СоответствиеРеквизитов[СтрТЗ.ИдентификаторРеквизита];
		Если Реквизит <> Неопределено Тогда
			Стр = ТаблицаОтображения.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, СтрТЗ);
			Если Не ЗначениеЗаполнено(Реквизит.ОсновнойИдентификатор) Тогда
				Стр.ИмяРеквизита = "лм_" + Реквизит.ИмяПоля;
			Иначе
				РеквизитРодитель = СоответствиеРеквизитов[Реквизит.ОсновнойИдентификатор];
				Стр.ИмяРеквизита = "лм_" + РеквизитРодитель.ИмяПоля + Реквизит.ИмяПоля;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОтображения;
	
КонецФункции

Функция ДанныеОтображенияРеквизитовТочекДействия(Шаблон, ИдентификаторыТочек, НомерВерсии, ИдентификаторСтруктуры, ИспользоватьИтоги = Ложь) Экспорт
	
	МассивИдентификаторов = Новый Массив();
	Если ТипЗнч(ИдентификаторыТочек) = Тип("Массив") Тогда
		МассивИдентификаторов = ИдентификаторыТочек;
	Иначе
		МассивИдентификаторов.Добавить(ИдентификаторыТочек);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	лм_НастройкиОтображенияРеквизитовТочкиДействия.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
	               |	лм_НастройкиОтображенияРеквизитовТочкиДействия.Видимость КАК Видимость,
	               |	лм_НастройкиОтображенияРеквизитовТочкиДействия.Доступность КАК Доступность,
	               |	лм_НастройкиОтображенияРеквизитовТочкиДействия.ТолькоПросмотр КАК ТолькоПросмотр,
	               |	лм_НастройкиОтображенияРеквизитовТочкиДействия.ИдентификаторТочки КАК ИдентификаторТочки,
	               |	лм_НастройкиОтображенияРеквизитовТочкиДействия.Обязательность КАК Обязательность
	               |ИЗ
	               |	РегистрСведений.лм_НастройкиОтображенияРеквизитовТочкиДействия КАК лм_НастройкиОтображенияРеквизитовТочкиДействия
	               |ГДЕ
	               |	лм_НастройкиОтображенияРеквизитовТочкиДействия.Шаблон = &Шаблон
	               |	И лм_НастройкиОтображенияРеквизитовТочкиДействия.ИдентификаторТочки В(&МассивИдентификаторов)
	               |	И лм_НастройкиОтображенияРеквизитовТочкиДействия.ИдентификаторСтруктуры = &ИдентификаторСтруктуры
	               |	И лм_НастройкиОтображенияРеквизитовТочкиДействия.НомерВерсии = &НомерВерсии";
	Если ИспользоватьИтоги Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |ИТОГИ ПО
	               |	лм_НастройкиОтображенияРеквизитовТочкиДействия.ИдентификаторТочки";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Шаблон",                 Шаблон);
	Запрос.УстановитьПараметр("МассивИдентификаторов",  МассивИдентификаторов);
	Запрос.УстановитьПараметр("ИдентификаторСтруктуры", ИдентификаторСтруктуры);
	Запрос.УстановитьПараметр("НомерВерсии",            НомерВерсии);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьОбщиеПараметрыБизнесПроцесса(БизнесПроцесс) Экспорт
	
	МенеджерЗаписи               = РегистрыСведений.лм_ПараметрыБизнесПроцессов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.БизнесПроцесс = БизнесПроцесс;
	МенеджерЗаписи.Прочитать();
	ОбщиеПараметры               = МенеджерЗаписи.ПараметрыБизнесПроцесса.Получить();	
	Если ОбщиеПараметры = Неопределено Тогда
		ОбщиеПараметры = Новый Структура();
	КонецЕсли;
	
	Возврат ОбщиеПараметры;	

КонецФункции

Процедура ЗаписатьОбщиеПараметрыБизнесПроцесса(БизнесПроцесс, ОбщиеПараметры) Экспорт
	
	МенеджерЗаписи                         = РегистрыСведений.лм_ПараметрыБизнесПроцессов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.БизнесПроцесс           = БизнесПроцесс;
	МенеджерЗаписи.ПараметрыБизнесПроцесса = Новый ХранилищеЗначения(ОбщиеПараметры); 
	МенеджерЗаписи.Записать();
		
КонецПроцедуры

Процедура ПрочитатьДанныеПроцесса(БизнесПроцесс, СтруктураДанных, ДанныеПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторСтруктуры = БизнесПроцесс.Шаблон.УникальныйИдентификатор();
	СтруктураДанных        = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
	ДанныеПроцесса         = лм_УниверсальныеСтруктурыДанных.ПолучитьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, СтруктураДанных);
		
КонецПроцедуры

Процедура ЗаписатьДанныеПроцесса(БизнесПроцесс, СтруктураДанных, ДанныеПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	лм_УниверсальныеСтруктурыДанных.ЗаписатьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоПредметуБПРеквизитыЗадачи(ПараметрыЗаполненияПоПредмету)
	
	БизнесПроцесс 			= ПараметрыЗаполненияПоПредмету.БизнесПроцесс;
	Предмет 				= ПараметрыЗаполненияПоПредмету.Предмет;
	ЗаполнениеПоПредметам 	= ПараметрыЗаполненияПоПредмету.ЗаполнениеПоПредметам;
	
	ИдентификаторСтруктуры  = БизнесПроцесс.Шаблон.УникальныйИдентификатор();
	ИдентификаторЭлемента   = БизнесПроцесс.УникальныйИдентификатор();
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанных  = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
	ДанныеПроцесса   = лм_УниверсальныеСтруктурыДанных.ПолучитьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, СтруктураДанных);
	УстановитьПривилегированныйРежим(Ложь);

	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Предмет);
	
	Классификаторы 			= Новый Массив;
	Атрибуты 				= Новый Массив;
	ТелоЗапросаРеквизиты 	= "";

	Для Каждого РеквизитСтруктуры Из ЗаполнениеПоПредметам Цикл
		
		//Реквизит = Новый Структура("ИмяПоля, Идентификатор");		
		Отбор = Новый Структура("ОсновнойИдентификатор, ИмяПоля", ПустойИдентификатор, РеквизитСтруктуры.ИмяПоля);
		СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтруктураДанных.Реквизиты, Отбор);

		Если НЕ СтрокиОтбора.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит = СтрокиОтбора[0];
		
		Если Реквизит.ТипЗначения = Новый ОписаниеТипов("Структура")
			ИЛИ Не ЗначениеЗаполнено(Реквизит.Метка) Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим атрибут или реквизит или Классификатор.
		Если СтрНачинаетсяС(Реквизит.Метка, "Классификатор_") Тогда
			
			КодКлассификатора = Сред(Реквизит.Метка, 15);
			Классификатор     = Справочники.Классификаторы.НайтиПоКоду(КодКлассификатора);
			Классификаторы.Добавить(Классификатор);
		
		ИначеЕсли СтрНачинаетсяС(Реквизит.Метка, "ДополнительноеСвойство_") Тогда
			
			// Пока не понятна логика, поэтому сделаем проверку.
			Если НЕ Реквизит.Метка = РеквизитСтруктуры.ИмяПоля Тогда
				Продолжить;
			КонецЕсли;
			
			КодАтрибута      = Сред(Реквизит.Метка, 24);
			Атрибут          = ПланыВидовХарактеристик.Атрибуты.НайтиПоКоду(КодАтрибута);
			Атрибуты.Добавить(Атрибут);
			
		ИначеЕсли Реквизит.Метка = "Реквизит" Тогда
			ТелоЗапросаРеквизиты = ТелоЗапросаРеквизиты + ?(ТелоЗапросаРеквизиты = "", "", "," + Символы.ПС)
			+ "ИмяТаблицы." + Реквизит.ИмяПоля + " КАК " + Реквизит.ИмяПоля; 
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ Атрибуты.Количество() И Не Классификаторы.Количество()
		И ПустаяСтрока(ТелоЗапросаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	ТекущийИндексПакета 		= -1;
	ИндексПакетаРеквизиты 		= Неопределено;
	ИндексПакетаАтрибуты  		= Неопределено;
	ИндексПакетаКлассификаторы  = Неопределено;
	
	Если НЕ ТелоЗапросаРеквизиты = "" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ " + Символы.ПС + ТелоЗапросаРеквизиты + "
		|ИЗ
		|	" + ИмяТаблицы + " КАК ИмяТаблицы
		|ГДЕ
		|	Ссылка = &Предмет 
		|";
		
		ИндексПакетаРеквизиты 	= ТекущийИндексПакета + 1;
		ТекущийИндексПакета 	= ТекущийИндексПакета + 1;
	КонецЕсли;
	
	Если Атрибуты.Количество() Тогда
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ИмяАтрибуты.Атрибут КАК Атрибут,
		|	ИмяАтрибуты.Значение КАК Значение,
		|	ИмяАтрибуты.Атрибут.Код КАК Код
		|ИЗ
		|	" + ИмяТаблицы + ".Атрибуты КАК ИмяАтрибуты
		|ГДЕ
		|	ИмяАтрибуты.Атрибут В(&Атрибуты)
		|	И ИмяАтрибуты.Ссылка = &Предмет";
		
		ИндексПакетаАтрибуты = ТекущийИндексПакета + 1;
		ТекущийИндексПакета  = ТекущийИндексПакета + 1;
		
		Запрос.УстановитьПараметр("Атрибуты", Атрибуты);
	КонецЕсли;
	
	Если Классификаторы.Количество() Тогда
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ИмяКлассификаторы.Классификатор КАК Классификатор,
		|	ИмяКлассификаторы.ЭлементКлассификатора КАК Значение,
		|	ИмяКлассификаторы.Классификатор.Код КАК Код
		|ИЗ
		|	" + ИмяТаблицы + ".Классификация КАК ИмяКлассификаторы
		|ГДЕ
		|	ИмяКлассификаторы.Классификатор В(&Классификаторы)
		|	И ИмяКлассификаторы.Ссылка = &Предмет";
		
		ИндексПакетаКлассификаторы = ТекущийИндексПакета + 1;
		
		Запрос.УстановитьПараметр("Классификаторы", Классификаторы);
	КонецЕсли;
	
	РезультатПакет 		= Запрос.ВыполнитьПакет();
	мсвПримитивныеТипы 	= СтрРазделить("Дата,Строка,Число,Булево", ",", Ложь);
	Префикс            	= "лм_УниверсальныеСтруктуры";
	
	Если НЕ ИндексПакетаРеквизиты = Неопределено Тогда
		
		Выборка = РезультатПакет[ИндексПакетаРеквизиты].Выбрать();
		Выборка.Следующий();
		Для Каждого Колонка Из РезультатПакет[ИндексПакетаРеквизиты].Колонки Цикл
			
			Отбор = Новый Структура("ОсновнойИдентификатор, ИмяПоля", ПустойИдентификатор, Колонка.Имя);
			СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтруктураДанных.Реквизиты, Отбор);
			
			Если Не СтрокиОтбора.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписатьЗаписьПоРегиструУниверсальнойСтруктуры(Выборка[Колонка.Имя], 
				мсвПримитивныеТипы, Префикс, ИдентификаторСтруктуры, ИдентификаторЭлемента, СтрокиОтбора[0].Идентификатор);			
				
		КонецЦикла;
			
	КонецЕсли;
	
	Если НЕ ИндексПакетаАтрибуты = Неопределено Тогда
		
		Выборка = РезультатПакет[ИндексПакетаАтрибуты].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ОсновнойИдентификатор, ИмяПоля", ПустойИдентификатор, "ДополнительноеСвойство_" + Выборка.Код);
			СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтруктураДанных.Реквизиты, Отбор);
			
			Если Не СтрокиОтбора.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписатьЗаписьПоРегиструУниверсальнойСтруктуры(Выборка.Значение, 
				мсвПримитивныеТипы, Префикс, ИдентификаторСтруктуры, ИдентификаторЭлемента, СтрокиОтбора[0].Идентификатор);	
			
		КонецЦикла;
	 
	КонецЕсли;

	Если НЕ ИндексПакетаКлассификаторы = Неопределено Тогда
		
		Выборка = РезультатПакет[ИндексПакетаКлассификаторы].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ОсновнойИдентификатор, ИмяПоля", ПустойИдентификатор, "Классификатор_" + Выборка.Код);
			СтрокиОтбора = лм_ОбщегоНазначенияКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтруктураДанных.Реквизиты, Отбор);
			
			Если Не СтрокиОтбора.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписатьЗаписьПоРегиструУниверсальнойСтруктуры(Выборка.Значение, 
				мсвПримитивныеТипы, Префикс, ИдентификаторСтруктуры, ИдентификаторЭлемента, СтрокиОтбора[0].Идентификатор);	
			
		КонецЦикла;
	 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗаписьПоРегиструУниверсальнойСтруктуры(Значение, мсвПримитивныеТипы, Префикс, ИдентификаторСтруктуры, 
			ИдентификаторЭлемента, ИдентификаторРеквизита)
	
	ТипЗначенияСтрокой = Строка(ТипЗнч(Значение));		
	ТипЗначенияСтрокой = ?(мсвПримитивныеТипы.Найти(ТипЗначенияСтрокой) <> Неопределено, ТипЗначенияСтрокой, "Ссылка");
	
	МенеджерЗаписи = РегистрыСведений[Префикс + ТипЗначенияСтрокой].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторСтруктуры = ИдентификаторСтруктуры;
	МенеджерЗаписи.ИдентификаторЭлемента  = ИдентификаторЭлемента;
	МенеджерЗаписи.ИдентификаторРеквизита = ИдентификаторРеквизита;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ДоступныеШаблоныПоВидамДоступа(ДоступныеШаблоны)

	// Данный ф-л имеет ограничение. Текст основного запроса - копия из
	// шаблона ограничений доступа #ПоЗначениям. Количество Шаблонов должно
	// соответствовать оптимальной для системы производительности при выполнении данного запроса,
	// в обратном случае, запрос требуется переписать.
	
	Если Пользователи.ЭтоПолноправныйПользователь(ПараметрыСеанса.ТекущийПользователь,,Ложь) Тогда
		Возврат ДоступныеШаблоны;
	КонецЕсли;
	
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Возврат ДоступныеШаблоны;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АвторизованныйПользователь", ПараметрыСеанса.ТекущийПользователь);
	ТекстЗапроса = "";
	
	Индекс = 1;
	Для Каждого Шаблон Из ДоступныеШаблоны Цикл
		
		Запрос.УстановитьПараметр("ШаблонБП" + Формат(Индекс, "ЧГ=0"), Шаблон);
		
		ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС)
		+ "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	&ШаблонБП" + Формат(Индекс, "ЧГ=0") + " КАК Шаблон,
		|   ВЫРАЗИТЬ(&ШаблонБП" + Формат(Индекс, "ЧГ=0") + " КАК Справочник.лм_ШаблоныБизнесПроцессов).Наименование КАК Наименование
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК СвойстваТекущейТаблицы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ПО (СвойстваТекущейТаблицы.ПолноеИмя = ""Справочник.лм_ШаблоныБизнесПроцессов"")
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
		|				ГДЕ
		|					ТаблицыГруппДоступа.Таблица = СвойстваТекущейТаблицы.Ссылка
		|					И ТаблицыГруппДоступа.ГруппаДоступа = ГруппыДоступа.Ссылка))
		|			И (ГруппыДоступа.Ссылка В
		|				(ВЫБРАТЬ
		|					ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|				ИЗ
		|					Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|						ПО
		|							СоставыГруппПользователей.Пользователь = &АвторизованныйПользователь
		|								И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь))
		|ГДЕ
		|	ИСТИНА
		|	И ВЫБОР
		|			КОГДА ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|					ГДЕ
		|						Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
		|						И Значения.ЗначениеДоступа = &ШаблонБП" + Формат(Индекс, "ЧГ=0") + ")
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ = ВЫБОР
		|			КОГДА ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
		|					ГДЕ
		|						ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
		|						И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(&ШаблонБП1)
		|						И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьОбработкуЗавершенияПодпроцесса(БизнесПроцесс)
	
	Родитель        = БизнесПроцесс.Родитель;
	СтруктураДанных = Новый Структура;
	ДанныеПроцесса  = Новый Структура;
	
	ПрочитатьДанныеПроцесса(Родитель, СтруктураДанных, ДанныеПроцесса);
	ОбщиеПараметры = ПолучитьОбщиеПараметрыБизнесПроцесса(Родитель);
	
	СтруктураДанныхПодпроцесс = Новый Структура;
	ДанныеПроцессаПодпроцесс  = Новый Структура;
	
	ПрочитатьДанныеПроцесса(БизнесПроцесс, СтруктураДанныхПодпроцесс, ДанныеПроцессаПодпроцесс);
	ОбщиеПараметрыПодпроцесс = ПолучитьОбщиеПараметрыБизнесПроцесса(БизнесПроцесс);
	
	СвойстваТочки = ПолучитьСвойстваТочки(Родитель, БизнесПроцесс.ИдентификаторТочкиВхода);
	
	ВыполнитьОбработчикПослеЗавершения(СвойстваТочки.ОбработчикПослеЗавершения, Родитель, БизнесПроцесс, ДанныеПроцесса, ДанныеПроцессаПодпроцесс, ОбщиеПараметры, ОбщиеПараметрыПодпроцесс);
	
	ЗаписатьОбщиеПараметрыБизнесПроцесса(Родитель, ОбщиеПараметры);	
	ЗаписатьДанныеПроцесса(Родитель, СтруктураДанных, ДанныеПроцесса);
	
КонецПроцедуры

Функция СформироватьТаблицуПодпроцессов(ШаблонПодпроцесса)
	
	ТаблицаПодпроцессов = Новый ТаблицаЗначений;
	ТаблицаПодпроцессов.Колонки.Добавить("Шаблон",         Новый ОписаниеТипов("СправочникСсылка.лм_ШаблоныБизнесПроцессов"));
	ТаблицаПодпроцессов.Колонки.Добавить("Подпроцесс",     Новый ОписаниеТипов("БизнесПроцессСсылка.лм_БизнесПроцесс"));
	ТаблицаПодпроцессов.Колонки.Добавить("ДанныеПроцесса");
	ТаблицаПодпроцессов.Колонки.Добавить("Предмет");
	
	Если ЗначениеЗаполнено(ШаблонПодпроцесса) Тогда
		СтрТЗ        = ТаблицаПодпроцессов.Добавить();
		СтрТЗ.Шаблон = ШаблонПодпроцесса;
	КонецЕсли;
	
	Возврат ТаблицаПодпроцессов;
	
КонецФункции

Процедура ВыполнитьЗапускПодпроцессов(ТаблицаПодпроцессов, БизнесПроцесс, СвойстваТочки, ИдентификаторТочки, Итерация)

	ДанныеПроцесса  = Новый Структура;
	СтруктураДанных = Новый Структура;
	ПрочитатьДанныеПроцесса(БизнесПроцесс, СтруктураДанных, ДанныеПроцесса);
	
	ОбщиеПараметры = ПолучитьОбщиеПараметрыБизнесПроцесса(БизнесПроцесс);
	
	ВыполнитьОбработчикПередСтартом(СвойстваТочки.ОбработчикПередСтартом, ТаблицаПодпроцессов, БизнесПроцесс, ДанныеПроцесса, ОбщиеПараметры);
		
	ЗаписатьДанныеПроцесса(БизнесПроцесс, СтруктураДанных, ДанныеПроцесса);
	
	ЗаписатьОбщиеПараметрыБизнесПроцесса(БизнесПроцесс, ОбщиеПараметры);
	
	Для Каждого Стр Из ТаблицаПодпроцессов Цикл
		Если ЗначениеЗаполнено(Стр.Подпроцесс) Тогда
			Попытка
				ОбъектПодпроцесс = Стр.Подпроцесс.ПолучитьОбъект();				
				Если ОбъектПодпроцесс.Завершен Тогда
					Продолжить;
				КонецЕсли;				
				Если ЗначениеЗаполнено(ОбъектПодпроцесс.Родитель) Тогда
					Продолжить;
				КонецЕсли;
				ОбъектПодпроцесс.ИдентификаторТочкиВхода   = ИдентификаторТочки;
				ОбъектПодпроцесс.Итерация                  = Итерация;
				ОбъектПодпроцесс.РодительОжидаетЗавершения = СвойстваТочки.ОжидатьЗавершенияПодпроцесса;
				ОбъектПодпроцесс.Родитель                  = БизнесПроцесс;
				ОбъектПодпроцесс.Записать();
			Исключение
			КонецПопытки;
			Продолжить;	
		КонецЕсли;
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(Стр.Шаблон);
		ПараметрыЗадания.Добавить(БизнесПроцесс);
		ПараметрыЗадания.Добавить(СвойстваТочки.ОжидатьЗавершенияПодпроцесса);
		ПараметрыЗадания.Добавить(ИдентификаторТочки);
		ПараметрыЗадания.Добавить(Итерация);
		ПараметрыЗадания.Добавить(Стр.Предмет);
		ПараметрыЗадания.Добавить(Стр.ДанныеПроцесса);		
		ФоновыеЗадания.Выполнить("лм_БизнесПроцессы.СоздатьБизнесПроцессПоШаблону", ПараметрыЗадания);		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьСвойстваТочки(БизнесПроцесс, ИдентификаторТочки)
	
	СвойстваТочки                    = РегистрыСведений.лм_ТочкиБизнесПроцессов.СоздатьМенеджерЗаписи();
	СвойстваТочки.Шаблон             = БизнесПроцесс.Шаблон;
	СвойстваТочки.ИдентификаторТочки = ИдентификаторТочки;
	СвойстваТочки.НомерВерсии        = БизнесПроцесс.НомерВерсии;
	СвойстваТочки.Прочитать();
	
	Возврат СвойстваТочки;
	
КонецФункции

Процедура ВыполнитьОбработчикПередСтартом(ТекстОбработчика, ТаблицаПодпроцессов, БизнесПроцесс, ДанныеПроцесса, ОбщиеПараметры)
	
	Попытка
		Выполнить(ТекстОбработчика);		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПослеЗавершения(ТекстОбработчика, БизнесПроцесс, Подпроцесс, ДанныеПроцесса, ДанныеПроцессаПодпроцесс, ОбщиеПараметры, ОбщиеПараметрыПодпроцесс)
	
	Попытка
		Выполнить(ТекстОбработчика);		
	Исключение
	КонецПопытки;
		
КонецПроцедуры

Процедура ВыполнитьОбработчикТД(ТекстОбработчика, Задача, БизнесПроцесс, ДанныеПроцесса, ПараметрыБП)
	
	Попытка
		Выполнить(ТекстОбработчика);		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Произвольный обработчик точки действия БП'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
	КонецПопытки;
		
КонецПроцедуры

Функция РассчитатьСрок(НачальнаяДата, ГрафикРаботы, ВремяВыполнения)
	
	ВремяВыполненияСек   = ВремяВыполнения * 60;
	ДатаОкончанияРасчета = ГрафикРаботы.ДатаОкончания;
	ДатаОкончания        = НачальнаяДата;
	Графики              = Новый Массив;
	Графики.Добавить(ГрафикРаботы);
	Расписание           = КалендарныеГрафики.РасписанияРаботыНаПериод(Графики, НачалоДня(НачальнаяДата), ДатаОкончанияРасчета);
	Расписание.Сортировать("ДатаГрафика,ВремяНачала");
	
	Для Каждого Стр Из Расписание Цикл		
		ВремяОтНачалаДня       = Стр.ВремяНачала - Дата('00010101');
		ВремяИнтервала         = Стр.ВремяОкончания - Стр.ВремяНачала;		
		ДатаНачалаИнтервала    = Стр.ДатаГрафика + ВремяОтНачалаДня;
		ДатаОкончанияИнтервала = ДатаНачалаИнтервала + ВремяИнтервала;
		ДатаОкончания          = Стр.ДатаГрафика;
		Если ДатаОкончанияИнтервала < НачальнаяДата Тогда
			Продолжить;	
		КонецЕсли;
		ФактДатаНачалаИнтервала = Макс(НачальнаяДата, ДатаНачалаИнтервала);
		ФактВремяИнтервала      = ДатаОкончанияИнтервала - ФактДатаНачалаИнтервала;
		
		Если ВремяВыполненияСек - Мин(ФактВремяИнтервала, ВремяВыполненияСек) = 0 Тогда
			Возврат ФактДатаНачалаИнтервала + ВремяВыполненияСек;
		Иначе
			ВремяВыполненияСек = ВремяВыполненияСек - Мин(ФактВремяИнтервала, ВремяВыполненияСек)
		КонецЕсли;
	КонецЦикла;
		
	Возврат ?(НачальнаяДата = ДатаОкончания, ДатаОкончания + ВремяВыполненияСек, КонецДня(ДатаОкончания) + 1 + ВремяВыполненияСек);		
			
КонецФункции

Функция ПереходКСледующейТочкеВозможен(БизнесПроцесс, ИдентификаторТочки)
	
	ПереходВозможен = Истина;
	
	СвойстваТочки = РегистрыСведений.лм_ТочкиБизнесПроцессов.СоздатьМенеджерЗаписи();
	СвойстваТочки.Шаблон = БизнесПроцесс.Шаблон;
	СвойстваТочки.ИдентификаторТочки = ИдентификаторТочки;
	СвойстваТочки.НомерВерсии = БизнесПроцесс.НомерВерсии;
	СвойстваТочки.Прочитать();
	Если СвойстваТочки.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаСлияния Тогда
		// проверка возможности перехода для точки слияния
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	лм_СценарииБизнесПроцессов.ИсходнаяТочка КАК ИсходнаяТочка,
		               |	МАКСИМУМ(ЕСТЬNULL(лм_ВыполнениеБизнесПроцессов.Итерация, 0)) КАК Итерация
		               |ИЗ
		               |	РегистрСведений.лм_СценарииБизнесПроцессов КАК лм_СценарииБизнесПроцессов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.лм_ВыполнениеБизнесПроцессов КАК лм_ВыполнениеБизнесПроцессов
		               |		ПО лм_СценарииБизнесПроцессов.ИсходнаяТочка = лм_ВыполнениеБизнесПроцессов.ИдентификаторТочкиВхода
		               |			И лм_СценарииБизнесПроцессов.КонечнаяТочка = лм_ВыполнениеБизнесПроцессов.ИдентификаторТочки
		               |			И (лм_ВыполнениеБизнесПроцессов.БизнесПроцесс = &БизнесПроцесс)
		               |ГДЕ
		               |	лм_СценарииБизнесПроцессов.КонечнаяТочка = &ИдентификаторТочки
		               |	И лм_СценарииБизнесПроцессов.НомерВерсии = &НомерВерсии
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	лм_СценарииБизнесПроцессов.ИсходнаяТочка";
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		Запрос.УстановитьПараметр("ИдентификаторТочки", ИдентификаторТочки);
		Запрос.УстановитьПараметр("НомерВерсии", БизнесПроцесс.НомерВерсии);
		ТекущиеИтерации = Запрос.Выполнить().Выгрузить();
		ТекущиеИтерации.Свернуть("Итерация");
		Если ТекущиеИтерации.Количество() > 1 Тогда
			// последние итерации точек входа не совпадают
			ПереходВозможен = Ложь;
		КонецЕсли;
		
	ИначеЕсли СвойстваТочки.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаДействия
			И СвойстваТочки.Групповая = Истина Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(лм_ВыполнениеБизнесПроцессов.Итерация) КАК Итерация
		               |ПОМЕСТИТЬ ВТИтерации
		               |ИЗ
		               |	РегистрСведений.лм_ВыполнениеБизнесПроцессов КАК лм_ВыполнениеБизнесПроцессов
		               |ГДЕ
		               |	лм_ВыполнениеБизнесПроцессов.БизнесПроцесс = &БизнесПроцесс
		               |	И лм_ВыполнениеБизнесПроцессов.ИдентификаторТочки = &ИдентификаторТочки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗадачаИсполнителя.Выполнена КАК Выполнена,
		               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
		               |ИЗ
		               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтерации КАК ВТИтерации
		               |		ПО ЗадачаИсполнителя.Итерация = ВТИтерации.Итерация
		               |ГДЕ
		               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		               |	И ЗадачаИсполнителя.ИдентификаторТочки = &ИдентификаторТочки";
		               
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		Запрос.УстановитьПараметр("ИдентификаторТочки", ИдентификаторТочки);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПереходВозможен = ПереходВозможен И Выборка.Выполнена;
		КонецЦикла;
		
	ИначеЕсли СвойстваТочки.ТипТочки = Перечисления.лм_ТипыТочекБизнесПроцессов.ТочкаПодпроцесса 
		      И СвойстваТочки.ОжидатьЗавершенияПодпроцесса Тогда			  
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	лм_БизнесПроцесс.Ссылка КАК Ссылка
		               |ИЗ
		               |	БизнесПроцесс.лм_БизнесПроцесс КАК лм_БизнесПроцесс
		               |ГДЕ
		               |	лм_БизнесПроцесс.Завершен = ЛОЖЬ
		               |	И лм_БизнесПроцесс.ИдентификаторТочкиВхода = &ИдентификаторТочкиВхода
		               |	И лм_БизнесПроцесс.Родитель = &Родитель";
		
		Запрос.УстановитьПараметр("ИдентификаторТочкиВхода", ИдентификаторТочки);
		Запрос.УстановитьПараметр("Родитель",                БизнесПроцесс);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ПереходВозможен = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПереходВозможен;
	
КонецФункции

Функция ДанныеЗапросаРеквизитовУниверсальнойСтруктуры(ВладелецСтруктуры, ВладелецЗначений = Неопределено)
	
	ИдентификаторСтруктуры = ВладелецСтруктуры.УникальныйИдентификатор();
	УстановитьПривилегированныйРежим(Истина);
	ДанныеСтруктуры = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
	ЗначенияСтруктуры = Новый Структура();
	Если ВладелецЗначений <> Неопределено Тогда
		ЗначенияСтруктуры = лм_УниверсальныеСтруктурыДанных.ПолучитьЗначенияУниверсальнойСтруктуры(ВладелецЗначений, ДанныеСтруктуры);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	ПараметрыЗапроса = Новый Массив();
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросВТ = СхемаЗапроса.ПакетЗапросов[0];
	ЗапросВТ.ТаблицаДляПомещения = "ВТИсточник";
	ОператорыВТ = ЗапросВТ.Операторы[0];
	
	ЗапросРезультат = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ОператорыРезультат = ЗапросРезультат.Операторы[0];
	ОператорыРезультат.Источники.Добавить("ВТИсточник", "ВТИсточник");
	
	Сч = 0;
	Для Каждого ДанныеРеквизита Из ДанныеСтруктуры.Реквизиты Цикл
		ТипЗначенияРеквизита = ДанныеРеквизита.ТипЗначения;
		Если ТипЗначенияРеквизита.Типы().Найти(Тип("Структура")) = Неопределено
				И ДанныеРеквизита.ОсновнойИдентификатор = ПустойИдентификатор Тогда
			ИмяРеквизита = ДанныеРеквизита.ИмяПоля;
			ЗначениеПараметра = ?(ЗначенияСтруктуры.Свойство(ИмяРеквизита), ЗначенияСтруктуры[ИмяРеквизита], ТипЗначенияРеквизита.ПривестиЗначение());
			
			ОператорыВТ.ВыбираемыеПоля.Добавить("&" + ИмяРеквизита);
			СхемаЗапроса.ПакетЗапросов[0].Колонки[Сч].Псевдоним = ИмяРеквизита + "_";
			
			ОператорыРезультат.ВыбираемыеПоля.Добавить("ВТИсточник." + ИмяРеквизита + "_");
			СхемаЗапроса.ПакетЗапросов[1].Колонки[Сч].Псевдоним = ИмяРеквизита;
			
			Сч = Сч + 1;
			ДанныеПараметра = Новый Структура();
			ДанныеПараметра.Вставить("Имя", ИмяРеквизита);
			ДанныеПараметра.Вставить("ТипЗначения", ТипЗначенияРеквизита);
			ДанныеПараметра.Вставить("Значение", ЗначениеПараметра);
			ДанныеПараметра.Вставить("ВключатьВДоступныеПоля", Ложь);
			ПараметрыЗапроса.Добавить(ДанныеПараметра);
		КонецЕсли;			
	КонецЦикла;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстЗапроса", ТекстЗапроса);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеЗапросаРеквизитовОбъекта(ИдентификаторОбъектаМетаданных, Ссылка)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	Операторы = ПакетЗапросов.Операторы[0];
	Операторы.Источники.Добавить(ИдентификаторОбъектаМетаданных.ПолноеИмя, "ТаблицаОбъекта");
	Операторы.Отбор.Добавить("ТаблицаОбъекта.Ссылка = &Ссылка");
	
	МетаданныеОбъекта = ИдентификаторОбъектаМетаданных.ЗначениеПустойСсылки.Метаданные();	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Операторы.ВыбираемыеПоля.Добавить("ТаблицаОбъекта." + Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Операторы.ВыбираемыеПоля.Добавить("ТаблицаОбъекта." + Реквизит.Имя);
	КонецЦикла;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	ДанныеПараметра = Новый Структура();
	ДанныеПараметра.Вставить("Имя", "Ссылка");
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(ТипЗнч(ИдентификаторОбъектаМетаданных.ЗначениеПустойСсылки));
	ДанныеПараметра.Вставить("ТипЗначения", Новый ОписаниеТипов(МассивТипов));
	ДанныеПараметра.Вставить("Значение", Ссылка);
	ДанныеПараметра.Вставить("ВключатьВДоступныеПоля", Ложь);
	ПараметрыЗапроса = Новый Массив();
	ПараметрыЗапроса.Добавить(ДанныеПараметра);
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстЗапроса", ТекстЗапроса);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция УсловиеТочкиБизнесПроцессаВыполнено(БизнесПроцесс, ДанныеУсловия)
	
	Результат = Истина;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Неопределено);
	лм_БизнесПроцессы.ПолучитьСхемуКомпоновкиДанныхСтруктуры(БизнесПроцесс.Шаблон, АдресСхемыКомпоновкиДанных, БизнесПроцесс);
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Если СхемаКомпоновкиДанных <> Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
				
		СкопироватьОтборРекурсивно(Настройки.Отбор.Элементы, ДанныеУсловия.Отбор.Элементы);
				
		Для Каждого Параметр Из СхемаКомпоновкиДанных.Параметры Цикл			
			ПараметрДанных               = Настройки.ПараметрыДанных.Элементы.Добавить();
			ПараметрДанных.Параметр      = Новый ПараметрКомпоновкиДанных(Параметр.Имя);
			ПараметрДанных.Значение      = Параметр.Значение;
			ПараметрДанных.Использование = Истина;
		КонецЦикла;
				
		ТаблицаРезультат = Новый ТаблицаЗначений;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Результат = (ТаблицаРезультат.Количество() > 0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьОтборРекурсивно(Приемник, Источник)
	
	Для Каждого ЭлементОтбора Из Источник Цикл
		НовыйЭлементОтбора = Приемник.Добавить(ТипЗнч(ЭлементОтбора));			
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборРекурсивно(НовыйЭлементОтбора.Элементы, ЭлементОтбора.Элементы);	
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыполнитьДействияТочкиОбработки(БизнесПроцесс, ИдентификаторТочки)
	
	МенеджерЗаписи                    = РегистрыСведений.лм_ТочкиБизнесПроцессов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Шаблон             = БизнесПроцесс.Шаблон;
	МенеджерЗаписи.ИдентификаторТочки = ИдентификаторТочки;
	МенеджерЗаписи.НомерВерсии        = БизнесПроцесс.НомерВерсии;
	МенеджерЗаписи.Прочитать();
	Параметры = МенеджерЗаписи.ПараметрыОбработки.Получить();
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура();
	КонецЕсли;
	
	ОбщиеПараметры = ПолучитьОбщиеПараметрыБизнесПроцесса(БизнесПроцесс);
	
	НаборЗаписейДействий = РегистрыСведений.лм_ДействияТочкиОбработки.СоздатьНаборЗаписей();
	НаборЗаписейДействий.Отбор.Шаблон.Установить(БизнесПроцесс.Шаблон);
	НаборЗаписейДействий.Отбор.ИдентификаторТочки.Установить(ИдентификаторТочки);
	НаборЗаписейДействий.Отбор.НомерВерсии.Установить(БизнесПроцесс.НомерВерсии);
	НаборЗаписейДействий.Прочитать();
	тзДействияТочки = НаборЗаписейДействий.Выгрузить();
	тзДействияТочки.Сортировать("Порядок");	
	Для ИндексСтроки = 0 По тзДействияТочки.Количество() - 1 Цикл
		СтрокаДействия = тзДействияТочки[ИндексСтроки];
		ТипДействия = СтрокаДействия.ТипДействия;
		НастройкиДействия = СтрокаДействия.НастройкиДействия.Получить();
		Если НастройкиДействия <> Неопределено Тогда
			ВыполнитьДействиеТочкиОбработки(БизнесПроцесс, ТипДействия, НастройкиДействия, Параметры, ОбщиеПараметры);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьОбщиеПараметрыБизнесПроцесса(БизнесПроцесс, ОбщиеПараметры);
	
КонецПроцедуры

Процедура ВыполнитьДействиеТочкиОбработки(БизнесПроцесс, ТипДействия, НастройкиДействия, Параметры, ОбщиеПараметры)
	
	ИдентификаторСтруктуры = БизнесПроцесс.Шаблон.УникальныйИдентификатор();
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанных = лм_УниверсальныеСтруктурыДанных.ПолучитьДанныеУниверсальнойСтруктуры(ИдентификаторСтруктуры);
	ДанныеПроцесса = лм_УниверсальныеСтруктурыДанных.ПолучитьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, СтруктураДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.ПроизвольныйСценарий Тогда
		Попытка
			Выполнить(НастройкиДействия.СценарийДействия);
			УстановитьПривилегированныйРежим(Истина);
			лм_УниверсальныеСтруктурыДанных.ЗаписатьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
			УстановитьПривилегированныйРежим(Ложь);
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.СозданиеОбъекта Тогда
		Попытка
			СозданныйОбъект = СоздатьОбъектПоПолномуИмени(НастройкиДействия.ТипОбъекта.ПолноеИмя);
			СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(СозданныйОбъект);
			МассивПодстрок = СтрРазделить(НастройкиДействия.ИмяПараметра, ".");
			ИмяСтруктуры = МассивПодстрок[0];
			КлючСтруктуры = МассивПодстрок[1];
			Выполнить(ИмяСтруктуры + ".Вставить(""" + КлючСтруктуры + """, СтрокаXML);");
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.ЗаписьОбъекта Тогда
		Попытка
			СтрокаXML = Неопределено;
			Выполнить("СтрокаXML = " + НастройкиДействия.ИмяПараметра);
			ОбъектДляЗаписи = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
			ОбъектДляЗаписи.Записать();
			СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ОбъектДляЗаписи);
			Выполнить(НастройкиДействия.ИмяПараметра + " = СтрокаXML;");
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.БлокировкаОбъекта
			ИЛИ ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.РазблокировкаОбъекта Тогда
		МодульЗахватОбъектов = ОбщегоНазначения.ОбщийМодуль("лм_ЗахватОбъектов");
		Попытка
			ОбъектДляБлокировки = Неопределено;
			Выполнить("ОбъектДляБлокировки = " + НастройкиДействия.ОбъектБлокировки);
			Если ЗначениеЗаполнено(ОбъектДляБлокировки) Тогда
				Если ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.БлокировкаОбъекта Тогда
					МодульЗахватОбъектов.ЗаблокироватьОбъект(ОбъектДляБлокировки, БизнесПроцесс);
				Иначе
					МодульЗахватОбъектов.РазблокироватьОбъект(ОбъектДляБлокировки, БизнесПроцесс);
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.ЗаполнениеОбъекта Тогда
		Попытка
			ОбъектЗаполненияСтрокой = НастройкиДействия.ОбъектЗаполнения;
			ОбъектЗаполнения = Неопределено;
			ЭтоЗаполнениеДанных = СтрСравнить(ОбъектЗаполненияСтрокой, "ДанныеПроцесса") = 0;
			ЭтоЗаполнениеПредмета = СтрСравнить(ОбъектЗаполненияСтрокой, "БизнесПроцесс.Предмет") = 0;
			ЭтоЗаполнениеПараметра = СтрНачинаетсяС(ОбъектЗаполненияСтрокой, "Параметры.") 
								 ИЛИ СтрНачинаетсяС(ОбъектЗаполненияСтрокой, "ОбщиеПараметры.");
								
			Если ЭтоЗаполнениеПредмета Тогда
				ОбъектЗаполнения = БизнесПроцесс.Предмет.ПолучитьОбъект();
			ИначеЕсли ЭтоЗаполнениеПараметра Тогда
				СтрокаXML = Неопределено;
				Выполнить("СтрокаXML = " + ОбъектЗаполненияСтрокой);
				ОбъектЗаполнения = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
			КонецЕсли;
			
			мсвИменаСвязанныхСправочников = Новый Массив();
			Для Каждого СтрокаПоля Из НастройкиДействия.НастройкаЗаполненияОбъекта Цикл
				Если СтрНачинаетсяС(СтрокаПоля.Поле, "Связанный_") Тогда
					мсвИменаСвязанныхСправочников.Добавить(СтрЗаменить(СтрокаПоля.Поле, "Связанный_", ""));	
				КонецЕсли; 					
			КонецЦикла;
			
			Для Каждого СтрокаПоля Из НастройкиДействия.НастройкаЗаполненияОбъекта Цикл
				ЗаполнитьЗначение = Истина;
				ЗначениеЗаполнения = Неопределено;
				Если СтрокаПоля.ПроизвольноеЗначение Тогда
					ЗначениеЗаполнения = СтрокаПоля.ЗначениеЗаполнения;
				ИначеЕсли НЕ ПустаяСтрока(СтрокаПоля.ЗначениеЗаполнения) Тогда
					Выполнить("ЗначениеЗаполнения = СтрокаПоля.ТипЗначения.ПривестиЗначение(" + СтрокаПоля.ЗначениеЗаполнения + ");");
				Иначе
					ЗаполнитьЗначение = Ложь;
				КонецЕсли;
								
				Если ЗаполнитьЗначение Тогда
					Если ЭтоЗаполнениеДанных Тогда
						ИмяСвязанного = СтрРазделить(СтрокаПоля.Поле, "_", Ложь)[0];
						Если мсвИменаСвязанныхСправочников.Найти(ИмяСвязанного) <> Неопределено Тогда
							Для каждого сткСвязанный Из ДанныеПроцесса Цикл  // todo: Переделать на поиск в структуре
								Если СтрНачинаетсяС(сткСвязанный.Ключ, "Связанный") И СтрНайти(сткСвязанный.Ключ, ИмяСвязанного) <> 0 Тогда
									Если сткСвязанный.Значение.Количество() = 1 Тогда
										стрРеквизитыСвязанного = сткСвязанный.Значение[0];
									Иначе
										сткСвязанный.Значение.Добавить(Новый Структура());
										стрРеквизитыСвязанного = сткСвязанный.Значение[0];
										Отбор = Новый Структура("ИмяПоля", сткСвязанный.Ключ);
										мсвСвязанныйСправочникРеквизит = лм_УниверсальныеСтруктурыДанныхКлиентСервер.НайтиСтрокиТаблицыОбъекта(СтруктураДанных.Реквизиты, Отбор);
			                            Если мсвСвязанныйСправочникРеквизит.Количество() Тогда
											стрРеквизитыСвязанного.Вставить("ИдентификаторСтрокиТаблицы", мсвСвязанныйСправочникРеквизит[0].Идентификатор);		
										КонецЕсли; 
									КонецЕсли; 
									стрРеквизитыСвязанного.Вставить(СтрокаПоля.Поле, ЗначениеЗаполнения);
								КонецЕсли; 	
							КонецЦикла; 
						Иначе
							ДанныеПроцесса.Вставить(СтрокаПоля.Поле, ЗначениеЗаполнения);	
						КонецЕсли;
					Иначе
						ОбъектЗаполнения[СтрокаПоля.Поле] = ЗначениеЗаполнения;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			// Для связанных справочников дополним имеющиеся реквизиты пустыми
			Для каждого ИмяСвязанного Из мсвИменаСвязанныхСправочников Цикл
				Для каждого Реквизит Из СтруктураДанных.Реквизиты Цикл
					Если СтрНачинаетсяС(Реквизит.ИмяПоля, ИмяСвязанного) Тогда
						мсвСвязанный = ДанныеПроцесса["Связанный_" + ИмяСвязанного];
						сткСвязанный = мсвСвязанный[0];
						Если НЕ сткСвязанный.Свойство(Реквизит.ИмяПоля) Тогда
							сткСвязанный.Вставить(Реквизит.ИмяПоля,);	
						КонецЕсли; 
					КонецЕсли; 	
				КонецЦикла; 
				сткСвязанный.Вставить(ИмяСвязанного + "_Предзаполнение", Истина);
			КонецЦикла;
			
			Если ЭтоЗаполнениеПредмета Тогда
				ОбъектЗаполнения.Записать();
			ИначеЕсли ЭтоЗаполнениеПараметра Тогда
				СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ОбъектЗаполнения);
				Выполнить(ОбъектЗаполненияСтрокой + " = СтрокаXML;");
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				лм_УниверсальныеСтруктурыДанных.ЗаписатьЗначенияУниверсальнойСтруктуры(БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипДействия = Перечисления.лм_ТипыДействийТочкиОбработки.ОтправкаПочтовогоСообщения Тогда
		Попытка
			МассивПользователей = Новый Массив;
			ПолучательСообщения = НастройкиДействия.ПолучательПочтовогоСообщения;			
			Если ТипЗнч(ПолучательСообщения) = Тип("СправочникСсылка.Пользователи")
				ИЛИ ТипЗнч(ПолучательСообщения) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				МассивПользователей.Добавить(ПолучательСообщения);
			ИначеЕсли ТипЗнч(ПолучательСообщения) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				МассивПользователей = ПолучитьМассивИсполнителейРоли(ПолучательСообщения, НастройкиДействия.ОсновнойОбъектАдресации, НастройкиДействия.ДополнительныйОбъектАдресации);
			Иначе
				Выполнить("МассивПользователей.Добавить(" + НастройкиДействия.ЗначениеАвтоподстановки + ")");
			КонецЕсли;
			
			ИдентификаторСообщения             = Новый УникальныйИдентификатор;
			МодульОчередьСообщенийКлиентСервер = ОбщегоНазначения.ОбщийМодуль("лм_ОчередьСообщенийКлиентСервер");
			МодульОчередьСообщений             = ОбщегоНазначения.ОбщийМодуль("лм_ОчередьСообщений");
			
			Для Каждого Пользователь Из МассивПользователей Цикл		
				стрСообщение               = МодульОчередьСообщенийКлиентСервер.СтруктураСообщения();
				стрСообщение.Шаблон        = НастройкиДействия.ШаблонСообщения;
				стрСообщение.Предмет       = БизнесПроцесс;
				стрСообщение.Идентификатор = ИдентификаторСообщения;
				стрСообщение.Пользователь  = Пользователь;
				стрСообщение.Метка         = "Выполнение точки обработки";
				МодульОчередьСообщений.ДобавитьВОчередьСообщений(стрСообщение);
			КонецЦикла;	
		Исключение
		КонецПопытки;
		
	Иначе
		лм_БизнесПроцессыПереопределяемый.ВыполнитьДействиеТочкиОбработки(ТипДействия, НастройкиДействия, Параметры, ОбщиеПараметры, БизнесПроцесс, ДанныеПроцесса, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьОбъектПоПолномуИмени(ПолноеИмя)
	
	Результат = Неопределено;
	
	МассивПодстрок = СтрРазделить(ПолноеИмя, ".");
	Если МассивПодстрок.Количество() = 2 Тогда
		ТипОбъекта = МассивПодстрок[0];
		ИмяОбъекта = МассивПодстрок[1];
		
		Попытка
			Если СтрСравнить(ТипОбъекта, "Справочник") = 0 Тогда
				Результат = Справочники[ИмяОбъекта].СоздатьЭлемент();
			ИначеЕсли СтрСравнить(ТипОбъекта, "Документ") = 0 Тогда
				Результат = Документы[ИмяОбъекта].СоздатьДокумент();
			ИначеЕсли СтрСравнить(ТипОбъекта, "ПланВидовХарактеристик") = 0 Тогда
				Результат = ПланыВидовХарактеристик[ИмяОбъекта].СоздатьЭлемент();
			ИначеЕсли СтрСравнить(ТипОбъекта, "Задача") = 0 Тогда
				Результат = Задачи[ИмяОбъекта].СоздатьЗадачу();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивИсполнителейРоли(РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсполнителиЗадач.Исполнитель КАК Исполнитель
	               |ИЗ
	               |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	               |ГДЕ
	               |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
	               |	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
	               |	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
	
	Запрос.УстановитьПараметр("РольИсполнителя",               РольИсполнителя);
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации",       ОсновнойОбъектАдресации);
	Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	
	ИсполнителиЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат ИсполнителиЗадачи;
	
КонецФункции

Функция ПолучитьМассивПользователейЗадачи(ЗадачаОбъект)
	
	МассивПользователей = Новый Массив;
	
	Если ТипЗнч(ЗадачаОбъект.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		МассивПользователей.Добавить(ЗадачаОбъект.Исполнитель);
	ИначеЕсли ЗначениеЗаполнено(ЗадачаОбъект.РольИсполнителя) Тогда
		МассивПользователей = ПолучитьМассивИсполнителейРоли(ЗадачаОбъект.РольИсполнителя, ЗадачаОбъект.ОсновнойОбъектАдресации, ЗадачаОбъект.ДополнительныйОбъектАдресации);	
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

#КонецОбласти
