
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	АМСЗаполнитьДанные(ЭтотОбъект);
	
	ЗаполнитьЗначенияРеквизитовПоПлощадке(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПодготовитьФормуНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипЗапросаПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяНаценкаПриИзменении(Элемент)
	ДоступностьПримененияСкидкиНаценки();
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСпецСкидкаПриИзменении(Элемент)
	ДоступностьПримененияСкидкиНаценки();
КонецПроцедуры

&НаКлиенте
Процедура ВидТарифаПриИзменении(Элемент)
	
	Если НЕ Объект.ВидТарифа = ПредопределенноеЗначение("Перечисление.УБХВидыТарифовРазмещения.Специальный") Тогда
		Объект.Тариф = Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АМСПриИзменении(Элемент)
	
	АМСЗаполнитьДанные(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлощадкаПриИзменении(Элемент)
	
	Объект.АМС = Неопределено;
	АМСЗаполнитьДанные(ЭтотОбъект);
	
	Элементы.АМС.СписокВыбора.Очистить();
	ЗаполнитьЗначенияРеквизитовПоПлощадке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяВерсияЗапросаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
		И НЕ ВыбранноеЗначение = Объект.ТекущаяВерсияЗапроса Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьПоВерсииЗапроса", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыПереченьОборудования

&НаКлиенте
Процедура ПереченьОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПереченьОборудованияГабариты" Тогда
		СтандартнаяОбработка = Ложь;
		
		
		//ПараметрыФормы = Новый Структура;
		//ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		//ПараметрыФормы.Вставить("Режим"          , "Группировка");
		//ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
		//ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		//
		//ДополнительныеПараметры = Новый Структура;
		//ДополнительныеПараметры.Вставить("Форма", Форма);
		//ДополнительныеПараметры.Вставить("Элемент", Элемент);
		//	
		//ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		//ОткрытьФорму("Документ.РазмещениеОборудованияАМС.Форма.ФормаГабариты", Новый Структура());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПечатьКП(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьРазмещения(Команда)
	
	Если Объект.ПереченьОборудования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьНаКлиентеПередНачаломРасчетов(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСтоимостьРазмещенияСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуExcel(Команда)
	ПодключитьОбработчикОжидания("ЗагрузитьСообщение", 0.1, Истина);
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РассчетСтоимостиРазмещения 

&НаКлиенте
Процедура ПроверитьНаКлиентеПередНачаломРасчетов(Отказ)
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтандартныйТарифПоКлиентскойГруппе(КлиентскаяГруппа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБХСтандартныеТарифыКлиентскихГрупп.ТарифРазмещения КАК ТарифРазмещения
		|ИЗ
		|	РегистрСведений.УБХСтандартныеТарифыКлиентскихГрупп КАК УБХСтандартныеТарифыКлиентскихГрупп
		|ГДЕ
		|	УБХСтандартныеТарифыКлиентскихГрупп.КлиентскаяГруппа = &КлиентскаяГруппа";
	
	Запрос.УстановитьПараметр("КлиентскаяГруппа", КлиентскаяГруппа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.ТарифРазмещения;
	
КонецФункции

&НаСервере
Функция ВычислитьСкидкуЗаОбщийОбъемПоКлиентскойГруппе(КлиентскаяГруппа, Порог)
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБХСкидкиЗаОбщийОбъем.Порог КАК Порог,
		|	УБХСкидкиЗаОбщийОбъем.Скидка КАК Скидка
		|ПОМЕСТИТЬ ВТ_Скидки
		|ИЗ
		|	РегистрСведений.УБХСкидкиЗаОбщийОбъем КАК УБХСкидкиЗаОбщийОбъем
		|ГДЕ
		|	УБХСкидкиЗаОбщийОбъем.КлиентскаяГруппа = &КлиентскаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Скидки.Порог) КАК Порог
		|ПОМЕСТИТЬ ВТ_МаксПорог
		|ИЗ
		|	ВТ_Скидки КАК ВТ_Скидки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Скидки.Скидка КАК Скидка,
		|	ВТ_МаксПорог.Порог КАК Порог
		|ПОМЕСТИТЬ ВТ_МаксСкидка
		|ИЗ
		|	ВТ_МаксПорог КАК ВТ_МаксПорог
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Скидки КАК ВТ_Скидки
		|		ПО ВТ_МаксПорог.Порог = ВТ_Скидки.Порог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Скидки.Порог КАК ПорогОт,
		|	МИНИМУМ(ВТ_Скидки1.Порог) КАК ПорогДо,
		|	ВТ_Скидки.Скидка КАК Скидка
		|ПОМЕСТИТЬ ВТ_ДиапазоныСкидок
		|ИЗ
		|	ВТ_Скидки КАК ВТ_Скидки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Скидки КАК ВТ_Скидки1
		|		ПО ВТ_Скидки.Порог < ВТ_Скидки1.Порог
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Скидки.Порог,
		|	ВТ_Скидки.Скидка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_МаксСкидка.Порог,
		|	10000000,
		|	ВТ_МаксСкидка.Скидка
		|ИЗ
		|	ВТ_МаксСкидка КАК ВТ_МаксСкидка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДиапазоныСкидок.Скидка КАК Скидка
		|ИЗ
		|	ВТ_ДиапазоныСкидок КАК ВТ_ДиапазоныСкидок
		|ГДЕ
		|	ВТ_ДиапазоныСкидок.ПорогОт < &Порог
		|			И &Порог <= ВТ_ДиапазоныСкидок.ПорогДо";
	
	Запрос.УстановитьПараметр("КлиентскаяГруппа", 	КлиентскаяГруппа);
	Запрос.УстановитьПараметр("Порог", 				Порог);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Скидка;

КонецФункции

&НаСервере
Процедура РассчитатьСтоимостьРазмещенияСервер()
	
	КлиентскаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КлиентПБК, "КлиентскаяГруппа");
		
	Если Объект.ВидТарифа = Перечисления.УБХВидыТарифовРазмещения.Специальный Тогда
		Если ЗначениеЗаполнено(Объект.Тариф) Тогда
			Тариф = Объект.Тариф;
		Иначе
			 ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран специальный тариф. Расчет прерван. Выберите тариф.'"));
			 Возврат;
		КонецЕсли;
	Иначе			
		Тариф = ПолучитьСтандартныйТарифПоКлиентскойГруппе(КлиентскаяГруппа);
		
		Если Не ЗначениеЗаполнено(Тариф) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СТроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для клиентской группы %1
					|не был найден тариф размещения. Расчет прерван.'"), КлиентскаяГруппа));
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереченьОборудования.НомерСтроки КАК НомерСтроки,
		|	ПереченьОборудования.ТипРазмещенияВКонтейнере КАК ТипРазмещенияВКонтейнере,
		|	ПереченьОборудования.ЕдиницаОборудования КАК ЕдиницаОборудования,
		|	ПереченьОборудования.Статус КАК Статус,
		|	ПереченьОборудования.ГруппаРазмещения КАК ГруппаРазмещения,
		|	ПереченьОборудования.ПлановаяВысотаПодвеса КАК ПлановаяВысотаПодвеса,
		|	ПереченьОборудования.Диаметр КАК Диаметр,
		|	ПереченьОборудования.Площадь КАК Площадь,
		|	ПереченьОборудования.ДлинаКабеля КАК ДлинаКабеля,
		|	ПереченьОборудования.КоличествоНитокКабеля КАК КоличествоНитокКабеля,
		|	ПереченьОборудования.КоличествоМодулей КАК КоличествоМодулей,
		|	ПереченьОборудования.ВысотаПодвеса КАК ВысотаПодвеса
		|ПОМЕСТИТЬ ВТ_Оборудование
		|ИЗ
		|	&ПереченьОборудования КАК ПереченьОборудования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Оборудование.НомерСтроки КАК НомерСтроки,
		|	ВТ_Оборудование.ТипРазмещенияВКонтейнере КАК ТипРазмещенияВКонтейнере,
		|	ВТ_Оборудование.ЕдиницаОборудования КАК ЕдиницаОборудования,
		|	ВТ_Оборудование.Статус КАК Статус,
		|	ВТ_Оборудование.ГруппаРазмещения КАК ГруппаРазмещения,
		|	ВТ_Оборудование.ПлановаяВысотаПодвеса КАК ПлановаяВысотаПодвеса,
		|	ВТ_Оборудование.Диаметр КАК Диаметр,
		|	ВТ_Оборудование.Площадь КАК Площадь,
		|	ВТ_Оборудование.ДлинаКабеля КАК ДлинаКабеля,
		|	ВТ_Оборудование.КоличествоНитокКабеля КАК КоличествоНитокКабеля,
		|	ВТ_Оборудование.КоличествоМодулей КАК КоличествоМодулей,
		|	ВТ_Оборудование.ВысотаПодвеса КАК ВысотаПодвеса,
		|	ВЫРАЗИТЬ(ВТ_Оборудование.ЕдиницаОборудования КАК Справочник.УБХОборудование).ТипОборудования КАК ТипОборудования,
		|	ВЫРАЗИТЬ(ВТ_Оборудование.ЕдиницаОборудования КАК Справочник.УБХОборудование).ТипОборудования.ТипВетровойНагрузки КАК ТипВетровойНагрузки,
		|	ВЫРАЗИТЬ(ВТ_Оборудование.ЕдиницаОборудования КАК Справочник.УБХОборудование).ТипОборудования.ТипРазмещенияНаПлощадке КАК ТипРазмещенияНаПлощадке,
		|	ВЫРАЗИТЬ(ВТ_Оборудование.ЕдиницаОборудования КАК Справочник.УБХОборудование).Высота КАК Высота,
		|	ВЫРАЗИТЬ(ВТ_Оборудование.ЕдиницаОборудования КАК Справочник.УБХОборудование).Ширина КАК Ширина,
		|	ВЫРАЗИТЬ(ВТ_Оборудование.ЕдиницаОборудования КАК Справочник.УБХОборудование).Глубина КАК Глубина,
		|	ВЫРАЗИТЬ(ВТ_Оборудование.ЕдиницаОборудования КАК Справочник.УБХОборудование).Вес КАК Вес,
		|	ВЫБОР
		|		КОГДА ВТ_Оборудование.Статус = &СтатусСогласования
		|				И ВТ_Оборудование.ВысотаПодвеса > 0
		|			ТОГДА ВТ_Оборудование.ВысотаПодвеса
		|		ИНАЧЕ ВТ_Оборудование.ПлановаяВысотаПодвеса
		|	КОНЕЦ КАК ВысотаСогласованная
		|ИЗ
		|	ВТ_Оборудование КАК ВТ_Оборудование
		|ГДЕ
		|	НЕ ВЫРАЗИТЬ(ВТ_Оборудование.ЕдиницаОборудования КАК Справочник.УБХОборудование).ТипОборудования = &ТипОборудования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТарифыРазмещения.ПорогРасширенногоОбъема КАК ПорогРасширенногоОбъема,
		|	ТарифыРазмещения.ПорогУчетаРасширенногоОбъема КАК ПорогУчетаРасширенногоОбъема,
		|	ТарифыРазмещения.ЕдиницаРасширенногоОбъема КАК ЕдиницаРасширенногоОбъема,
		|	ТарифыРазмещения.СтоимостьШтырьевоАнтены КАК СтоимостьШтырьевоАнтены,
		|	ТарифыРазмещения.ПлатаЗаМодуль КАК ПлатаЗаМодуль,
		|	ТарифыРазмещения.ПлатаЗаСтойку КАК ПлатаЗаСтойку,
		|	ТарифыРазмещения.СтоимостьКонтейнера КАК СтоимостьКонтейнера,
		|	ТарифыРазмещения.СтоимостьТермошкафа КАК СтоимостьТермошкафа
		|ИЗ
		|	Справочник.УБХТарифыРазмещения КАК ТарифыРазмещения
		|ГДЕ
		|	ТарифыРазмещения.Ссылка = &Тариф
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УБХПараметрыТарифаПороговыхВысотПодвеса.ВысотаПодвесаНижнийПорог КАК ВысотаПодвесаНижнийПорог,
		|	УБХПараметрыТарифаПороговыхВысотПодвеса.ВысотаПодвесаВерхнийПорог КАК ВысотаПодвесаВерхнийПорог,
		|	УБХПараметрыТарифаПороговыхВысотПодвеса.СуммаСтандартноеРазмещения КАК СуммаСтандартноеРазмещения,
		|	УБХПараметрыТарифаПороговыхВысотПодвеса.СуммаРасширенноеРазмещение КАК СуммаРасширенноеРазмещение
		|ИЗ
		|	РегистрСведений.УБХПараметрыТарифаПороговыхВысотПодвеса КАК УБХПараметрыТарифаПороговыхВысотПодвеса
		|ГДЕ
		|	УБХПараметрыТарифаПороговыхВысотПодвеса.Тариф = &Тариф
		|	И УБХПараметрыТарифаПороговыхВысотПодвеса.ТипКонструкцииАМС = &ТипАМС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ТипАМС = ЗНАЧЕНИЕ(Перечисление.УБХТипыКонструкцийАМС.Башня)
		|			ТОГДА УБХРегиональныеКоэффициентыКлиентскихГрупп.КоэффициентБашня
		|		КОГДА &ТипАМС = ЗНАЧЕНИЕ(Перечисление.УБХТипыКонструкцийАМС.Столб)
		|			ТОГДА УБХРегиональныеКоэффициентыКлиентскихГрупп.КоэффициентСтолб
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК РКК
		|ИЗ
		|	РегистрСведений.УБХРегиональныеКоэффициентыКлиентскихГрупп КАК УБХРегиональныеКоэффициентыКлиентскихГрупп
		|ГДЕ
		|	УБХРегиональныеКоэффициентыКлиентскихГрупп.КлиентскаяГруппа = &КлиентскаяГруппа
		|	И УБХРегиональныеКоэффициентыКлиентскихГрупп.Регион = &Регион
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УБХКомпенсацииЗаЭлектроэнергию.Сумма КАК КЭ
		|ИЗ
		|	РегистрСведений.УБХКомпенсацииЗаЭлектроэнергию КАК УБХКомпенсацииЗаЭлектроэнергию
		|ГДЕ
		|	УБХКомпенсацииЗаЭлектроэнергию.МощностьНижняя < &Мощность
		|			И &Мощность <= УБХКомпенсацииЗаЭлектроэнергию.МощностьВерхняя";
	
	Запрос.УстановитьПараметр("ТипОборудования", 		Справочники.УБХТипыОборудования.КабельнаяЛиния);
	Запрос.УстановитьПараметр("СтатусСогласования", 	Справочники.УБХСтатусы.Заявлено);
	Запрос.УстановитьПараметр("ПереченьОборудования", 	Объект.ПереченьОборудования.Выгрузить());
	Запрос.УстановитьПараметр("Тариф", 					Тариф);
	Запрос.УстановитьПараметр("Мощность", 				Объект.Мощность);
	Запрос.УстановитьПараметр("ТипАМС", 				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АМС, 		"ТипКонструкции"));
	Запрос.УстановитьПараметр("КлиентскаяГруппа", 		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КлиентПБК, "КлиентскаяГруппа"));
	Запрос.УстановитьПараметр("Регион", 				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АМС, 		"Регион"));

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаТариф = РезультатЗапроса[2].Выбрать();
	ВыборкаТариф.Следующий();
	
	РКК = 1; // Региональный коэффициент клиентской группы.
	Если Не РезультатЗапроса[4].Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса[4].Выбрать();
		ВыборкаЗапроса.Следующий();
		РКК = ВыборкаЗапроса.РКК;
	КонецЕСли;
	
	Объект.КомпенсацияЗаЭлектроэнергию = 0;
	Если Не РезультатЗапроса[5].Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса[5].Выбрать();
		ВыборкаЗапроса.Следующий();
		Объект.КомпенсацияЗаЭлектроэнергию = ВыборкаЗапроса.КЭ;
	КонецЕСли;
	
	// ПлТмм. 
	ПлТмм = 0;
	
	// ПШТАК. 
	ПШТАК = ВыборкаТариф.СтоимостьШтырьевоАнтены;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	// КА.
	КА = 0;
	
	Габариты = Новый СписокЗначений;
	
	// ОбЕд.
	ОбЕд 		= 0;
	Обмм 		= 0;
	Выс  		= 0;
	СписокВысот = Новый СписокЗначений;
	
	КонтейнерКоличествоСтоек 	= 0;
	КонтейнерКоличествоЮнитов 	= 0;
	
	ЗемляТермошкафы 	= 0;
	ЗемляКонтейнеры 	= 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипОборудования = Справочники.УБХТипыОборудования.АнтеннаШтыреваяТурникетная Тогда
			КА = КА + 1;
		ИначеЕсли Выборка.ГруппаРазмещения = Перечисления.УБХГруппыРазмещения.АМС Тогда
			
			Если Выборка.ТипВетровойНагрузки = Перечисления.УБХТипыВетровойНагрузки.Круг Тогда
				ОбЕд = Pow(Выборка.Диаметр, 2) * 0.25 * 3.1415926535897932;
			Иначе
				
				Габариты.Очистить();
				Габариты.Добавить(Выборка.Высота);
				Габариты.Добавить(Выборка.Ширина);
				Габариты.Добавить(Выборка.Глубина);
				
				Габариты.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				
				ОбЕд = Габариты[0].Значение * Габариты[1].Значение;
							
			КонецЕсли;
			Обмм = Обмм + ОбЕд;
			
			СписокВысот.Добавить(Выборка.ВысотаСогласованная);
		ИначеЕсли Выборка.ГруппаРазмещения = Перечисления.УБХГруппыРазмещения.Контейнер Тогда
			
			Если Выборка.ТипРазмещенияВКонтейнере = Перечисления.УБХТипыРазмещенийВКонтейнере.ВСтойке
				ИЛИ Выборка.ТипРазмещенияВКонтейнере = Перечисления.УБХТипыРазмещенийВКонтейнере.СтойкоМесто Тогда
				КонтейнерКоличествоСтоек = КонтейнерКоличествоСтоек + 1;
			ИначеЕсли Выборка.ТипРазмещенияВКонтейнере = Перечисления.УБХТипыРазмещенийВКонтейнере.НастенныйШкаф Тогда
				КонтейнерКоличествоЮнитов = КонтейнерКоличествоЮнитов + 1;
			КонецЕсли;
					
		ИначеЕсли Выборка.ГруппаРазмещения = Перечисления.УБХГруппыРазмещения.ПлощадкаЗУ Тогда
			
			Если Объект.ВидТарифа = Перечисления.УБХВидыТарифовРазмещения.Стандартный Тогда
				
				Если Выборка.ТипРазмещенияНаПлощадке = Перечисления.УБХТипыРазмещенияНаПлощадке.Контейнер Тогда  
					ЗемляКонтейнеры = ЗемляКонтейнеры + 1;
				ИначеЕсли Выборка.ТипРазмещенияНаПлощадке = Перечисления.УБХТипыРазмещенияНаПлощадке.Термошкаф Тогда
					ЗемляТермошкафы = ЗемляТермошкафы + 1;
				КонецЕсли;
				
			ИначеЕсли Объект.ВидТарифа = Перечисления.УБХВидыТарифовРазмещения.Специальный Тогда
				ПлТмм = ПлТмм + Выборка.Ширина * Выборка.Глубина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#Область РассчетПоГруппеАМС	
	Об 									= Обмм/1000000; // Общий объем размещения.
	Объект.СкидкаЗаОбщийОбъемПроцент 	= ВычислитьСкидкуЗаОбщийОбъемПоКлиентскойГруппе(КлиентскаяГруппа, Об);

	Пучрасш 	= ВыборкаТариф.ПорогУчетаРасширенногоОбъема;
	Обс         = 0;
	Обр			= 0;
	ЕдОбр		= ВыборкаТариф.ЕдиницаРасширенногоОбъема; // Единица расширенного объема.
	
	Если Об < Пучрасш Тогда
		Обс = Об; // Стандартный объем размещения.
	ИначеЕсли Об >= Пучрасш Тогда
		Обс = Пучрасш;
		Обр = Об - Обс; // Расширенный объем размещения. 
	КонецЕсли;
	
	СписокВысот.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Объект.МаксВысотаПодвеса = СписокВысот[0].Значение;
	
	РасценкиТарифа = ОпределитьТарифыДляМаксВысотыРазмещения(Объект.МаксВысотаПодвеса, РезультатЗапроса[3].Выгрузить(), "Максимальная высота подвеса");
	
	Если Не РасценкиТарифа.Ошибки = "" Тогда
		ОбщегоНазначения.СообщитьПользователю(РасценкиТарифа.Ошибки);
		Возврат;
	КонецЕсли;
	
	ПСО 	= РасценкиТарифа.Стандарт; // Плата за стандартный объем, руб. без без НДС.
	
	ПлЕдРО 	= РасценкиТарифа.Расширенный; // Стоимость единицы расширенного объема, руб. без НДС.
	
	ПРО = Окр(?(ЕдОбр = 0, 0, Обр/ЕдОбр), 5) * ПлЕдРО; // Плата за расширенный объем.
	
	Объект.СтандартныйОбъем = ПСО;
	Объект.РасширенныйОбъем = ПРО;
	
	Объект.ПлощадьСтандартныйОбъемРазмещения 	= Обс;
	Объект.ПлощадьРасширенныйОбъемРазмещения 	= Обр;
	#КонецОбласти

	#Область Антенны
	Объект.АнтенныСумма = КА * ВыборкаТариф.СтоимостьШтырьевоАнтены;
	#КонецОбласти

	#Область РасчетПоГруппеКонтейнер
	Объект.КонтейнерСумма = КонтейнерКоличествоСтоек * ВыборкаТариф.ПлатаЗаСтойку + КонтейнерКоличествоЮнитов * ВыборкаТариф.ПлатаЗаМодуль;
	#КонецОбласти
	
	#Область РасчетПоГруппеЗемля
	ПлТ = ПлТмм/1000000;
	
	Объект.ПлощадкаСумма = 0;
	Если Объект.ВидТарифа = Перечисления.УБХВидыТарифовРазмещения.Стандартный Тогда
		Объект.ПлощадкаСумма = ЗемляТермошкафы * ВыборкаТариф.СтоимостьТермошкафа + ЗемляКонтейнеры * ВыборкаТариф.СтоимостьКонтейнера;
	ИначеЕсли Объект.ВидТарифа = Перечисления.УБХВидыТарифовРазмещения.Специальный Тогда
		
		РасценкиСпецТарифа = ОпределитьТарифыДляМаксВысотыРазмещения(ПлТ, РезультатЗапроса[3].Выгрузить(), "Общая площадь размещения на площадке");
		Если Не РасценкиСпецТарифа.Ошибки = "" Тогда
			ОбщегоНазначения.СообщитьПользователю(РасценкиТарифа.Ошибки);
			Возврат;
		КонецЕсли;

		Объект.ПлощадкаСумма = РасценкиСпецТарифа.Стандарт;
	КонецЕсли;
	#КонецОбласти
		
	Объект.СтоимостьРазмещения = (Объект.СтандартныйОбъем
	+ Объект.РасширенныйОбъем
	+ Объект.АнтенныСумма
	+ Объект.КонтейнерСумма
	+ Объект.ПлощадкаСумма) * РКК
	+ Объект.КомпенсацияЗаЭлектроэнергию;
	
	Объект.СуммаСкидкиЗаОбщийОбъем = 0;
	Если НЕ Объект.СкидкаЗаОбщийОбъемПроцент = 0
		И НЕ Объект.ТипЗапроса = ПредопределенноеЗначение("Перечисление.УБХТипыЗапросовРазмещения.СовместноеИспользование") Тогда
		Объект.СуммаСкидкиЗаОбщийОбъем = Объект.СтоимостьРазмещения * (Объект.СкидкаЗаОбщийОбъемПроцент/100);
	КонецЕсли;

	Объект.СуммаНаценки		= 0;
	Объект.СуммаСпецСкидки 	= 0;
	
	Если НЕ Объект.Наценка = 0 и Объект.ПрименяетсяНаценка Тогда
		Если Объект.ВидВыраженияРасчетаНаценка = Перечисления.УБХВидыВыраженийРасчетов.Процент Тогда
			Объект.СуммаНаценки = Объект.СтоимостьРазмещения * (Объект.Наценка/100); 
		ИначеЕсли Объект.ВидВыраженияРасчетаНаценка = Перечисления.УБХВидыВыраженийРасчетов.Рубли Тогда
			Объект.СуммаНаценки = Объект.Наценка;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СпециальнаяСкидкаСогласована
		И НЕ Объект.СпецСкидка = 0
		И Объект.ПрименяетсяСпецСкидка Тогда
		
		Если Объект.ВидВыраженияРасчетаСкидка = Перечисления.УБХВидыВыраженийРасчетов.Процент Тогда
			Объект.СуммаСпецСкидки = Объект.СтоимостьРазмещения * (Объект.СпецСкидка/100); 
		ИначеЕсли Объект.ВидВыраженияРасчетаСкидка = Перечисления.УБХВидыВыраженийРасчетов.Рубли Тогда
			Объект.СуммаСпецСкидки = Объект.СпецСкидка;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.СтоимостьРазмещенияИтого = Объект.СтоимостьРазмещения
	- Объект.СуммаСкидкиЗаОбщийОбъем
	- Объект.СуммаСпецСкидки
	+ Объект.СуммаНаценки;
		
	Объект.СуммаНДС = УБХОбщегоНазначенияКлиентСервер.РассчитатьСуммуНДС(
		Объект.СтоимостьРазмещенияИтого,
		УБХОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДС(Объект.СтавкаНДС),
		Ложь);

	Объект.Сумма = Объект.СтоимостьРазмещенияИтого + Объект.СуммаНДС; 
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТарифыДляМаксВысотыРазмещения(ВысМакс, ТаблицаТарифы, НаименованиеПараметраОценки)

	РасценкиТарифа = Новый Структура;
	РасценкиТарифа.Вставить("Стандарт", 	0);
	РасценкиТарифа.Вставить("Расширенный", 	0);
	РасценкиТарифа.Вставить("Ошибки", 		"");
	
	Для Каждого СтрокаТЧ Из ТаблицаТарифы Цикл
		Если ВысМакс > СтрокаТЧ.ВысотаПодвесаНижнийПорог И ВысМакс <= СтрокаТЧ.ВысотаПодвесаВерхнийПорог Тогда
			РасценкиТарифа.Стандарт 	= СтрокаТЧ.СуммаСтандартноеРазмещения;
			РасценкиТарифа.Расширенный 	= СтрокаТЧ.СуммаРасширенноеРазмещение;
			Возврат РасценкиТарифа;
		КонецЕсли;
	КонецЦикла;
	
	РасценкиТарифа.Ошибки = СТроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 не входит ни в один из диапазонов выбранного тарифа'"), НаименованиеПараметраОценки, ВысМакс);
	
	Возврат РасценкиТарифа;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаПоШаблону

&НаКлиенте
Процедура ЗагрузитьСообщение()
	ОчиститьСообщения();
	ВыбратьФайлДляЗагрузкиНаКлиенте(Истина);		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДляЗагрузкиНаКлиенте(ЗагружатьПослеВыбора = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗагружатьПослеВыбора", ЗагружатьПослеВыбора);
	
	Оповещение = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для продолжения необходимо установить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Фильтр = НСтр("ru='Книга Excel 2007 (*.xlsx)|*.xlsx'");
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДляЗагрузки", Истина);
	ПараметрыОповещения.Вставить("ЗагружатьПослеВыбора", ДополнительныеПараметры.ЗагружатьПослеВыбора);
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыбранФайл", ЭтотОбъект, ПараметрыОповещения);
	ДиалогОткрытияФайла.Показать(ОповещениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранФайл(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("ДляЗагрузки") Тогда
		Если ДополнительныеПараметры.ДляЗагрузки Тогда
			ПутьКФайлуЗагрузки = ВыбранныеФайлы[0];
			// Проверка существования файла.
			Если ДополнительныеПараметры.ЗагружатьПослеВыбора Тогда
				ЗагрузитьИзФайлаНаКлиенте();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаНаКлиенте()
	ДопПараметры = Новый Структура("ВидФайла", "ФайлДанныхДляЗагрузки");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьФайлВХранилищеЗавершить", ЭтотОбъект, ДопПараметры);
	ПомещаемыеФайлы = Новый Массив;
	Интерактивно = Истина;
	Если ЗначениеЗаполнено(ПутьКФайлуЗагрузки) Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПутьКФайлуЗагрузки);
		Интерактивно = Ложь;
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЕсли;
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Интерактивно, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлВХранилищеЗавершить(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	АдресФайлаЗагрузки = "";
	Если ПомещенныеФайлы <> Неопределено Тогда
		АдресФайлаЗагрузки = ПомещенныеФайлы[0].Хранение;
		ЗапуститьЗагрузкуДанных();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуДанных()
	
	МассивСообщений = Неопределено;
	РезультатЗагрузки = ЗагрузитьДанныеНаСервере();
	
	//Если РезультатЗагрузки.ЕстьОшибки Тогда
	//	Для Каждого Ошибка Из РезультатЗагрузки.Ошибки Цикл
	//		ОбщегоНазначенияКлиент.СообщитьПользователю(
	//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при загрузке: %1'"), Ошибка));
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДанныеНаСервере()
	
	ЗагруженныйШаблонСДанными = Новый ТабличныйДокумент;	
	Заявка_на_ТУ_ПБК	      = Новый ТабличныйДокумент;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаЗагрузки);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
	
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЗагруженныйШаблонСДанными.Прочитать(ИмяВременногоФайла);
	Заявка_на_ТУ_ПБК = ЗагруженныйШаблонСДанными.ПолучитьОбласть("Заявка_на_ТУ_ПБК");
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ВысотаТаблицы = Заявка_на_ТУ_ПБК.ВысотаТаблицы;
	ДанныеШаблона = ИнициализироватьДанныеШаблонаЗагрузки();
	
	Для Каждого СтрокаТЧ Из ДанныеШаблона Цикл
		Область = Заявка_на_ТУ_ПБК.НайтиТекст(СтрокаТЧ.РеквизитДокумента);
		
		Если ТипЗнч(Область)=Тип("Неопределено") Тогда
			//Сообщить("Значение не найдено!");
		Иначе
			Поз = Найти(Область.Имя, "C");
			ИмяСтроки = Лев(Область.Имя, Поз);
			Если ЗначениеЗаполнено(СтрокаТЧ.НомерКолонкиЗначения) Тогда
				СтрокаТЧ.Значение = Заявка_на_ТУ_ПБК.Область(ИмяСтроки + СтрокаТЧ.НомерКолонкиЗначения).Текст;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Выражение) Тогда
				НомерСтроки = СтрЗаменить(ИмяСтроки, "R", "");
				НомерСтроки = Число(СтрЗаменить(НомерСтроки, "C", ""));
				Выполнить(СтрокаТЧ.Выражение);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Преобразование) Тогда
				Выполнить(СтрокаТЧ.Преобразование);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
				
КонецФункции

&НаСервере
Процедура ПреобразоватьЧислоВДату(СтрокаДанных, Дни)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, &Количество) КАК Значение";
	
	Запрос.УстановитьПараметр("Дата", Дата("19000101"));
	Запрос.УстановитьПараметр("Количество", Дни - 2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	СтрокаДанных.Значение = ВыборкаДетальныеЗаписи.Значение;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьДанныеШаблонаЗагрузки()
	
	ДанныеШаблона = Новый ТаблицаЗначений;
	ДанныеШаблона.Колонки.Добавить("РеквизитДокумента");
	ДанныеШаблона.Колонки.Добавить("НомерКолонки");
	ДанныеШаблона.Колонки.Добавить("НомерКолонкиЗначения");
	ДанныеШаблона.Колонки.Добавить("Выражение");
	ДанныеШаблона.Колонки.Добавить("ГруппаСведений");
	ДанныеШаблона.Колонки.Добавить("Имя");
	ДанныеШаблона.Колонки.Добавить("Значение");
	ДанныеШаблона.Колонки.Добавить("Преобразование");
	
	ПоляШаблонаЗагрузки = Документы.УБХЗапросНаРазмещениеОборудования.ПолучитьМакет("ПоляШаблонаЗагрузки");
	
	ВысотаТаблицы = ПоляШаблонаЗагрузки.ВысотаТаблицы;

	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НоваяСтрока = ДанныеШаблона.Добавить();
		НоваяСтрока.РеквизитДокумента 		= ПоляШаблонаЗагрузки.Область("R" + НомерСтроки + "C1").Текст;
		НоваяСтрока.НомерКолонки 			= ПоляШаблонаЗагрузки.Область("R" + НомерСтроки + "C2").Текст;
		НоваяСтрока.НомерКолонкиЗначения 	= ПоляШаблонаЗагрузки.Область("R" + НомерСтроки + "C3").Текст;
		НоваяСтрока.Выражение 				= ПоляШаблонаЗагрузки.Область("R" + НомерСтроки + "C4").Текст;
		НоваяСтрока.ГруппаСведений 			= ПоляШаблонаЗагрузки.Область("R" + НомерСтроки + "C5").Текст;
		НоваяСтрока.Имя 					= ПоляШаблонаЗагрузки.Область("R" + НомерСтроки + "C6").Текст;
		НоваяСтрока.Преобразование 			= ПоляШаблонаЗагрузки.Область("R" + НомерСтроки + "C7").Текст;
	КонецЦикла;
	
	Возврат ДанныеШаблона;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРазмещениеВКонтейнере(НомерСтроки, ТаблДокумент, СтрокаДанных)

	ТаблицаКонтейнер = Новый ТаблицаЗначений;
	ТаблицаКонтейнер.Колонки.Добавить("ТипРабот");
	ТаблицаКонтейнер.Колонки.Добавить("ТипОборудования");
	ТаблицаКонтейнер.Колонки.Добавить("Производитель");
	ТаблицаКонтейнер.Колонки.Добавить("Модель");
	ТаблицаКонтейнер.Колонки.Добавить("Высота");
	ТаблицаКонтейнер.Колонки.Добавить("Ширина");
	ТаблицаКонтейнер.Колонки.Добавить("Глубина");
	ТаблицаКонтейнер.Колонки.Добавить("ТипРазмещения");
	
	НомерСтроки = НомерСтроки + 3;
	
	Пока Истина Цикл
			
		Если Не ЗначениеЗаполнено(ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКонтейнер.Добавить();
		НоваяСтрока.ТипРабот 		= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C2").Текст;
		НоваяСтрока.ТипОборудования = ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C3").Текст;
		НоваяСтрока.Производитель 	= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C4").Текст;
		НоваяСтрока.Модель 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C5").Текст;
		НоваяСтрока.Высота 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C8").Текст;
		НоваяСтрока.Ширина 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C9").Текст;
		НоваяСтрока.Глубина 		= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C10").Текст;
		НоваяСтрока.ТипРазмещения 	= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C11").Текст;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	СтрокаДанных.Значение = ТаблицаКонтейнер;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазмещениеНаПлощадке(НомерСтроки, ТаблДокумент, СтрокаДанных)

	ТаблицаКонтейнер = Новый ТаблицаЗначений;
	ТаблицаКонтейнер.Колонки.Добавить("ТипРабот");
	ТаблицаКонтейнер.Колонки.Добавить("ТипОборудования");
	ТаблицаКонтейнер.Колонки.Добавить("Производитель");
	ТаблицаКонтейнер.Колонки.Добавить("Модель");
	ТаблицаКонтейнер.Колонки.Добавить("Высота");
	ТаблицаКонтейнер.Колонки.Добавить("Ширина");
	ТаблицаКонтейнер.Колонки.Добавить("Глубина");
	
	НомерСтроки = НомерСтроки + 3;
	
	Пока Истина Цикл
			
		Если Не ЗначениеЗаполнено(ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКонтейнер.Добавить();
		НоваяСтрока.ТипРабот 		= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C2").Текст;
		НоваяСтрока.ТипОборудования = ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C3").Текст;
		НоваяСтрока.Производитель 	= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C4").Текст;
		НоваяСтрока.Модель 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C5").Текст;
		НоваяСтрока.Высота 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C8").Текст;
		НоваяСтрока.Ширина 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C9").Текст;
		НоваяСтрока.Глубина 		= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C10").Текст;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	СтрокаДанных.Значение = ТаблицаКонтейнер;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазмещениеВЛЭС(НомерСтроки, ТаблДокумент, СтрокаДанных)

	ТаблицаКонтейнер = Новый ТаблицаЗначений;
	ТаблицаКонтейнер.Колонки.Добавить("ТипРабот");
	ТаблицаКонтейнер.Колонки.Добавить("ТипКабеля");
	ТаблицаКонтейнер.Колонки.Добавить("ДлинаОднойЛинии");
	ТаблицаКонтейнер.Колонки.Добавить("КоличествоКабельныхЛиний");
	
	НомерСтроки = НомерСтроки + 3;
	
	Пока Истина Цикл
			
		Если Не ЗначениеЗаполнено(ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКонтейнер.Добавить();
		НоваяСтрока.ТипРабот 					= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C2").Текст;
		НоваяСтрока.ТипКабеля 					= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C3").Текст;
		НоваяСтрока.ДлинаОднойЛинии 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C4").Текст;
		НоваяСтрока.КоличествоКабельныхЛиний 	= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C5").Текст;
				
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	СтрокаДанных.Значение = ТаблицаКонтейнер;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазмещениеНаАМС(НомерСтроки, ТаблДокумент, СтрокаДанных)

	ТаблицаКонтейнер = Новый ТаблицаЗначений;
	ТаблицаКонтейнер.Колонки.Добавить("ТипРабот");
	ТаблицаКонтейнер.Колонки.Добавить("ТипОборудования");
	ТаблицаКонтейнер.Колонки.Добавить("Производитель");
	ТаблицаКонтейнер.Колонки.Добавить("Модель");
	ТаблицаКонтейнер.Колонки.Добавить("ВысотаПодвеса");
	ТаблицаКонтейнер.Колонки.Добавить("Азимут");
	ТаблицаКонтейнер.Колонки.Добавить("Высота");
	ТаблицаКонтейнер.Колонки.Добавить("Ширина");
	ТаблицаКонтейнер.Колонки.Добавить("Глубина");
	ТаблицаКонтейнер.Колонки.Добавить("Диаметр");
	ТаблицаКонтейнер.Колонки.Добавить("Вес");
	
	НомерСтроки = НомерСтроки + 3;
	
	Пока Истина Цикл
			
		Если Не ЗначениеЗаполнено(ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКонтейнер.Добавить();
		НоваяСтрока.ТипРабот 		= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C2").Текст;
		НоваяСтрока.ТипОборудования = ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C3").Текст;
		НоваяСтрока.Производитель 	= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C4").Текст;
		НоваяСтрока.Модель 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C5").Текст;
		
		НоваяСтрока.ВысотаПодвеса 	= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C6").Текст;
		НоваяСтрока.Азимут 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C7").Текст;
		
		НоваяСтрока.Высота 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C8").Текст;
		НоваяСтрока.Ширина 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C9").Текст;
		НоваяСтрока.Глубина 		= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C10").Текст;
		НоваяСтрока.Диаметр 		= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C11").Текст;
		НоваяСтрока.Вес 			= ТаблДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C12").Текст;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	СтрокаДанных.Значение = ТаблицаКонтейнер;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДоступностьПримененияСкидкиНаценки()
	
	Если Объект.ПрименяетсяНаценка Тогда
		Объект.ПрименяетсяСпецСкидка = Ложь;
	КонецЕсли;
	
	Если Объект.ПрименяетсяСпецСкидка Тогда
		Объект.ПрименяетсяНаценка = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры
  
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.Тариф.Видимость = Форма.Объект.ВидТарифа = ПредопределенноеЗначение("Перечисление.УБХВидыТарифовРазмещения.Специальный");
	
	Если Форма.Объект.ПрименяетсяНаценка Тогда
		Форма.Элементы.ГруппаСпецСкидка.ТолькоПросмотр = Истина;
	Иначе
		Форма.Элементы.ГруппаСпецСкидка.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Форма.Объект.ПрименяетсяСпецСкидка Тогда
		Форма.Элементы.ГруппаНаценки.ТолькоПросмотр = Истина;
	Иначе
		Форма.Элементы.ГруппаНаценки.ТолькоПросмотр = Ложь;
	КонецЕсли; 
	
	Если Форма.Объект.ТипЗапроса = ПредопределенноеЗначение("Перечисление.УБХТипыЗапросовРазмещения.СовместноеИспользование") Тогда
		Форма.Элементы.СкидкиЗаОбщийОбъемПроцент.Доступность = Ложь;
	Иначе	
		Форма.Элементы.СкидкиЗаОбщийОбъемПроцент.Доступность = Истина;
	КонецЕсли;
	
	Если Форма.Объект.ТипЗапроса = ПредопределенноеЗначение("Перечисление.УБХТипыЗапросовРазмещения.Демонтаж") Тогда
		Форма.Элементы.СтраницаРасчетСтоимости.Доступность = Ложь;
	Иначе
		Форма.Элементы.СтраницаРасчетСтоимости.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АМСЗаполнитьДанные(Форма)

	Форма.КатегорияАМС 				= Неопределено;
	Форма.Широта 					= 0;
	Форма.Долгота 					= 0;
	Форма.ТипКонструкцииАМС 		= Неопределено;
	Форма.МатериалАМС 				= Неопределено;
	Форма.ДатаНачалаЭксплуатации1С 	= Неопределено;
	Форма.АдресАМС 					= "";
	Форма.ВысотаАМС 				= 0;
	
	Если ЗначениеЗаполнено(Форма.Объект.АМС) Тогда
		ДанныеПоАМС = ПолучитьДанныеПоАМС(Форма.Объект.АМС);
		ЗаполнитьЗначенияСвойств(Форма, ДанныеПоАМС);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьЗначенияРеквизитовПоПлощадке(Форма)

	Если ЗначениеЗаполнено(Форма.Объект.Площадка) Тогда
		СписокВыбора = ПолучитьСписокАМСДляПлощадки(Форма.Объект.Площадка);
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Форма.Элементы.АМС.СписокВыбора.Добавить(
			ЭлементСписка.Значение);
		КонецЦИкла;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоАМС(АМС)
	
	ДанныеПоАМС = Новый Структура();
	ДанныеПоАМС.Вставить("КатегорияАМС");
	ДанныеПоАМС.Вставить("Широта");
	ДанныеПоАМС.Вставить("Долгота");
	ДанныеПоАМС.Вставить("ТипКонструкцииАМС");
	ДанныеПоАМС.Вставить("ДатаНачалаЭксплуатации1С");
	ДанныеПоАМС.Вставить("АдресАМС");
	ДанныеПоАМС.Вставить("ВысотаАМС");
	ДанныеПоАМС.Вставить("МатериалАМС");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБХАМС.Материал КАК МатериалАМС,
		|	УБХАМС.Категория КАК КатегорияАМС,
		|	УБХАМС.Широта КАК Широта,
		|	УБХАМС.Долгота КАК Долгота,
		|	УБХАМС.ТипКонструкции КАК ТипКонструкцииАМС,
		|	УБХАМС.Адрес КАК АдресАМС,
		|	УБХАМС.Высота КАК ВысотаАМС,
		|	УБХАМС.ДатаНачалаЭксплуатации1С КАК ДатаНачалаЭксплуатации1С
		|ИЗ
		|	Справочник.УБХАМС КАК УБХАМС
		|ГДЕ
		|	УБХАМС.Ссылка = &АМС";
	Запрос.УстановитьПараметр("АМС", АМС);
	РезультатЗапроса = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеПоАМС, ВыборкаДетальныеЗаписи);
	
	Возврат ДанныеПоАМС;
	
КонецФункции

&НаКлиенте
Процедура ВыборТарифаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		
		Объект.Тариф = РезультатВыбора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВерсииЗапроса()
	
	ДополнительныеПараметры = Новый Структура("ВерсияОснование", Объект.ТекущаяВерсияЗапроса);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаполненииПоВерсииЗапроса", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Текущая версия запроса отличается от выбранной. Перезаполнить по вновь выбранной версии запроса?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаполненииПоВерсииЗапроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоВерсииЗапросаСервер(ДополнительныеПараметры.ВерсияОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВерсииЗапросаСервер(ВерсияОснование) Экспорт
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ВерсияОснование);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	//Форма =   ДополнительныеПараметры.Форма;
	//Элемент = ДополнительныеПараметры.Элемент;
	//
	//ПараметрыВыбранногоПоля = РезультатЗакрытия;
	//
	//	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
	//		НоваяСтрока = Элемент.ТекущиеДанные;
	//		НоваяСтрока.Использование = Истина;
	//		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
	//		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
	//		
	//		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
	//			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
	//		КонецЕсли;
	//	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокАМСДляПлощадки(Площадка)
		
	СписокАМС = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБХОбъектыПлощадок.ОбъектПлощадки КАК ОбъектПлощадки
		|ИЗ
		|	РегистрСведений.УБХОбъектыПлощадок КАК УБХОбъектыПлощадок
		|ГДЕ
		|	УБХОбъектыПлощадок.Площадка = &Площадка
		|	И УБХОбъектыПлощадок.ОбъектПлощадки ССЫЛКА Справочник.УБХАМС";
	
	Запрос.УстановитьПараметр("Площадка", Площадка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СписокАМС;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокАМС.Добавить(ВыборкаДетальныеЗаписи.ОбъектПлощадки);
	КонецЦикла;
	
	Возврат СписокАМС;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры	

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
