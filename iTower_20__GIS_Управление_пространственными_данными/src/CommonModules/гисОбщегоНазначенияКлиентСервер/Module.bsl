////////////////////////////////////////////////////////////////////////////////
// Серверный/клиентский модуль для методов общего назначения.
// Основное назначение:
//  - перевод цвета в шестнадцатеричное представление (hex);
//  - перевод даты в количество милисекунд (timestamp).
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Представляет цвет в формате hex.
//
// Параметры:
//  Цвет - Цвет - цвет, который нужно перевести в формат hex. ОБЯЗАТЕЛЬНО АБСОЛЮТНЫЙ!!!
// 
// Возвращаемое значение:
//   - Строка - представление цвета в формате hex.
//
Функция ПеревестиЦветВHEX(Цвет) Экспорт
    Возврат "#" + ПеревестиКомпонентВHEX(Цвет.Красный)
		+ ПеревестиКомпонентВHEX(Цвет.Зеленый)
		+ ПеревестиКомпонентВHEX(Цвет.Синий);
КонецФункции

// Получает цвет из формата hex.
//
// Параметры:
//  ЦветHEX	 - Строка - цвет, представленный в формает hex.
// 
// Возвращаемое значение:
//   - Цвет - цвет, полученный из представления hex. Цвет будет АБСОЛЮТНЫЙ.
//
Функция ПеревестиHEXВЦвет(ЦветHEX) Экспорт
    Возврат Новый Цвет(
		ПеревестиHEXВКомпонент(Сред(ЦветHEX, 2, 2)),
		ПеревестиHEXВКомпонент(Сред(ЦветHEX, 4, 2)),
		ПеревестиHEXВКомпонент(Сред(ЦветHEX, 6, 2))
	);
КонецФункции


// Представляет дату в формате timestamp.
//
// Параметры:
//  Дата - Дата - дата, которую нужно перевести в timestamp.
// 
// Возвращаемое значение:
//   - Число - представление даты в формате timestamp.
//
Функция ПеревестиДатуВTimestamp(Дата) Экспорт
	Возврат (Дата - Дата("19700101")) * 1000;
КонецФункции

// Получает дату из формата timestamp.
//
// Параметры:
//  timestamp	 - Число - дата в формает timestamp.
// 
// Возвращаемое значение:
//   - Дата - дата, полученная из представления timestamp.
//
Функция ПеревестиTimestampВДату(timestamp) Экспорт
	ДатаНачала = Дата("19700101");
	Возврат ?(ЗначениеЗаполнено(timestamp), ДатаНачала + timestamp / 1000, Дата("00010101"));
КонецФункции

// Перевод строки в дату
//
// Параметры:
//  СтрокаДата	 - Строка - Дата в виде 17.12.2014
// 
// Возвращаемое значение:
//   - Дата - дата, полученная из строки
//
Функция ПеревестиСтрокуВДату(Знач СтрокаДата) Экспорт
	Попытка
		МассивДаты = СтрРазделить(СтрокаДата, ".");
		Возврат Дата(МассивДаты[2] + МассивДаты[1] + МассивДаты[0]);
	Исключение
		Возврат Дата("00010101");
	КонецПопытки;
КонецФункции

// Возвращает список стандартных масштабов карты
// 
// Возвращаемое значение:
//   - СписокЗначений - Перечень стандартных масштабов карты.
//
Функция МасштабДляПодписейПолучитьСписокВыбора() Экспорт
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить(1692, 	"1:1 692");
	СписокВыбора.Добавить(3385, 	"1:3 385");
	СписокВыбора.Добавить(6771, 	"1:6 771");
	СписокВыбора.Добавить(13542, 	"1:13 542");
	СписокВыбора.Добавить(27084, 	"1:27 084");
	СписокВыбора.Добавить(54168, 	"1:54 168");
	СписокВыбора.Добавить(108336, 	"1:108 336");
	СписокВыбора.Добавить(216672, 	"1:216 672");
	СписокВыбора.Добавить(433344, 	"1:433 344");
	СписокВыбора.Добавить(866688, 	"1:866 688");
	СписокВыбора.Добавить(1733376, 	"1:1 733 376");
	СписокВыбора.Добавить(3466752, 	"1:3 466 752");
	СписокВыбора.Добавить(6933504, 	"1:6 933 504");
	СписокВыбора.Добавить(13867008, "1:13 867 008");
	СписокВыбора.Добавить(27734017, "1:27 734 017");
	СписокВыбора.Добавить(55468034, "1:55 468 034");
	
	Возврат СписокВыбора;
КонецФункции


// Добавляет на форму элемент условного оформления по одному полю указанным цветом фона.
//
// Параметры:
//  Форма					 - Управляемаяформа - форма, на которой делается условное оформление;
//  ЛевоеЗначениеУсловия	 - Строка - имя поля для условия оформления;
//  ПравоеЗначенияУсловия	 - Произвольный - значение для установки оформления по равенству;
//  ПолеОформления			 - Строка - имя поля для оформления;
//  ЦветОформления			 - Цвет - цвет фона, которым будет произведено оформление.
//
Процедура ДобавитьЭлементУсловногоОформления(Форма, ЛевоеЗначениеУсловия, ПравоеЗначенияУсловия, ПолеОформления, ЦветОформления) Экспорт
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	// делаем условие
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначениеУсловия);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначенияУсловия;
	ЭлементОтбора.Использование = Истина;
	// делаем поле
	ЭлементПоле = ЭлементУО.Поля.Элементы.Добавить();
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления);
	ЭлементПоле.Использование = Истина;
	// делаем оформление
	ЭлементОформления = ЭлементУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	Если ЭлементОформления <> Неопределено Тогда
		ЭлементОформления.Значение = ЦветОформления;
		ЭлементОформления.Использование = Истина;
	КонецЕсли;
	ЭлементОформления = ЭлементУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
	Если ЭлементОформления <> Неопределено Тогда
		ЭлементОформления.Значение = ЦветОформления;
		ЭлементОформления.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// методы для работы с цветом

// Возвращает компонент r/g/b цвета в 16-ричном представлении.
//
// Параметры:
//  Компонент	 - Число - от 0 до 255 - это компонент r/g/b цвета в 10-ной с/с.
// 
// Возвращаемое значение:
//   - Строка - от 00 до ff - представление компонента r/g/b цвета в 16-ричной с/с.
//
Функция ПеревестиКомпонентВHEX(Знач Компонент)
    ЦифрыHEX = "0123456789abcdef";
	КомпонентHEX = "";
    Если Компонент <= 0 Тогда
        КомпонентHEX = "00";
    Иначе
        Пока Компонент > 0 Цикл
            КомпонентHEX = Сред(ЦифрыHEX, Компонент % 16 + 1, 1) + КомпонентHEX;
            Компонент = Цел(Компонент / 16) ;
        КонецЦикла;
	КонецЕсли;
	
	Возврат ?(СтрДлина(КомпонентHEX) = 1, "0" + КомпонентHEX, КомпонентHEX);
КонецФункции

// Возвращает компонент r/g/b цвета в 10-ном представлении.
//
// Параметры:
//  Компонент	 - Строка - от 00 до ff - представление компонента r/g/b цвета в 16-ричной с/с.
// 
// Возвращаемое значение:
//   - Число - от 0 до 255 - компонент r/g/b цвета в 10-ной с/с.
//
Функция ПеревестиHEXВКомпонент(Знач Компонент)
    ЦифрыHEX = "0123456789abcdef";
	Компонент = НРег(Компонент);
	ПервоеЧисло = Найти(ЦифрыHEX, Сред(Компонент, 1, 1)) - 1;
	ВтороеЧисло = Найти(ЦифрыHEX, Сред(Компонент, 2, 1)) - 1;
	Возврат ВтороеЧисло + (ПервоеЧисло * 16);
КонецФункции 

#КонецОбласти
