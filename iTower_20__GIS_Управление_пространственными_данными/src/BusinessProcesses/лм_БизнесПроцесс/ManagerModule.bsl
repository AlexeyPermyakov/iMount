
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = Данные.Шаблон.Наименование + " " + Данные.Номер + " от " + Данные.Дата;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Шаблон");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БизнесПроцессыИЗадачи

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры:
//   ЗадачаСсылка                - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута.
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", "БизнесПроцесс.лм_БизнесПроцесс.Форма.ДействиеВыполнить");
	Возврат Результат;
	
КонецФункции

// Вызывается при перенаправлении задачи.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   НоваяЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	
	//БизнесПроцессОбъект = ЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	//ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
	//БизнесПроцессОбъект.РезультатВыполнения = РезультатВыполненияПриПеренаправлении(ЗадачаСсылка) 
	//	+ БизнесПроцессОбъект.РезультатВыполнения;
	//УстановитьПривилегированныйРежим(Истина);
	//БизнесПроцессОбъект.Записать();
	
	НоваяЗадача = НоваяЗадачаСсылка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(НоваяЗадача, ЗадачаСсылка, "ИдентификаторТочки, ШаблонБизнесПроцесса, Итерация");
	НоваяЗадача.Записать();
	
КонецПроцедуры

// Вызывается при выполнении задачи из формы списка.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   БизнесПроцессСсылка - БизнесПроцессСсылка - бизнес-процесс, по которому сформирована задача ЗадачаСсылка.
//   ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута.
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	// Устанавливаем значения по умолчанию для пакетного выполнения задач.
	//Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Задание.ТочкиМаршрута.Выполнить Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//	ЗаданиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
	//	ЗаблокироватьДанныеДляРедактирования(ЗаданиеОбъект.Ссылка);
	//	ЗаданиеОбъект.Выполнено = Истина;	
	//	ЗаданиеОбъект.Записать();
	//ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Задание.ТочкиМаршрута.Проверить Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//	ЗаданиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
	//	ЗаблокироватьДанныеДляРедактирования(ЗаданиеОбъект.Ссылка);
	//	ЗаданиеОбъект.Выполнено = Истина;
	//	ЗаданиеОбъект.Подтверждено = Истина;
	//	ЗаданиеОбъект.Записать();
	//КонецЕсли;
	
КонецПроцедуры	

// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи

#КонецОбласти
